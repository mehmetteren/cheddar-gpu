
------------------------------------------------------------------------------
------------------------------------------------------------------------------
--  This source file was automatically generated by Platypus
--  see http://dossen.univ-brest.fr/apl
-- 
--  Any modification of this file will be lost. 
--  Please see the "platypus" directory instead : it contains the Cheddar's
--  model and its meta-model. 
------------------------------------------------------------------------------
 
------------------------------------------------------------------------------
-- Cheddar is a free real time scheduling tool.
-- This program provides services to automatically check temporal constraints
-- of real time tasks.
--
-- Copyright (C) 2002-2014   Frank Singhoff
-- Cheddar is developed by the LAB-STICC Team, University of Brest
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation; either version 2 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
--
--
-- Contact : cheddar@listes.univ-brest.fr
-- 	To post to this mailing list, you must be subscribed
-- 	(see http//beru.univ-brest.fr/~singhoff/cheddar for details)
--
------------------------------------------------------------------------------
------------------------------------------------------------------------------

package body xml_architecture_io is



procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	ref : in out unbounded_string;
	id : in out unbounded_string;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is
begin
	if Get_Length (Atts) > 0 then
		if (To_String (To_Lower (Qname)) = "generic_section")
			 OR (To_String (To_Lower (Qname)) = "computation_section")
			 OR (To_String (To_Lower (Qname)) = "synchronization_section")
			 OR (To_String (To_Lower (Qname)) = "cfg_node")
			 OR (To_String (To_Lower (Qname)) = "state")
			 OR (To_String (To_Lower (Qname)) = "synchronization")
			 OR (To_String (To_Lower (Qname)) = "transition")
			 OR (To_String (To_Lower (Qname)) = "event_analyzer")
			 OR (To_String (To_Lower (Qname)) = "arinc_653_object")
			 OR (To_String (To_Lower (Qname)) = "error_id_type")
			 OR (To_String (To_Lower (Qname)) = "error_id_action_type")
			 OR (To_String (To_Lower (Qname)) = "error_id_level_type")
			 OR (To_String (To_Lower (Qname)) = "system_state_entry_type")
			 OR (To_String (To_Lower (Qname)) = "syshm_ext_type")
			 OR (To_String (To_Lower (Qname)) = "system_hm_tabletype")
			 OR (To_String (To_Lower (Qname)) = "mod_hm_ext_type")
			 OR (To_String (To_Lower (Qname)) = "module_hm_type")
			 OR (To_String (To_Lower (Qname)) = "portext_type")
			 OR (To_String (To_Lower (Qname)) = "porttype")
			 OR (To_String (To_Lower (Qname)) = "samplingporttype")
			 OR (To_String (To_Lower (Qname)) = "procext_type")
			 OR (To_String (To_Lower (Qname)) = "processtype")
			 OR (To_String (To_Lower (Qname)) = "queuingporttype")
			 OR (To_String (To_Lower (Qname)) = "partitionext_type")
			 OR (To_String (To_Lower (Qname)) = "partitiontype")
			 OR (To_String (To_Lower (Qname)) = "memory_requirements")
			 OR (To_String (To_Lower (Qname)) = "memory_ext_type")
			 OR (To_String (To_Lower (Qname)) = "partition_memory_element")
			 OR (To_String (To_Lower (Qname)) = "partition_sched_ext_type")
			 OR (To_String (To_Lower (Qname)) = "window_schedule_element")
			 OR (To_String (To_Lower (Qname)) = "window_sched_ext_type")
			 OR (To_String (To_Lower (Qname)) = "partition_schedule_element")
			 OR (To_String (To_Lower (Qname)) = "module_schedule_type")
			 OR (To_String (To_Lower (Qname)) = "part_hm_ext_type")
			 OR (To_String (To_Lower (Qname)) = "partition_hm_type")
			 OR (To_String (To_Lower (Qname)) = "pseudo_partition")
			 OR (To_String (To_Lower (Qname)) = "standard_partition")
			 OR (To_String (To_Lower (Qname)) = "portmap_ext_type")
			 OR (To_String (To_Lower (Qname)) = "portmappingtype")
			 OR (To_String (To_Lower (Qname)) = "channel")
			 OR (To_String (To_Lower (Qname)) = "modext_type")
			 OR (To_String (To_Lower (Qname)) = "arinc_653_module")
			 OR (To_String (To_Lower (Qname)) = "scheduling_error")
			 OR (To_String (To_Lower (Qname)) = "data_access")
			 OR (To_String (To_Lower (Qname)) = "generic_scheduler")
			 OR (To_String (To_Lower (Qname)) = "aperiodic_task_server_protocol")
			 OR (To_String (To_Lower (Qname)) = "polling_server_protocol")
			 OR (To_String (To_Lower (Qname)) = "deferred_server_protocol")
			 OR (To_String (To_Lower (Qname)) = "sporadic_server_protocol")
			 OR (To_String (To_Lower (Qname)) = "hierarchical_protocol")
			 OR (To_String (To_Lower (Qname)) = "compiled_user_defined_protocol")
			 OR (To_String (To_Lower (Qname)) = "automata_user_defined_protocol")
			 OR (To_String (To_Lower (Qname)) = "pipeline_user_defined_protocol")
			 OR (To_String (To_Lower (Qname)) = "user_defined_protocol")
			 OR (To_String (To_Lower (Qname)) = "earliest_deadline_first_protocol")
			 OR (To_String (To_Lower (Qname)) = "least_laxity_first_protocol")
			 OR (To_String (To_Lower (Qname)) = "least_runtime_laxity_first_protocol")
			 OR (To_String (To_Lower (Qname)) = "rate_monotonic_protocol")
			 OR (To_String (To_Lower (Qname)) = "deadline_monotonic_protocol")
			 OR (To_String (To_Lower (Qname)) = "round_robin_protocol")
			 OR (To_String (To_Lower (Qname)) = "time_sharing_based_on_wait_time_protocol")
			 OR (To_String (To_Lower (Qname)) = "posix_1003_highest_priority_first_protocol")
			 OR (To_String (To_Lower (Qname)) = "d_over_protocol")
			 OR (To_String (To_Lower (Qname)) = "maximum_urgency_first_based_on_laxity_protocol")
			 OR (To_String (To_Lower (Qname)) = "maximum_urgency_first_based_on_deadline_protocol")
			 OR (To_String (To_Lower (Qname)) = "time_sharing_based_on_cpu_usage_protocol")
			 OR (To_String (To_Lower (Qname)) = "no_scheduling_protocol")
			 OR (To_String (To_Lower (Qname)) = "hierarchical_cyclic_protocol")
			 OR (To_String (To_Lower (Qname)) = "hierarchical_round_robin_protocol")
			 OR (To_String (To_Lower (Qname)) = "hierarchical_fixed_priority_protocol")
			 OR (To_String (To_Lower (Qname)) = "hierarchical_offline_protocol")
			 OR (To_String (To_Lower (Qname)) = "fixed_priority_protocol")
			 OR (To_String (To_Lower (Qname)) = "dynamic_priority_protocol")
			 OR (To_String (To_Lower (Qname)) = "generic_object")
			 OR (To_String (To_Lower (Qname)) = "named_object")
			 OR (To_String (To_Lower (Qname)) = "generic_node")
			 OR (To_String (To_Lower (Qname)) = "generic_edge")
			 OR (To_String (To_Lower (Qname)) = "graph")
			 OR (To_String (To_Lower (Qname)) = "execution_unit")
			 OR (To_String (To_Lower (Qname)) = "generic_expression")
			 OR (To_String (To_Lower (Qname)) = "constant_expression")
			 OR (To_String (To_Lower (Qname)) = "variable_expression")
			 OR (To_String (To_Lower (Qname)) = "array_variable_expression")
			 OR (To_String (To_Lower (Qname)) = "binary_expression")
			 OR (To_String (To_Lower (Qname)) = "unary_expression")
			 OR (To_String (To_Lower (Qname)) = "cache_block")
			 OR (To_String (To_Lower (Qname)) = "cache_access_profile")
			 OR (To_String (To_Lower (Qname)) = "generic_cache")
			 OR (To_String (To_Lower (Qname)) = "data_cache")
			 OR (To_String (To_Lower (Qname)) = "instruction_cache")
			 OR (To_String (To_Lower (Qname)) = "data_instruction_cache")
			 OR (To_String (To_Lower (Qname)) = "cache_system")
			 OR (To_String (To_Lower (Qname)) = "generic_resource")
			 OR (To_String (To_Lower (Qname)) = "np_resource")
			 OR (To_String (To_Lower (Qname)) = "pip_resource")
			 OR (To_String (To_Lower (Qname)) = "pcp_resource")
			 OR (To_String (To_Lower (Qname)) = "ppcp_resource")
			 OR (To_String (To_Lower (Qname)) = "ipcp_resource")
			 OR (To_String (To_Lower (Qname)) = "generic_task_group")
			 OR (To_String (To_Lower (Qname)) = "transaction_task_group")
			 OR (To_String (To_Lower (Qname)) = "multiframe_task_group")
			 OR (To_String (To_Lower (Qname)) = "cfg_edge")
			 OR (To_String (To_Lower (Qname)) = "generic_task")
			 OR (To_String (To_Lower (Qname)) = "periodic_task")
			 OR (To_String (To_Lower (Qname)) = "aperiodic_task")
			 OR (To_String (To_Lower (Qname)) = "poisson_task")
			 OR (To_String (To_Lower (Qname)) = "timed_task")
			 OR (To_String (To_Lower (Qname)) = "sporadic_task")
			 OR (To_String (To_Lower (Qname)) = "parametric_task")
			 OR (To_String (To_Lower (Qname)) = "scheduling_task")
			 OR (To_String (To_Lower (Qname)) = "frame_task")
			 OR (To_String (To_Lower (Qname)) = "sporadic_inner_periodic_task")
			 OR (To_String (To_Lower (Qname)) = "periodic_inner_periodic_task")
			 OR (To_String (To_Lower (Qname)) = "battery")
			 OR (To_String (To_Lower (Qname)) = "generic_processor")
			 OR (To_String (To_Lower (Qname)) = "mono_core_processor")
			 OR (To_String (To_Lower (Qname)) = "multi_cores_processor")
			 OR (To_String (To_Lower (Qname)) = "core_unit")
			 OR (To_String (To_Lower (Qname)) = "basic_block")
			 OR (To_String (To_Lower (Qname)) = "generic_message")
			 OR (To_String (To_Lower (Qname)) = "periodic_message")
			 OR (To_String (To_Lower (Qname)) = "aperiodic_message")
			 OR (To_String (To_Lower (Qname)) = "dfg_variable")
			 OR (To_String (To_Lower (Qname)) = "dfg_statement")
			 OR (To_String (To_Lower (Qname)) = "task_release_record")
			 OR (To_String (To_Lower (Qname)) = "buffer")
			 OR (To_String (To_Lower (Qname)) = "generic_network")
			 OR (To_String (To_Lower (Qname)) = "noc_network")
			 OR (To_String (To_Lower (Qname)) = "spacewire_network")
			 OR (To_String (To_Lower (Qname)) = "bus_network")
			 OR (To_String (To_Lower (Qname)) = "generic_memory")
			 OR (To_String (To_Lower (Qname)) = "dram_memory")
			 OR (To_String (To_Lower (Qname)) = "kalray_memory")
			 OR (To_String (To_Lower (Qname)) = "address_space")
			 OR (To_String (To_Lower (Qname)) = "run_server")
			 OR (To_String (To_Lower (Qname)) = "run_server_primal")
			 OR (To_String (To_Lower (Qname)) = "run_server_dual")
			 OR (To_String (To_Lower (Qname)) = "task_node")
			 OR (To_String (To_Lower (Qname)) = "time_triggered_communication_edge")
			 OR (To_String (To_Lower (Qname)) = "resource_edge")
			 OR (To_String (To_Lower (Qname)) = "precedence_edge")
			 OR (To_String (To_Lower (Qname)) = "communication_edge")
			 OR (To_String (To_Lower (Qname)) = "buffer_edge")
			 OR (To_String (To_Lower (Qname)) = "generic_statement")
			 OR (To_String (To_Lower (Qname)) = "nop_statement")
			 OR (To_String (To_Lower (Qname)) = "exit_statement")
			 OR (To_String (To_Lower (Qname)) = "put_statement")
			 OR (To_String (To_Lower (Qname)) = "if_statement")
			 OR (To_String (To_Lower (Qname)) = "assign_statement")
			 OR (To_String (To_Lower (Qname)) = "clock_statement")
			 OR (To_String (To_Lower (Qname)) = "delete_precedence_statement")
			 OR (To_String (To_Lower (Qname)) = "add_precedence_statement")
			 OR (To_String (To_Lower (Qname)) = "for_statement")
			 OR (To_String (To_Lower (Qname)) = "return_statement")
			 OR (To_String (To_Lower (Qname)) = "while_statement")
			 OR (To_String (To_Lower (Qname)) = "random_initialize_statement")
			 OR (To_String (To_Lower (Qname)) = "set_statement")
			 OR (To_String (To_Lower (Qname)) = "subprogram_statement")
			 OR (To_String (To_Lower (Qname)) = "subprogram_call_statement")
			 OR (To_String (To_Lower (Qname)) = "cfg")
			 OR (To_String (To_Lower (Qname)) = "automaton_status")
			 OR (To_String (To_Lower (Qname)) = "transition_status")
			 OR (To_String (To_Lower (Qname)) = "offset_type")
			 OR (To_String (To_Lower (Qname)) = "scheduling_error_record")
			 OR (To_String (To_Lower (Qname)) = "data_access_record")
			 OR (To_String (To_Lower (Qname)) = "critical_section")
			 OR (To_String (To_Lower (Qname)) = "dfg_cfg_type")
			 OR (To_String (To_Lower (Qname)) = "dfg_def_use_association")
			 OR (To_String (To_Lower (Qname)) = "dfg_var_association")
			 OR (To_String (To_Lower (Qname)) = "dfg_def_use_info")
			 OR (To_String (To_Lower (Qname)) = "buffer_size_item")
			 OR (To_String (To_Lower (Qname)) = "density_item")
			 OR (To_String (To_Lower (Qname)) = "deadlock_item")
			 OR (To_String (To_Lower (Qname)) = "priority_inversion_item")
			 OR (To_String (To_Lower (Qname)) = "relative_priority_record")
			 OR (To_String (To_Lower (Qname)) = "ceiling_priority_record")
			 OR (To_String (To_Lower (Qname)) = "buffer_role")
			 OR (To_String (To_Lower (Qname)) = "position")
			 OR (To_String (To_Lower (Qname)) = "memory_record")
			 OR (To_String (To_Lower (Qname)) = "scheduling_result")
			 OR (To_String (To_Lower (Qname)) = "binding_record_type")
			 OR (To_String (To_Lower (Qname)) = "applicability_constraint")
			 OR (To_String (To_Lower (Qname)) = "applicability_constraint_case")
			 OR (To_String (To_Lower (Qname)) = "all_cases_structure")
			 OR (To_String (To_Lower (Qname)) = "scheduling_parameters")
			 OR (To_String (To_Lower (Qname)) = "framework_request")
			 OR (To_String (To_Lower (Qname)) = "framework_response") then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "id" then
					id := To_Unbounded_String (Get_Value (Atts, J));
				end if;
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					ref := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
	end if;
end Start_Element;


procedure Initialize(obj : out PortMappingType_Choice_io) is 
begin 	obj.type_of_PortMappingType_Choice := PortMappingType_Choice_Type'first;

end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out PortMappingType_Choice_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin

	if To_String (To_Lower (Qname)) = "type_of_portmappingtype_choice" then
		To_PortMappingType_Choice_Type (handler.Parameter_List (1), obj.type_of_PortMappingType_Choice, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

end End_Element;

procedure Initialize(obj : out Parameter_io) is 
begin 	obj.type_of_parameter := Parameter_Type'first;

	obj.boolean_value := false;
	obj.integer_value := 0;
	obj.double_value := 0.0;
	obj.string_value := empty_string;
	obj.parameter_name := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Parameter_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin

	if To_String (To_Lower (Qname)) = "type_of_parameter" then
		To_Parameter_Type (handler.Parameter_List (1), obj.type_of_parameter, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;


	if To_String (To_Lower (Qname)) = "boolean_value" then
		To_Boolean (handler.Parameter_List (1), obj.boolean_value, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "integer_value" then
		To_Integer (handler.Parameter_List (1), obj.integer_value, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "double_value" then
		To_Double (handler.Parameter_List (1), obj.double_value, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "string_value" then
		obj.string_value := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "parameter_name" then
		obj.parameter_name := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Time_Unit_Event_io) is 
begin 	obj.type_of_event := Time_Unit_Event_Type'first;

	obj.start_task := empty_string;
	obj.end_task := empty_string;
	obj.write_buffer := empty_string;
	obj.write_task := empty_string;
	obj.write_size := 0;
	obj.write_buffer_current_data_size := 0;
	obj.read_buffer := empty_string;
	obj.read_task := empty_string;
	obj.read_size := 0;
	obj.read_buffer_current_data_size := 0;
	obj.overflow_buffer := empty_string;
	obj.overflow_task := empty_string;
	obj.overflow_write_size := 0;
	obj.overflow_buffer_current_data_size := 0;
	obj.underflow_buffer := empty_string;
	obj.underflow_task := empty_string;
	obj.underflow_read_size := 0;
	obj.underflow_buffer_current_data_size := 0;
	obj.switched_task := empty_string;
	obj.running_core := empty_string;
	obj.running_task := empty_string;
	obj.current_priority := 0;
	obj.CRPD := 0;
	obj.cache_state := empty_string;
	obj.activation_task := empty_string;
	obj.allocate_task := empty_string;
	obj.allocate_resource := empty_string;
	obj.release_task := empty_string;
	obj.release_resource := empty_string;
	obj.wait_for_resource_task := empty_string;
	obj.wait_for_resource := empty_string;
	obj.send_task := empty_string;
	obj.send_message := empty_string;
	obj.receive_task := empty_string;
	obj.receive_message := empty_string;
	obj.wait_for_memory_task := empty_string;
	obj.wait_for_cache := empty_string;
	obj.activation_address_space := empty_string;
	obj.duration := 0;
	obj.preempted_task := empty_string;
	obj.preempting_task := empty_string;
	obj.evicted_ucbs := 0;
	obj.missed_deadline_task := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Time_Unit_Event_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is 
begin
	if Get_Length (Atts) > 0 then

		if To_String (To_Lower (Qname)) = "start_task" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.start_task := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "end_task" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.end_task := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "write_buffer" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.write_buffer := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "write_task" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.write_task := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "read_buffer" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.read_buffer := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "read_task" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.read_task := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "overflow_buffer" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.overflow_buffer := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "overflow_task" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.overflow_task := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "underflow_buffer" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.underflow_buffer := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "underflow_task" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.underflow_task := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "switched_task" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.switched_task := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "running_task" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.running_task := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "activation_task" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.activation_task := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "allocate_task" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.allocate_task := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "allocate_resource" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.allocate_resource := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "release_task" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.release_task := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "release_resource" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.release_resource := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "wait_for_resource_task" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.wait_for_resource_task := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "wait_for_resource" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.wait_for_resource := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "send_task" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.send_task := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "send_message" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.send_message := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "receive_task" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.receive_task := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "receive_message" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.receive_message := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "wait_for_memory_task" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.wait_for_memory_task := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "wait_for_cache" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.wait_for_cache := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "preempted_task" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.preempted_task := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "preempting_task" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.preempting_task := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "missed_deadline_task" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.missed_deadline_task := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Time_Unit_Event_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin

	if To_String (To_Lower (Qname)) = "type_of_event" then
		To_Time_Unit_Event_Type (handler.Parameter_List (1), obj.type_of_event, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;


	if To_String (To_Lower (Qname)) = "write_size" then
		To_Integer (handler.Parameter_List (1), obj.write_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "write_buffer_current_data_size" then
		To_Integer (handler.Parameter_List (1), obj.write_buffer_current_data_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "read_size" then
		To_Integer (handler.Parameter_List (1), obj.read_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "read_buffer_current_data_size" then
		To_Integer (handler.Parameter_List (1), obj.read_buffer_current_data_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "overflow_write_size" then
		To_Integer (handler.Parameter_List (1), obj.overflow_write_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "overflow_buffer_current_data_size" then
		To_Integer (handler.Parameter_List (1), obj.overflow_buffer_current_data_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "underflow_read_size" then
		To_Integer (handler.Parameter_List (1), obj.underflow_read_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "underflow_buffer_current_data_size" then
		To_Integer (handler.Parameter_List (1), obj.underflow_buffer_current_data_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "running_core" then
		obj.running_core := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "current_priority" then
		To_Integer (handler.Parameter_List (1), obj.current_priority, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "crpd" then
		To_Integer (handler.Parameter_List (1), obj.CRPD, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cache_state" then
		obj.cache_state := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "activation_address_space" then
		obj.activation_address_space := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "duration" then
		To_Integer (handler.Parameter_List (1), obj.duration, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "evicted_ucbs" then
		To_Integer (handler.Parameter_List (1), obj.evicted_ucbs, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Dependency_io) is 
begin 	obj.type_of_dependency := Dependency_Type'first;

	obj.precedence_sink := empty_string;
	obj.precedence_source := empty_string;
	obj.buffer_dependent_task := empty_string;
	obj.buffer_orientation := Orientation_Dependency_Type'first;
	obj.buffer_dependency_object := empty_string;
	obj.asynchronous_communication_dependent_task := empty_string;
	obj.asynchronous_communication_orientation := Orientation_Dependency_Type'first;
	obj.asynchronous_communication_dependency_object := empty_string;
	obj.asynchronous_communication_protocol_property := Asynchronous_Communication_Protocol_Property_Type'first;
	obj.time_triggered_communication_sink := empty_string;
	obj.time_triggered_communication_source := empty_string;
	obj.time_triggered_timing_property := Time_Triggered_Communication_Timing_Property_Type'first;
	obj.resource_dependency_resource := empty_string;
	obj.resource_dependency_task := empty_string;
	obj.remote_procedure_call_client := empty_string;
	obj.remote_procedure_call_server := empty_string;
	obj.black_board_dependent_task := empty_string;
	obj.black_board_orientation := Orientation_Dependency_Type'first;
	obj.black_board_dependency_object := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Dependency_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is 
begin
	if Get_Length (Atts) > 0 then

		if To_String (To_Lower (Qname)) = "precedence_sink" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.precedence_sink := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "precedence_source" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.precedence_source := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "buffer_dependent_task" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.buffer_dependent_task := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "buffer_dependency_object" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.buffer_dependency_object := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "asynchronous_communication_dependent_task" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.asynchronous_communication_dependent_task := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "asynchronous_communication_dependency_object" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.asynchronous_communication_dependency_object := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "time_triggered_communication_sink" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.time_triggered_communication_sink := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "time_triggered_communication_source" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.time_triggered_communication_source := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "resource_dependency_resource" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.resource_dependency_resource := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "resource_dependency_task" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.resource_dependency_task := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "remote_procedure_call_client" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.remote_procedure_call_client := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "remote_procedure_call_server" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.remote_procedure_call_server := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "black_board_dependent_task" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.black_board_dependent_task := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;

		if To_String (To_Lower (Qname)) = "black_board_dependency_object" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.black_board_dependency_object := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Dependency_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin

	if To_String (To_Lower (Qname)) = "type_of_dependency" then
		To_Dependency_Type (handler.Parameter_List (1), obj.type_of_dependency, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;


	if To_String (To_Lower (Qname)) = "buffer_orientation" then
		To_Orientation_Dependency_Type (handler.Parameter_List (1), obj.buffer_orientation, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "asynchronous_communication_orientation" then
		To_Orientation_Dependency_Type (handler.Parameter_List (1), obj.asynchronous_communication_orientation, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "asynchronous_communication_protocol_property" then
		To_Asynchronous_Communication_Protocol_Property_Type (handler.Parameter_List (1), obj.asynchronous_communication_protocol_property, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "time_triggered_timing_property" then
		To_Time_Triggered_Communication_Timing_Property_Type (handler.Parameter_List (1), obj.time_triggered_timing_property, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "black_board_orientation" then
		To_Orientation_Dependency_Type (handler.Parameter_List (1), obj.black_board_orientation, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Automaton_Status_io) is 
begin 
	obj.current_state := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Automaton_Status_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is
begin
	if To_String (To_Lower (Qname)) = "automaton_status" then
		initialize(obj);
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Automaton_Status_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin
	null;

end End_Element;

procedure Initialize(obj : out Transition_Status_io) is 
begin 
	obj.code := empty_string;
	obj.status := Status_Type'first;
	obj.wakeup_time := 0;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Transition_Status_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is
begin
	if To_String (To_Lower (Qname)) = "transition_status" then
		initialize(obj);
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Transition_Status_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "status" then
		To_Status_Type (handler.Parameter_List (1), obj.status, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "wakeup_time" then
		To_Integer (handler.Parameter_List (1), obj.wakeup_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Offset_Type_io) is 
begin 
	obj.offset_value := 0;
	obj.activation := 0;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Offset_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is
begin
	if To_String (To_Lower (Qname)) = "offset_type" then
		initialize(obj);
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Offset_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "offset_value" then
		To_Integer (handler.Parameter_List (1), obj.offset_value, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "activation" then
		To_Integer (handler.Parameter_List (1), obj.activation, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Scheduling_Error_Record_io) is 
begin 
	obj.error_type := Error_Type_Type'first;
	obj.time := 0;
	obj.error_action := Error_Action_Type'first;
	obj.user_defined_action := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Scheduling_Error_Record_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is
begin
	if To_String (To_Lower (Qname)) = "scheduling_error_record" then
		initialize(obj);
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Scheduling_Error_Record_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "error_type" then
		To_Error_Type_Type (handler.Parameter_List (1), obj.error_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "time" then
		To_Integer (handler.Parameter_List (1), obj.time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "error_action" then
		To_Error_Action_Type (handler.Parameter_List (1), obj.error_action, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "user_defined_action" then
		obj.user_defined_action := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Data_Access_Record_io) is 
begin 
	obj.Access_Type := Data_Access_Type'first;
	obj.Memory_Address := 0;
	obj.Time_Constraint_Name := empty_string;
	obj.Size := 0;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Data_Access_Record_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is
begin
	if To_String (To_Lower (Qname)) = "data_access_record" then
		initialize(obj);
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Data_Access_Record_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "access_type" then
		To_Data_Access_Type (handler.Parameter_List (1), obj.Access_Type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "memory_address" then
		To_Integer (handler.Parameter_List (1), obj.Memory_Address, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "time_constraint_name" then
		obj.Time_Constraint_Name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "size" then
		To_Integer (handler.Parameter_List (1), obj.Size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Critical_Section_io) is 
begin 
	obj.task_synchronization := Resources_Synchronization_Type'first;
	obj.task_begin := 0;
	obj.task_end := 0;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Critical_Section_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is
begin
	if To_String (To_Lower (Qname)) = "critical_section" then
		initialize(obj);
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Critical_Section_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "task_synchronization" then
		To_Resources_Synchronization_Type (handler.Parameter_List (1), obj.task_synchronization, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "task_begin" then
		To_Integer (handler.Parameter_List (1), obj.task_begin, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "task_end" then
		To_Integer (handler.Parameter_List (1), obj.task_end, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out DFG_Cfg_Type_io) is 
begin 
	obj.Nb_Blocks := 0;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out DFG_Cfg_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is
begin
	if To_String (To_Lower (Qname)) = "dfg_cfg_type" then
		initialize(obj);
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out DFG_Cfg_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "nb_blocks" then
		To_Integer (handler.Parameter_List (1), obj.Nb_Blocks, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out DFG_Def_Use_Association_io) is 
begin 
	obj.Def_Variable := empty_string;
	obj.Def_Statement := empty_string;
	obj.Use_Statement := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out DFG_Def_Use_Association_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is
begin
	if To_String (To_Lower (Qname)) = "dfg_def_use_association" then
		initialize(obj);
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out DFG_Def_Use_Association_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin
	null;

end End_Element;

procedure Initialize(obj : out DFG_Var_Association_io) is 
begin 
	obj.Def_Variable := empty_string;
	obj.Statement := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out DFG_Var_Association_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is
begin
	if To_String (To_Lower (Qname)) = "dfg_var_association" then
		initialize(obj);
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out DFG_Var_Association_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin
	null;

end End_Element;

procedure Initialize(obj : out DFG_Def_Use_Info_io) is 
begin 	null;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out DFG_Def_Use_Info_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is
begin
	if To_String (To_Lower (Qname)) = "dfg_def_use_info" then
		initialize(obj);
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out DFG_Def_Use_Info_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin
	null;

end End_Element;

procedure Initialize(obj : out Buffer_Size_Item_io) is 
begin 
	obj.time := 0;
	obj.size := 0;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Buffer_Size_Item_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is
begin
	if To_String (To_Lower (Qname)) = "buffer_size_item" then
		initialize(obj);
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Buffer_Size_Item_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "time" then
		To_Integer (handler.Parameter_List (1), obj.time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "size" then
		To_Integer (handler.Parameter_List (1), obj.size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Density_Item_io) is 
begin 
	obj.response_time := 0;
	obj.probability := 0.0;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Density_Item_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is
begin
	if To_String (To_Lower (Qname)) = "density_item" then
		initialize(obj);
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Density_Item_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "response_time" then
		To_Integer (handler.Parameter_List (1), obj.response_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "probability" then
		To_Double (handler.Parameter_List (1), obj.probability, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Deadlock_Item_io) is 
begin 
	obj.time := 0;
	obj.task_name := empty_string;
	obj.resource_name := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Deadlock_Item_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is
begin
	if To_String (To_Lower (Qname)) = "deadlock_item" then
		initialize(obj);
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Deadlock_Item_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "time" then
		To_Integer (handler.Parameter_List (1), obj.time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "task_name" then
		obj.task_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "resource_name" then
		obj.resource_name := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Priority_Inversion_Item_io) is 
begin 
	obj.start_time := 0;
	obj.end_time := 0;
	obj.task_name := empty_string;
	obj.resource_name := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Priority_Inversion_Item_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is
begin
	if To_String (To_Lower (Qname)) = "priority_inversion_item" then
		initialize(obj);
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Priority_Inversion_Item_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "start_time" then
		To_Integer (handler.Parameter_List (1), obj.start_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "end_time" then
		To_Integer (handler.Parameter_List (1), obj.end_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "task_name" then
		obj.task_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "resource_name" then
		obj.resource_name := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Relative_Priority_Record_io) is 
begin 
	obj.higher_priority_task := empty_string;
	obj.hpt_index := 0;
	obj.lower_priority_task := empty_string;
	obj.lpt_index := 0;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Relative_Priority_Record_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is
begin
	if To_String (To_Lower (Qname)) = "relative_priority_record" then
		initialize(obj);
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Relative_Priority_Record_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "higher_priority_task" then
		obj.higher_priority_task := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "hpt_index" then
		To_Integer (handler.Parameter_List (1), obj.hpt_index, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "lower_priority_task" then
		obj.lower_priority_task := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "lpt_index" then
		To_Integer (handler.Parameter_List (1), obj.lpt_index, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Ceiling_Priority_Record_io) is 
begin 
	obj.resource_name := empty_string;
	obj.ceiling_priority := 0;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Ceiling_Priority_Record_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is
begin
	if To_String (To_Lower (Qname)) = "ceiling_priority_record" then
		initialize(obj);
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Ceiling_Priority_Record_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "resource_name" then
		obj.resource_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "ceiling_priority" then
		To_Integer (handler.Parameter_List (1), obj.ceiling_priority, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Buffer_Role_io) is 
begin 
	obj.the_role := Buffer_Role_Type'first;
	obj.size := 0;
	obj.time := 0;
	obj.timeout := 0;
	obj.amplitude_function := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Buffer_Role_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is
begin
	if To_String (To_Lower (Qname)) = "buffer_role" then
		initialize(obj);
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Buffer_Role_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "the_role" then
		To_Buffer_Role_Type (handler.Parameter_List (1), obj.the_role, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "size" then
		To_Integer (handler.Parameter_List (1), obj.size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "time" then
		To_Integer (handler.Parameter_List (1), obj.time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "timeout" then
		To_Integer (handler.Parameter_List (1), obj.timeout, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "amplitude_function" then
		obj.amplitude_function := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Position_io) is 
begin 
	obj.X := 0;
	obj.Y := 0;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Position_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is
begin
	if To_String (To_Lower (Qname)) = "position" then
		initialize(obj);
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Position_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "x" then
		To_Integer (handler.Parameter_List (1), obj.X, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "y" then
		To_Integer (handler.Parameter_List (1), obj.Y, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Memory_Record_io) is 
begin 
	obj.size := 0;
	obj.access_latency := 0;
	obj.memory_category := Memory_Type'first;
	obj.shared_access_latency := 0;
	obj.private_access_latency := 0;
	obj.l_rw_inter := 0;
	obj.l_act_inter := 0;
	obj.l_pre_inter := 0;
	obj.n_reorder := 0;
	obj.l_conhit := 0;
	obj.l_conf := 0;
	obj.nb_bank := 0;
	obj.partition_mode := false;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Memory_Record_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is
begin
	if To_String (To_Lower (Qname)) = "memory_record" then
		initialize(obj);
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Memory_Record_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "size" then
		To_Integer (handler.Parameter_List (1), obj.size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "access_latency" then
		To_Integer (handler.Parameter_List (1), obj.access_latency, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "memory_category" then
		To_Memory_Type (handler.Parameter_List (1), obj.memory_category, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "shared_access_latency" then
		To_Integer (handler.Parameter_List (1), obj.shared_access_latency, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "private_access_latency" then
		To_Integer (handler.Parameter_List (1), obj.private_access_latency, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "l_rw_inter" then
		To_Integer (handler.Parameter_List (1), obj.l_rw_inter, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "l_act_inter" then
		To_Integer (handler.Parameter_List (1), obj.l_act_inter, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "l_pre_inter" then
		To_Integer (handler.Parameter_List (1), obj.l_pre_inter, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "n_reorder" then
		To_Integer (handler.Parameter_List (1), obj.n_reorder, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "l_conhit" then
		To_Integer (handler.Parameter_List (1), obj.l_conhit, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "l_conf" then
		To_Integer (handler.Parameter_List (1), obj.l_conf, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "nb_bank" then
		To_Integer (handler.Parameter_List (1), obj.nb_bank, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "partition_mode" then
		To_Boolean (handler.Parameter_List (1), obj.partition_mode, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Scheduling_Result_io) is 
begin 
	obj.scheduling_msg := empty_string;
	obj.has_error := false;
	obj.error_msg := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Scheduling_Result_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is
begin
	if To_String (To_Lower (Qname)) = "scheduling_result" then
		initialize(obj);
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Scheduling_Result_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "scheduling_msg" then
		obj.scheduling_msg := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "has_error" then
		To_Boolean (handler.Parameter_List (1), obj.has_error, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "error_msg" then
		obj.error_msg := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Binding_Record_Type_io) is 
begin 
	obj.cpu_name := empty_string;
	obj.address_space_name := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Binding_Record_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is
begin
	if To_String (To_Lower (Qname)) = "binding_record_type" then
		initialize(obj);
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Binding_Record_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cpu_name" then
		obj.cpu_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "address_space_name" then
		obj.address_space_name := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Applicability_Constraint_io) is 
begin 
	obj.Name := empty_string;
	obj.Result := false;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Applicability_Constraint_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is
begin
	if To_String (To_Lower (Qname)) = "applicability_constraint" then
		initialize(obj);
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Applicability_Constraint_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "name" then
		obj.Name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "result" then
		To_Boolean (handler.Parameter_List (1), obj.Result, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Applicability_Constraint_Case_io) is 
begin 
	obj.Name := empty_string;
	obj.Feasibility_Test_Names := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Applicability_Constraint_Case_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is
begin
	if To_String (To_Lower (Qname)) = "applicability_constraint_case" then
		initialize(obj);
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Applicability_Constraint_Case_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "name" then
		obj.Name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "feasibility_test_names" then
		obj.Feasibility_Test_Names := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out All_Cases_Structure_io) is 
begin 	null;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out All_Cases_Structure_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is
begin
	if To_String (To_Lower (Qname)) = "all_cases_structure" then
		initialize(obj);
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out All_Cases_Structure_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin
	null;

end End_Element;

procedure Initialize(obj : out Scheduling_Parameters_io) is 
begin 
	obj.scheduler_type := Schedulers_Type'first;
	obj.quantum := 0;
	obj.preemptive_type := Preemptives_Type'first;
	obj.automaton_name := empty_string;
	obj.capacity := 0;
	obj.period := 0;
	obj.threshold := 0;
	obj.priority := 0;
	obj.user_defined_scheduler_source := empty_string;
	obj.user_defined_scheduler_source_file_name := empty_string;
	obj.user_defined_scheduler_protocol_name := empty_string;
	obj.start_time := 0;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Scheduling_Parameters_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is
begin
	if To_String (To_Lower (Qname)) = "scheduling_parameters" then
		initialize(obj);
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Scheduling_Parameters_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "scheduler_type" then
		To_Schedulers_Type (handler.Parameter_List (1), obj.scheduler_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "quantum" then
		To_Integer (handler.Parameter_List (1), obj.quantum, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "preemptive_type" then
		To_Preemptives_Type (handler.Parameter_List (1), obj.preemptive_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "automaton_name" then
		obj.automaton_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "capacity" then
		To_Integer (handler.Parameter_List (1), obj.capacity, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "period" then
		To_Integer (handler.Parameter_List (1), obj.period, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "threshold" then
		To_Integer (handler.Parameter_List (1), obj.threshold, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "priority" then
		To_Integer (handler.Parameter_List (1), obj.priority, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "user_defined_scheduler_source" then
		obj.user_defined_scheduler_source := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "user_defined_scheduler_source_file_name" then
		obj.user_defined_scheduler_source_file_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "user_defined_scheduler_protocol_name" then
		obj.user_defined_scheduler_protocol_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "start_time" then
		To_Integer (handler.Parameter_List (1), obj.start_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Framework_Request_io) is 
begin 
	obj.statement := Framework_Statement_Type'first;
	obj.target := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Framework_Request_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is
begin
	if To_String (To_Lower (Qname)) = "framework_request" then
		initialize(obj);
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Framework_Request_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "statement" then
		To_Framework_Statement_Type (handler.Parameter_List (1), obj.statement, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "target" then
		obj.target := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Framework_Response_io) is 
begin 
	obj.title := empty_string;
	obj.text := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Framework_Response_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is
begin
	if To_String (To_Lower (Qname)) = "framework_response" then
		initialize(obj);
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Framework_Response_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "title" then
		obj.title := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "text" then
		obj.text := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Generic_Section_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.section_type := Sections_Type'first;
	obj.file_name := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Generic_Section_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "section_type" then
		To_Sections_Type (handler.Parameter_List (1), obj.section_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "file_name" then
		obj.file_name := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Computation_Section_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.section_type := Sections_Type'first;
	obj.file_name := empty_string;
	obj.first_statement := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Computation_Section_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is 
begin
	if Get_Length (Atts) > 0 then
		if To_String (To_Lower (Qname)) = "first_statement" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.first_statement := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Computation_Section_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "section_type" then
		To_Sections_Type (handler.Parameter_List (1), obj.section_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "file_name" then
		obj.file_name := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Synchronization_Section_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.section_type := Sections_Type'first;
	obj.file_name := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Synchronization_Section_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "section_type" then
		To_Sections_Type (handler.Parameter_List (1), obj.section_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "file_name" then
		obj.file_name := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out CFG_Node_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.graph_type := CFG_Graph_Type'first;
	obj.node_type := CFG_Node_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out CFG_Node_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "graph_type" then
		To_CFG_Graph_Type (handler.Parameter_List (1), obj.graph_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "node_type" then
		To_CFG_Node_Type (handler.Parameter_List (1), obj.node_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out State_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.is_initial := false;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out State_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "is_initial" then
		To_Boolean (handler.Parameter_List (1), obj.is_initial, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Synchronization_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.synchronization_type := Synchronizations_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Synchronization_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "synchronization_type" then
		To_Synchronizations_Type (handler.Parameter_List (1), obj.synchronization_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Transition_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.from_state := empty_string;
	obj.to_state := empty_string;
	obj.guards := empty_string;
	obj.clocks := empty_string;
	obj.synchronization := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Transition_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is 
begin
	if Get_Length (Atts) > 0 then
		if To_String (To_Lower (Qname)) = "from_state" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.from_state := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
		if To_String (To_Lower (Qname)) = "to_state" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.to_state := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
		if To_String (To_Lower (Qname)) = "guards" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.guards := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
		if To_String (To_Lower (Qname)) = "clocks" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.clocks := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
		if To_String (To_Lower (Qname)) = "synchronization" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.synchronization := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Transition_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Event_Analyzer_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.event_analyzer_source_file_name := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Event_Analyzer_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "event_analyzer_source_file_name" then
		obj.event_analyzer_source_file_name := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out ARINC_653_Object_io) is 
begin 
	obj.cheddar_private_id := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out ARINC_653_Object_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Error_ID_Type_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.ErrorIdentifier := empty_string;
	obj.Description := empty_string;
	obj.PartitionAction := PartitionActionType'first;
	obj.ModuleAction := ModuleActionType'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Error_ID_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "erroridentifier" then
		obj.ErrorIdentifier := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "description" then
		obj.Description := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "partitionaction" then
		To_PartitionActionType (handler.Parameter_List (1), obj.PartitionAction, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "moduleaction" then
		To_ModuleActionType (handler.Parameter_List (1), obj.ModuleAction, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Error_ID_Action_Type_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.ErrorIdentifier := empty_string;
	obj.Description := empty_string;
	obj.PartitionAction := PartitionActionType'first;
	obj.ModuleAction := ModuleActionType'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Error_ID_Action_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "erroridentifier" then
		obj.ErrorIdentifier := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "description" then
		obj.Description := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "partitionaction" then
		To_PartitionActionType (handler.Parameter_List (1), obj.PartitionAction, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "moduleaction" then
		To_ModuleActionType (handler.Parameter_List (1), obj.ModuleAction, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Error_ID_Level_Type_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.ErrorIdentifier := empty_string;
	obj.Description := empty_string;
	obj.PartitionAction := PartitionActionType'first;
	obj.ModuleAction := ModuleActionType'first;
	obj.ErrorLevel := ErrorLevelType'first;
	obj.ErrorCode := ErrorCodeType'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Error_ID_Level_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "erroridentifier" then
		obj.ErrorIdentifier := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "description" then
		obj.Description := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "partitionaction" then
		To_PartitionActionType (handler.Parameter_List (1), obj.PartitionAction, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "moduleaction" then
		To_ModuleActionType (handler.Parameter_List (1), obj.ModuleAction, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "errorlevel" then
		To_ErrorLevelType (handler.Parameter_List (1), obj.ErrorLevel, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "errorcode" then
		To_ErrorCodeType (handler.Parameter_List (1), obj.ErrorCode, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out System_State_Entry_Type_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.SystemState := empty_string;
	obj.Description := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out System_State_Entry_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "systemstate" then
		obj.SystemState := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "description" then
		obj.Description := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out SysHM_Ext_Type_io) is 
begin 
	obj.cheddar_private_id := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out SysHM_Ext_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out System_HM_TableType_io) is 
begin 
	obj.cheddar_private_id := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out System_HM_TableType_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Mod_HM_Ext_Type_io) is 
begin 
	obj.cheddar_private_id := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Mod_HM_Ext_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Module_HM_Type_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.ModuleCallback := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Module_HM_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "modulecallback" then
		obj.ModuleCallback := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out PortExt_Type_io) is 
begin 
	obj.cheddar_private_id := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out PortExt_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out PortType_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.Name := empty_string;
	obj.MaxMessageSize := empty_string;
	obj.Direction := DirectionType'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out PortType_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.Name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "maxmessagesize" then
		obj.MaxMessageSize := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "direction" then
		To_DirectionType (handler.Parameter_List (1), obj.Direction, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out SamplingPortType_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.Name := empty_string;
	obj.MaxMessageSize := empty_string;
	obj.Direction := DirectionType'first;
	obj.RefreshRateSeconds := 0.0;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out SamplingPortType_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.Name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "maxmessagesize" then
		obj.MaxMessageSize := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "direction" then
		To_DirectionType (handler.Parameter_List (1), obj.Direction, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "refreshrateseconds" then
		To_Double (handler.Parameter_List (1), obj.RefreshRateSeconds, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out ProcExt_Type_io) is 
begin 
	obj.cheddar_private_id := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out ProcExt_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out ProcessType_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.Name := empty_string;
	obj.StackSize := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out ProcessType_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.Name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "stacksize" then
		obj.StackSize := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out QueuingPortType_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.Name := empty_string;
	obj.MaxMessageSize := empty_string;
	obj.Direction := DirectionType'first;
	obj.MaxNbMessages := 0;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out QueuingPortType_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.Name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "maxmessagesize" then
		obj.MaxMessageSize := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "direction" then
		To_DirectionType (handler.Parameter_List (1), obj.Direction, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "maxnbmessages" then
		To_Integer (handler.Parameter_List (1), obj.MaxNbMessages, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out PartitionExt_Type_io) is 
begin 
	obj.cheddar_private_id := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out PartitionExt_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out PartitionType_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.PartitionIdentifier := empty_string;
	obj.PartitionName := empty_string;
	obj.Criticality := CriticalityType'first;
	obj.SystemPartition := false;
	obj.EntryPoint := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out PartitionType_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "partitionidentifier" then
		obj.PartitionIdentifier := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "partitionname" then
		obj.PartitionName := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "criticality" then
		To_CriticalityType (handler.Parameter_List (1), obj.Criticality, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "systempartition" then
		To_Boolean (handler.Parameter_List (1), obj.SystemPartition, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "entrypoint" then
		obj.EntryPoint := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Memory_Requirements_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.regionName := empty_string;
	obj.memory_type := empty_string;
	obj.sizeBytes := empty_string;
	obj.physicalAddress := empty_string;
	obj.memoryAccess := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Memory_Requirements_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "regionname" then
		obj.regionName := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "memory_type" then
		obj.memory_type := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "sizebytes" then
		obj.sizeBytes := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "physicaladdress" then
		obj.physicalAddress := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "memoryaccess" then
		obj.memoryAccess := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Memory_Ext_Type_io) is 
begin 
	obj.cheddar_private_id := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Memory_Ext_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Partition_Memory_Element_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.PartitionIdentifier := empty_string;
	obj.PartitionName := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Partition_Memory_Element_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "partitionidentifier" then
		obj.PartitionIdentifier := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "partitionname" then
		obj.PartitionName := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Partition_Sched_Ext_Type_io) is 
begin 
	obj.cheddar_private_id := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Partition_Sched_Ext_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Window_Schedule_Element_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.WindowIdentifier := empty_string;
	obj.WindowStartSeconds := 0.0;
	obj.WindowDurationSeconds := 0.0;
	obj.PartitionPeriodStart := false;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Window_Schedule_Element_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "windowidentifier" then
		obj.WindowIdentifier := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "windowstartseconds" then
		To_Double (handler.Parameter_List (1), obj.WindowStartSeconds, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "windowdurationseconds" then
		To_Double (handler.Parameter_List (1), obj.WindowDurationSeconds, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "partitionperiodstart" then
		To_Boolean (handler.Parameter_List (1), obj.PartitionPeriodStart, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Window_Sched_Ext_Type_io) is 
begin 
	obj.cheddar_private_id := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Window_Sched_Ext_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Partition_Schedule_Element_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.PartitionIdentifier := empty_string;
	obj.PartitionName := empty_string;
	obj.PeriodSeconds := 0.0;
	obj.PeriodDurationSeconds := 0.0;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Partition_Schedule_Element_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "partitionidentifier" then
		obj.PartitionIdentifier := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "partitionname" then
		obj.PartitionName := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "periodseconds" then
		To_Double (handler.Parameter_List (1), obj.PeriodSeconds, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "perioddurationseconds" then
		To_Double (handler.Parameter_List (1), obj.PeriodDurationSeconds, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Module_Schedule_Type_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.MajorFrameSeconds := 0.0;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Module_Schedule_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "majorframeseconds" then
		To_Double (handler.Parameter_List (1), obj.MajorFrameSeconds, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Part_HM_Ext_Type_io) is 
begin 
	obj.cheddar_private_id := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Part_HM_Ext_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Partition_HM_Type_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.PartitionIdentifier := empty_string;
	obj.PartitionName := empty_string;
	obj.PartitionCallback := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Partition_HM_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "partitionidentifier" then
		obj.PartitionIdentifier := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "partitionname" then
		obj.PartitionName := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "partitioncallback" then
		obj.PartitionCallback := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Pseudo_Partition_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.Name := empty_string;
	obj.PhysicalAddress := empty_string;
	obj.partition_procedure := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Pseudo_Partition_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.Name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "physicaladdress" then
		obj.PhysicalAddress := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "partition_procedure" then
		obj.partition_procedure := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Standard_Partition_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.PartitionIdentifier := empty_string;
	obj.PartitionName := empty_string;
	obj.PortName := empty_string;
	obj.PhysicalAddress := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Standard_Partition_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "partitionidentifier" then
		obj.PartitionIdentifier := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "partitionname" then
		obj.PartitionName := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "portname" then
		obj.PortName := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "physicaladdress" then
		obj.PhysicalAddress := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out PortMap_Ext_Type_io) is 
begin 
	obj.cheddar_private_id := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out PortMap_Ext_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out PortMappingType_io) is 
begin 
	obj.cheddar_private_id := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out PortMappingType_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Channel_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.ChannelIdentifier := empty_string;
	obj.ChannelName := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Channel_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "channelidentifier" then
		obj.ChannelIdentifier := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "channelname" then
		obj.ChannelName := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out ModExt_Type_io) is 
begin 
	obj.cheddar_private_id := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out ModExt_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out ARINC_653_Module_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.ModuleName := empty_string;
	obj.ModuleVersion := empty_string;
	obj.ModuleId := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out ARINC_653_Module_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "modulename" then
		obj.ModuleName := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "moduleversion" then
		obj.ModuleVersion := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "moduleid" then
		obj.ModuleId := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Scheduling_Error_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.error_type := Error_Type_Type'first;
	obj.time := 0;
	obj.error_action := Error_Action_Type'first;
	obj.user_defined_action := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Scheduling_Error_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "error_type" then
		To_Error_Type_Type (handler.Parameter_List (1), obj.error_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "time" then
		To_Integer (handler.Parameter_List (1), obj.time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "error_action" then
		To_Error_Action_Type (handler.Parameter_List (1), obj.error_action, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "user_defined_action" then
		obj.user_defined_action := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Data_Access_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.Access_Type := Data_Access_Type'first;
	obj.Memory_Address := 0;
	obj.Time_Constraint_Name := empty_string;
	obj.Size := 0;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Data_Access_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "access_type" then
		To_Data_Access_Type (handler.Parameter_List (1), obj.Access_Type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "memory_address" then
		To_Integer (handler.Parameter_List (1), obj.Memory_Address, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "time_constraint_name" then
		obj.Time_Constraint_Name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "size" then
		To_Integer (handler.Parameter_List (1), obj.Size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Generic_Scheduler_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Generic_Scheduler_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Aperiodic_Task_Server_Protocol_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Aperiodic_Task_Server_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Polling_Server_Protocol_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Polling_Server_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Deferred_Server_Protocol_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Deferred_Server_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Sporadic_Server_Protocol_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Sporadic_Server_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Hierarchical_Protocol_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Hierarchical_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Compiled_User_Defined_Protocol_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Compiled_User_Defined_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Automata_User_Defined_Protocol_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Automata_User_Defined_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Pipeline_User_Defined_Protocol_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Pipeline_User_Defined_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out User_Defined_Protocol_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out User_Defined_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Earliest_Deadline_First_Protocol_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Earliest_Deadline_First_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Least_Laxity_First_Protocol_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Least_Laxity_First_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Least_Runtime_Laxity_First_Protocol_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Least_Runtime_Laxity_First_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Rate_Monotonic_Protocol_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Rate_Monotonic_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Deadline_Monotonic_Protocol_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Deadline_Monotonic_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Round_Robin_Protocol_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Round_Robin_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Time_Sharing_Based_On_Wait_Time_Protocol_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Time_Sharing_Based_On_Wait_Time_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Posix_1003_Highest_Priority_First_Protocol_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Posix_1003_Highest_Priority_First_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out D_Over_Protocol_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out D_Over_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Maximum_Urgency_First_Based_On_Laxity_Protocol_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Maximum_Urgency_First_Based_On_Laxity_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Maximum_Urgency_First_Based_On_Deadline_Protocol_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Maximum_Urgency_First_Based_On_Deadline_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Time_Sharing_Based_On_Cpu_Usage_Protocol_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Time_Sharing_Based_On_Cpu_Usage_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out No_Scheduling_Protocol_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out No_Scheduling_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Hierarchical_Cyclic_Protocol_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Hierarchical_Cyclic_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Hierarchical_Round_Robin_Protocol_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Hierarchical_Round_Robin_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Hierarchical_Fixed_Priority_Protocol_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Hierarchical_Fixed_Priority_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Hierarchical_Offline_Protocol_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Hierarchical_Offline_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Fixed_Priority_Protocol_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Fixed_Priority_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Dynamic_Priority_Protocol_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Dynamic_Priority_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Generic_Object_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Generic_Object_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Named_Object_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Named_Object_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Generic_Node_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.Id := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Generic_Node_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "id" then
		obj.Id := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Generic_Edge_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.Id := empty_string;
	obj.Node_1 := empty_string;
	obj.Node_2 := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Generic_Edge_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "id" then
		obj.Id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "node_1" then
		obj.Node_1 := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "node_2" then
		obj.Node_2 := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Graph_io) is 
begin 
	obj.cheddar_private_id := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Graph_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Execution_Unit_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.Type_eu := Execution_Unit_Type'first;
	obj.values_eu := 0;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Execution_Unit_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "type_eu" then
		To_Execution_Unit_Type (handler.Parameter_List (1), obj.Type_eu, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "values_eu" then
		To_Integer (handler.Parameter_List (1), obj.values_eu, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Generic_Expression_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.expression_type := Expressions_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Generic_Expression_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "expression_type" then
		To_Expressions_Type (handler.Parameter_List (1), obj.expression_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Constant_Expression_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.expression_type := Expressions_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Constant_Expression_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "expression_type" then
		To_Expressions_Type (handler.Parameter_List (1), obj.expression_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Variable_Expression_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.expression_type := Expressions_Type'first;
	obj.identifier := empty_string;
	obj.variable_type := Simulation_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Variable_Expression_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "expression_type" then
		To_Expressions_Type (handler.Parameter_List (1), obj.expression_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "identifier" then
		obj.identifier := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "variable_type" then
		To_Simulation_Type (handler.Parameter_List (1), obj.variable_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Array_Variable_Expression_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.expression_type := Expressions_Type'first;
	obj.identifier := empty_string;
	obj.variable_type := Simulation_Type'first;
	obj.array_index := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Array_Variable_Expression_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is 
begin
	if Get_Length (Atts) > 0 then
		if To_String (To_Lower (Qname)) = "array_index" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.array_index := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Array_Variable_Expression_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "expression_type" then
		To_Expressions_Type (handler.Parameter_List (1), obj.expression_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "identifier" then
		obj.identifier := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "variable_type" then
		To_Simulation_Type (handler.Parameter_List (1), obj.variable_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Binary_Expression_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.expression_type := Expressions_Type'first;
	obj.identifier := empty_string;
	obj.variable_type := Simulation_Type'first;
	obj.rvalue := empty_string;
	obj.lvalue := empty_string;
	obj.operator := Operator_Type'first;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Binary_Expression_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is 
begin
	if Get_Length (Atts) > 0 then
		if To_String (To_Lower (Qname)) = "rvalue" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.rvalue := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
		if To_String (To_Lower (Qname)) = "lvalue" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.lvalue := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Binary_Expression_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "expression_type" then
		To_Expressions_Type (handler.Parameter_List (1), obj.expression_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "identifier" then
		obj.identifier := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "variable_type" then
		To_Simulation_Type (handler.Parameter_List (1), obj.variable_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "operator" then
		To_Operator_Type (handler.Parameter_List (1), obj.operator, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Unary_Expression_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.expression_type := Expressions_Type'first;
	obj.identifier := empty_string;
	obj.variable_type := Simulation_Type'first;
	obj.operator := Operator_Type'first;
	obj.VALUE := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Unary_Expression_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is 
begin
	if Get_Length (Atts) > 0 then
		if To_String (To_Lower (Qname)) = "value" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.VALUE := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Unary_Expression_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "expression_type" then
		To_Expressions_Type (handler.Parameter_List (1), obj.expression_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "identifier" then
		obj.identifier := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "variable_type" then
		To_Simulation_Type (handler.Parameter_List (1), obj.variable_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "operator" then
		To_Operator_Type (handler.Parameter_List (1), obj.operator, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Cache_Block_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.cache_block_number := 0;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Cache_Block_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "cache_block_number" then
		To_Integer (handler.Parameter_List (1), obj.cache_block_number, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Cache_Access_Profile_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Cache_Access_Profile_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Generic_Cache_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.cache_size := 0;
	obj.line_size := 0;
	obj.associativity := 0;
	obj.block_reload_time := 0;
	obj.replacement_policy := Cache_Replacement_Policy_Type'first;
	obj.coherence_protocol := Cache_Coherence_Protocol_Type'first;
	obj.cache_category := Cache_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Generic_Cache_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "cache_size" then
		To_Integer (handler.Parameter_List (1), obj.cache_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "line_size" then
		To_Integer (handler.Parameter_List (1), obj.line_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "associativity" then
		To_Integer (handler.Parameter_List (1), obj.associativity, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "block_reload_time" then
		To_Integer (handler.Parameter_List (1), obj.block_reload_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "replacement_policy" then
		To_Cache_Replacement_Policy_Type (handler.Parameter_List (1), obj.replacement_policy, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "coherence_protocol" then
		To_Cache_Coherence_Protocol_Type (handler.Parameter_List (1), obj.coherence_protocol, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cache_category" then
		To_Cache_Type (handler.Parameter_List (1), obj.cache_category, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Data_Cache_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.cache_size := 0;
	obj.line_size := 0;
	obj.associativity := 0;
	obj.block_reload_time := 0;
	obj.replacement_policy := Cache_Replacement_Policy_Type'first;
	obj.coherence_protocol := Cache_Coherence_Protocol_Type'first;
	obj.cache_category := Cache_Type'first;
	obj.write_policy := Write_Policy_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Data_Cache_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "cache_size" then
		To_Integer (handler.Parameter_List (1), obj.cache_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "line_size" then
		To_Integer (handler.Parameter_List (1), obj.line_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "associativity" then
		To_Integer (handler.Parameter_List (1), obj.associativity, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "block_reload_time" then
		To_Integer (handler.Parameter_List (1), obj.block_reload_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "replacement_policy" then
		To_Cache_Replacement_Policy_Type (handler.Parameter_List (1), obj.replacement_policy, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "coherence_protocol" then
		To_Cache_Coherence_Protocol_Type (handler.Parameter_List (1), obj.coherence_protocol, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cache_category" then
		To_Cache_Type (handler.Parameter_List (1), obj.cache_category, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "write_policy" then
		To_Write_Policy_Type (handler.Parameter_List (1), obj.write_policy, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Instruction_Cache_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.cache_size := 0;
	obj.line_size := 0;
	obj.associativity := 0;
	obj.block_reload_time := 0;
	obj.replacement_policy := Cache_Replacement_Policy_Type'first;
	obj.coherence_protocol := Cache_Coherence_Protocol_Type'first;
	obj.cache_category := Cache_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Instruction_Cache_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "cache_size" then
		To_Integer (handler.Parameter_List (1), obj.cache_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "line_size" then
		To_Integer (handler.Parameter_List (1), obj.line_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "associativity" then
		To_Integer (handler.Parameter_List (1), obj.associativity, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "block_reload_time" then
		To_Integer (handler.Parameter_List (1), obj.block_reload_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "replacement_policy" then
		To_Cache_Replacement_Policy_Type (handler.Parameter_List (1), obj.replacement_policy, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "coherence_protocol" then
		To_Cache_Coherence_Protocol_Type (handler.Parameter_List (1), obj.coherence_protocol, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cache_category" then
		To_Cache_Type (handler.Parameter_List (1), obj.cache_category, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Data_Instruction_Cache_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.cache_size := 0;
	obj.line_size := 0;
	obj.associativity := 0;
	obj.block_reload_time := 0;
	obj.replacement_policy := Cache_Replacement_Policy_Type'first;
	obj.coherence_protocol := Cache_Coherence_Protocol_Type'first;
	obj.cache_category := Cache_Type'first;
	obj.write_policy := Write_Policy_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Data_Instruction_Cache_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "cache_size" then
		To_Integer (handler.Parameter_List (1), obj.cache_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "line_size" then
		To_Integer (handler.Parameter_List (1), obj.line_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "associativity" then
		To_Integer (handler.Parameter_List (1), obj.associativity, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "block_reload_time" then
		To_Integer (handler.Parameter_List (1), obj.block_reload_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "replacement_policy" then
		To_Cache_Replacement_Policy_Type (handler.Parameter_List (1), obj.replacement_policy, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "coherence_protocol" then
		To_Cache_Coherence_Protocol_Type (handler.Parameter_List (1), obj.coherence_protocol, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cache_category" then
		To_Cache_Type (handler.Parameter_List (1), obj.cache_category, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "write_policy" then
		To_Write_Policy_Type (handler.Parameter_List (1), obj.write_policy, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Cache_System_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Cache_System_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Generic_Resource_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.state := 0;
	obj.size := 0;
	obj.address := 0;
	obj.protocol := Resources_Type'first;
	obj.cpu_name := empty_string;
	obj.address_space_name := empty_string;
	obj.priority := 0;
	obj.priority_assignment := Priority_Assignment_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Generic_Resource_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "state" then
		To_Integer (handler.Parameter_List (1), obj.state, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "size" then
		To_Integer (handler.Parameter_List (1), obj.size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "address" then
		To_Integer (handler.Parameter_List (1), obj.address, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "protocol" then
		To_Resources_Type (handler.Parameter_List (1), obj.protocol, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cpu_name" then
		obj.cpu_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "address_space_name" then
		obj.address_space_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "priority" then
		To_Integer (handler.Parameter_List (1), obj.priority, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "priority_assignment" then
		To_Priority_Assignment_Type (handler.Parameter_List (1), obj.priority_assignment, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Np_Resource_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.state := 0;
	obj.size := 0;
	obj.address := 0;
	obj.protocol := Resources_Type'first;
	obj.cpu_name := empty_string;
	obj.address_space_name := empty_string;
	obj.priority := 0;
	obj.priority_assignment := Priority_Assignment_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Np_Resource_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "state" then
		To_Integer (handler.Parameter_List (1), obj.state, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "size" then
		To_Integer (handler.Parameter_List (1), obj.size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "address" then
		To_Integer (handler.Parameter_List (1), obj.address, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "protocol" then
		To_Resources_Type (handler.Parameter_List (1), obj.protocol, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cpu_name" then
		obj.cpu_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "address_space_name" then
		obj.address_space_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "priority" then
		To_Integer (handler.Parameter_List (1), obj.priority, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "priority_assignment" then
		To_Priority_Assignment_Type (handler.Parameter_List (1), obj.priority_assignment, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Pip_Resource_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.state := 0;
	obj.size := 0;
	obj.address := 0;
	obj.protocol := Resources_Type'first;
	obj.cpu_name := empty_string;
	obj.address_space_name := empty_string;
	obj.priority := 0;
	obj.priority_assignment := Priority_Assignment_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Pip_Resource_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "state" then
		To_Integer (handler.Parameter_List (1), obj.state, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "size" then
		To_Integer (handler.Parameter_List (1), obj.size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "address" then
		To_Integer (handler.Parameter_List (1), obj.address, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "protocol" then
		To_Resources_Type (handler.Parameter_List (1), obj.protocol, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cpu_name" then
		obj.cpu_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "address_space_name" then
		obj.address_space_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "priority" then
		To_Integer (handler.Parameter_List (1), obj.priority, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "priority_assignment" then
		To_Priority_Assignment_Type (handler.Parameter_List (1), obj.priority_assignment, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Pcp_Resource_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.state := 0;
	obj.size := 0;
	obj.address := 0;
	obj.protocol := Resources_Type'first;
	obj.cpu_name := empty_string;
	obj.address_space_name := empty_string;
	obj.priority := 0;
	obj.priority_assignment := Priority_Assignment_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Pcp_Resource_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "state" then
		To_Integer (handler.Parameter_List (1), obj.state, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "size" then
		To_Integer (handler.Parameter_List (1), obj.size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "address" then
		To_Integer (handler.Parameter_List (1), obj.address, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "protocol" then
		To_Resources_Type (handler.Parameter_List (1), obj.protocol, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cpu_name" then
		obj.cpu_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "address_space_name" then
		obj.address_space_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "priority" then
		To_Integer (handler.Parameter_List (1), obj.priority, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "priority_assignment" then
		To_Priority_Assignment_Type (handler.Parameter_List (1), obj.priority_assignment, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out PPcp_Resource_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.state := 0;
	obj.size := 0;
	obj.address := 0;
	obj.protocol := Resources_Type'first;
	obj.cpu_name := empty_string;
	obj.address_space_name := empty_string;
	obj.priority := 0;
	obj.priority_assignment := Priority_Assignment_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out PPcp_Resource_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "state" then
		To_Integer (handler.Parameter_List (1), obj.state, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "size" then
		To_Integer (handler.Parameter_List (1), obj.size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "address" then
		To_Integer (handler.Parameter_List (1), obj.address, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "protocol" then
		To_Resources_Type (handler.Parameter_List (1), obj.protocol, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cpu_name" then
		obj.cpu_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "address_space_name" then
		obj.address_space_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "priority" then
		To_Integer (handler.Parameter_List (1), obj.priority, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "priority_assignment" then
		To_Priority_Assignment_Type (handler.Parameter_List (1), obj.priority_assignment, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out IPcp_Resource_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.state := 0;
	obj.size := 0;
	obj.address := 0;
	obj.protocol := Resources_Type'first;
	obj.cpu_name := empty_string;
	obj.address_space_name := empty_string;
	obj.priority := 0;
	obj.priority_assignment := Priority_Assignment_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out IPcp_Resource_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "state" then
		To_Integer (handler.Parameter_List (1), obj.state, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "size" then
		To_Integer (handler.Parameter_List (1), obj.size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "address" then
		To_Integer (handler.Parameter_List (1), obj.address, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "protocol" then
		To_Resources_Type (handler.Parameter_List (1), obj.protocol, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cpu_name" then
		obj.cpu_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "address_space_name" then
		obj.address_space_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "priority" then
		To_Integer (handler.Parameter_List (1), obj.priority, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "priority_assignment" then
		To_Priority_Assignment_Type (handler.Parameter_List (1), obj.priority_assignment, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Generic_Task_Group_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.task_group_type := Task_Groups_Type'first;
	obj.deadline := 0;
	obj.start_time := 0;
	obj.priority := 0;
	obj.criticality := 0;
	obj.period := 0;
	obj.jitter := 0;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Generic_Task_Group_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "task_group_type" then
		To_Task_Groups_Type (handler.Parameter_List (1), obj.task_group_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "deadline" then
		To_Integer (handler.Parameter_List (1), obj.deadline, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "start_time" then
		To_Integer (handler.Parameter_List (1), obj.start_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "priority" then
		To_Integer (handler.Parameter_List (1), obj.priority, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "criticality" then
		To_Integer (handler.Parameter_List (1), obj.criticality, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "period" then
		To_Integer (handler.Parameter_List (1), obj.period, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "jitter" then
		To_Integer (handler.Parameter_List (1), obj.jitter, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Transaction_Task_Group_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.task_group_type := Task_Groups_Type'first;
	obj.deadline := 0;
	obj.start_time := 0;
	obj.priority := 0;
	obj.criticality := 0;
	obj.period := 0;
	obj.jitter := 0;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Transaction_Task_Group_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "task_group_type" then
		To_Task_Groups_Type (handler.Parameter_List (1), obj.task_group_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "deadline" then
		To_Integer (handler.Parameter_List (1), obj.deadline, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "start_time" then
		To_Integer (handler.Parameter_List (1), obj.start_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "priority" then
		To_Integer (handler.Parameter_List (1), obj.priority, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "criticality" then
		To_Integer (handler.Parameter_List (1), obj.criticality, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "period" then
		To_Integer (handler.Parameter_List (1), obj.period, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "jitter" then
		To_Integer (handler.Parameter_List (1), obj.jitter, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Multiframe_Task_Group_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.task_group_type := Task_Groups_Type'first;
	obj.deadline := 0;
	obj.start_time := 0;
	obj.priority := 0;
	obj.criticality := 0;
	obj.period := 0;
	obj.jitter := 0;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Multiframe_Task_Group_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "task_group_type" then
		To_Task_Groups_Type (handler.Parameter_List (1), obj.task_group_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "deadline" then
		To_Integer (handler.Parameter_List (1), obj.deadline, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "start_time" then
		To_Integer (handler.Parameter_List (1), obj.start_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "priority" then
		To_Integer (handler.Parameter_List (1), obj.priority, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "criticality" then
		To_Integer (handler.Parameter_List (1), obj.criticality, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "period" then
		To_Integer (handler.Parameter_List (1), obj.period, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "jitter" then
		To_Integer (handler.Parameter_List (1), obj.jitter, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out CFG_Edge_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.node := empty_string;
	obj.next_node := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out CFG_Edge_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "node" then
		obj.node := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "next_node" then
		obj.next_node := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Generic_Task_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.task_type := Tasks_Type'first;
	obj.cpu_name := empty_string;
	obj.address_space_name := empty_string;
	obj.core_name := empty_string;
	obj.capacity_model := Execution_Unit_Model_Type'first;
	obj.capacity := 0;
	obj.energy_consumption := 0;
	obj.deadline := 0;
	obj.start_time := 0;
	obj.priority := 0;
	obj.blocking_time := 0;
	obj.policy := Policies'first;
	obj.text_memory_size := 0;
	obj.text_memory_start_address := 0;
	obj.stack_memory_size := 0;
	obj.criticality := 0;
	obj.context_switch_overhead := 0;
	obj.cfg_name := empty_string;
	obj.cfg_relocatable := false;
	obj.cache_access_profile_name := empty_string;
	obj.mils_confidentiality_level := MILS_Confidentiality_Level_Type'first;
	obj.mils_integrity_level := MILS_Integrity_Level_Type'first;
	obj.mils_component := MILS_Component_Type'first;
	obj.mils_task := MILS_Task_Type'first;
	obj.mils_compliant := false;
	obj.access_memory_number := 0;
	obj.maximum_number_of_memory_request_per_job := 0;
	obj.seed := 0;
	obj.predictable := false;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Generic_Task_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "task_type" then
		To_Tasks_Type (handler.Parameter_List (1), obj.task_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cpu_name" then
		obj.cpu_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "address_space_name" then
		obj.address_space_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "core_name" then
		obj.core_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "capacity_model" then
		To_Execution_Unit_Model_Type (handler.Parameter_List (1), obj.capacity_model, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "capacity" then
		To_Integer (handler.Parameter_List (1), obj.capacity, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "energy_consumption" then
		To_Integer (handler.Parameter_List (1), obj.energy_consumption, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "deadline" then
		To_Integer (handler.Parameter_List (1), obj.deadline, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "start_time" then
		To_Integer (handler.Parameter_List (1), obj.start_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "priority" then
		To_Integer (handler.Parameter_List (1), obj.priority, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "blocking_time" then
		To_Integer (handler.Parameter_List (1), obj.blocking_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "policy" then
		To_Policies (handler.Parameter_List (1), obj.policy, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "text_memory_size" then
		To_Integer (handler.Parameter_List (1), obj.text_memory_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "text_memory_start_address" then
		To_Integer (handler.Parameter_List (1), obj.text_memory_start_address, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "stack_memory_size" then
		To_Integer (handler.Parameter_List (1), obj.stack_memory_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "criticality" then
		To_Integer (handler.Parameter_List (1), obj.criticality, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "context_switch_overhead" then
		To_Integer (handler.Parameter_List (1), obj.context_switch_overhead, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cfg_name" then
		obj.cfg_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "cfg_relocatable" then
		To_Boolean (handler.Parameter_List (1), obj.cfg_relocatable, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cache_access_profile_name" then
		obj.cache_access_profile_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "mils_confidentiality_level" then
		To_MILS_Confidentiality_Level_Type (handler.Parameter_List (1), obj.mils_confidentiality_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_integrity_level" then
		To_MILS_Integrity_Level_Type (handler.Parameter_List (1), obj.mils_integrity_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_component" then
		To_MILS_Component_Type (handler.Parameter_List (1), obj.mils_component, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_task" then
		To_MILS_Task_Type (handler.Parameter_List (1), obj.mils_task, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_compliant" then
		To_Boolean (handler.Parameter_List (1), obj.mils_compliant, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "access_memory_number" then
		To_Integer (handler.Parameter_List (1), obj.access_memory_number, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "maximum_number_of_memory_request_per_job" then
		To_Integer (handler.Parameter_List (1), obj.maximum_number_of_memory_request_per_job, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "seed" then
		To_Integer (handler.Parameter_List (1), obj.seed, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "predictable" then
		To_Boolean (handler.Parameter_List (1), obj.predictable, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Periodic_Task_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.task_type := Tasks_Type'first;
	obj.cpu_name := empty_string;
	obj.address_space_name := empty_string;
	obj.core_name := empty_string;
	obj.capacity_model := Execution_Unit_Model_Type'first;
	obj.capacity := 0;
	obj.energy_consumption := 0;
	obj.deadline := 0;
	obj.start_time := 0;
	obj.priority := 0;
	obj.blocking_time := 0;
	obj.policy := Policies'first;
	obj.text_memory_size := 0;
	obj.text_memory_start_address := 0;
	obj.stack_memory_size := 0;
	obj.criticality := 0;
	obj.context_switch_overhead := 0;
	obj.cfg_name := empty_string;
	obj.cfg_relocatable := false;
	obj.cache_access_profile_name := empty_string;
	obj.mils_confidentiality_level := MILS_Confidentiality_Level_Type'first;
	obj.mils_integrity_level := MILS_Integrity_Level_Type'first;
	obj.mils_component := MILS_Component_Type'first;
	obj.mils_task := MILS_Task_Type'first;
	obj.mils_compliant := false;
	obj.access_memory_number := 0;
	obj.maximum_number_of_memory_request_per_job := 0;
	obj.seed := 0;
	obj.predictable := false;
	obj.period := 0;
	obj.jitter := 0;
	obj.every := 0;
	obj.completion_time := 0;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Periodic_Task_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "task_type" then
		To_Tasks_Type (handler.Parameter_List (1), obj.task_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cpu_name" then
		obj.cpu_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "address_space_name" then
		obj.address_space_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "core_name" then
		obj.core_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "capacity_model" then
		To_Execution_Unit_Model_Type (handler.Parameter_List (1), obj.capacity_model, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "capacity" then
		To_Integer (handler.Parameter_List (1), obj.capacity, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "energy_consumption" then
		To_Integer (handler.Parameter_List (1), obj.energy_consumption, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "deadline" then
		To_Integer (handler.Parameter_List (1), obj.deadline, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "start_time" then
		To_Integer (handler.Parameter_List (1), obj.start_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "priority" then
		To_Integer (handler.Parameter_List (1), obj.priority, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "blocking_time" then
		To_Integer (handler.Parameter_List (1), obj.blocking_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "policy" then
		To_Policies (handler.Parameter_List (1), obj.policy, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "text_memory_size" then
		To_Integer (handler.Parameter_List (1), obj.text_memory_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "text_memory_start_address" then
		To_Integer (handler.Parameter_List (1), obj.text_memory_start_address, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "stack_memory_size" then
		To_Integer (handler.Parameter_List (1), obj.stack_memory_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "criticality" then
		To_Integer (handler.Parameter_List (1), obj.criticality, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "context_switch_overhead" then
		To_Integer (handler.Parameter_List (1), obj.context_switch_overhead, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cfg_name" then
		obj.cfg_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "cfg_relocatable" then
		To_Boolean (handler.Parameter_List (1), obj.cfg_relocatable, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cache_access_profile_name" then
		obj.cache_access_profile_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "mils_confidentiality_level" then
		To_MILS_Confidentiality_Level_Type (handler.Parameter_List (1), obj.mils_confidentiality_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_integrity_level" then
		To_MILS_Integrity_Level_Type (handler.Parameter_List (1), obj.mils_integrity_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_component" then
		To_MILS_Component_Type (handler.Parameter_List (1), obj.mils_component, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_task" then
		To_MILS_Task_Type (handler.Parameter_List (1), obj.mils_task, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_compliant" then
		To_Boolean (handler.Parameter_List (1), obj.mils_compliant, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "access_memory_number" then
		To_Integer (handler.Parameter_List (1), obj.access_memory_number, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "maximum_number_of_memory_request_per_job" then
		To_Integer (handler.Parameter_List (1), obj.maximum_number_of_memory_request_per_job, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "seed" then
		To_Integer (handler.Parameter_List (1), obj.seed, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "predictable" then
		To_Boolean (handler.Parameter_List (1), obj.predictable, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "period" then
		To_Integer (handler.Parameter_List (1), obj.period, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "jitter" then
		To_Integer (handler.Parameter_List (1), obj.jitter, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "every" then
		To_Integer (handler.Parameter_List (1), obj.every, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "completion_time" then
		To_Integer (handler.Parameter_List (1), obj.completion_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Aperiodic_Task_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.task_type := Tasks_Type'first;
	obj.cpu_name := empty_string;
	obj.address_space_name := empty_string;
	obj.core_name := empty_string;
	obj.capacity_model := Execution_Unit_Model_Type'first;
	obj.capacity := 0;
	obj.energy_consumption := 0;
	obj.deadline := 0;
	obj.start_time := 0;
	obj.priority := 0;
	obj.blocking_time := 0;
	obj.policy := Policies'first;
	obj.text_memory_size := 0;
	obj.text_memory_start_address := 0;
	obj.stack_memory_size := 0;
	obj.criticality := 0;
	obj.context_switch_overhead := 0;
	obj.cfg_name := empty_string;
	obj.cfg_relocatable := false;
	obj.cache_access_profile_name := empty_string;
	obj.mils_confidentiality_level := MILS_Confidentiality_Level_Type'first;
	obj.mils_integrity_level := MILS_Integrity_Level_Type'first;
	obj.mils_component := MILS_Component_Type'first;
	obj.mils_task := MILS_Task_Type'first;
	obj.mils_compliant := false;
	obj.access_memory_number := 0;
	obj.maximum_number_of_memory_request_per_job := 0;
	obj.seed := 0;
	obj.predictable := false;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Aperiodic_Task_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "task_type" then
		To_Tasks_Type (handler.Parameter_List (1), obj.task_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cpu_name" then
		obj.cpu_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "address_space_name" then
		obj.address_space_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "core_name" then
		obj.core_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "capacity_model" then
		To_Execution_Unit_Model_Type (handler.Parameter_List (1), obj.capacity_model, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "capacity" then
		To_Integer (handler.Parameter_List (1), obj.capacity, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "energy_consumption" then
		To_Integer (handler.Parameter_List (1), obj.energy_consumption, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "deadline" then
		To_Integer (handler.Parameter_List (1), obj.deadline, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "start_time" then
		To_Integer (handler.Parameter_List (1), obj.start_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "priority" then
		To_Integer (handler.Parameter_List (1), obj.priority, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "blocking_time" then
		To_Integer (handler.Parameter_List (1), obj.blocking_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "policy" then
		To_Policies (handler.Parameter_List (1), obj.policy, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "text_memory_size" then
		To_Integer (handler.Parameter_List (1), obj.text_memory_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "text_memory_start_address" then
		To_Integer (handler.Parameter_List (1), obj.text_memory_start_address, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "stack_memory_size" then
		To_Integer (handler.Parameter_List (1), obj.stack_memory_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "criticality" then
		To_Integer (handler.Parameter_List (1), obj.criticality, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "context_switch_overhead" then
		To_Integer (handler.Parameter_List (1), obj.context_switch_overhead, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cfg_name" then
		obj.cfg_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "cfg_relocatable" then
		To_Boolean (handler.Parameter_List (1), obj.cfg_relocatable, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cache_access_profile_name" then
		obj.cache_access_profile_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "mils_confidentiality_level" then
		To_MILS_Confidentiality_Level_Type (handler.Parameter_List (1), obj.mils_confidentiality_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_integrity_level" then
		To_MILS_Integrity_Level_Type (handler.Parameter_List (1), obj.mils_integrity_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_component" then
		To_MILS_Component_Type (handler.Parameter_List (1), obj.mils_component, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_task" then
		To_MILS_Task_Type (handler.Parameter_List (1), obj.mils_task, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_compliant" then
		To_Boolean (handler.Parameter_List (1), obj.mils_compliant, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "access_memory_number" then
		To_Integer (handler.Parameter_List (1), obj.access_memory_number, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "maximum_number_of_memory_request_per_job" then
		To_Integer (handler.Parameter_List (1), obj.maximum_number_of_memory_request_per_job, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "seed" then
		To_Integer (handler.Parameter_List (1), obj.seed, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "predictable" then
		To_Boolean (handler.Parameter_List (1), obj.predictable, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Poisson_Task_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.task_type := Tasks_Type'first;
	obj.cpu_name := empty_string;
	obj.address_space_name := empty_string;
	obj.core_name := empty_string;
	obj.capacity_model := Execution_Unit_Model_Type'first;
	obj.capacity := 0;
	obj.energy_consumption := 0;
	obj.deadline := 0;
	obj.start_time := 0;
	obj.priority := 0;
	obj.blocking_time := 0;
	obj.policy := Policies'first;
	obj.text_memory_size := 0;
	obj.text_memory_start_address := 0;
	obj.stack_memory_size := 0;
	obj.criticality := 0;
	obj.context_switch_overhead := 0;
	obj.cfg_name := empty_string;
	obj.cfg_relocatable := false;
	obj.cache_access_profile_name := empty_string;
	obj.mils_confidentiality_level := MILS_Confidentiality_Level_Type'first;
	obj.mils_integrity_level := MILS_Integrity_Level_Type'first;
	obj.mils_component := MILS_Component_Type'first;
	obj.mils_task := MILS_Task_Type'first;
	obj.mils_compliant := false;
	obj.access_memory_number := 0;
	obj.maximum_number_of_memory_request_per_job := 0;
	obj.seed := 0;
	obj.predictable := false;
	obj.period := 0;
	obj.jitter := 0;
	obj.every := 0;
	obj.completion_time := 0;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Poisson_Task_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "task_type" then
		To_Tasks_Type (handler.Parameter_List (1), obj.task_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cpu_name" then
		obj.cpu_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "address_space_name" then
		obj.address_space_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "core_name" then
		obj.core_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "capacity_model" then
		To_Execution_Unit_Model_Type (handler.Parameter_List (1), obj.capacity_model, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "capacity" then
		To_Integer (handler.Parameter_List (1), obj.capacity, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "energy_consumption" then
		To_Integer (handler.Parameter_List (1), obj.energy_consumption, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "deadline" then
		To_Integer (handler.Parameter_List (1), obj.deadline, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "start_time" then
		To_Integer (handler.Parameter_List (1), obj.start_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "priority" then
		To_Integer (handler.Parameter_List (1), obj.priority, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "blocking_time" then
		To_Integer (handler.Parameter_List (1), obj.blocking_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "policy" then
		To_Policies (handler.Parameter_List (1), obj.policy, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "text_memory_size" then
		To_Integer (handler.Parameter_List (1), obj.text_memory_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "text_memory_start_address" then
		To_Integer (handler.Parameter_List (1), obj.text_memory_start_address, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "stack_memory_size" then
		To_Integer (handler.Parameter_List (1), obj.stack_memory_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "criticality" then
		To_Integer (handler.Parameter_List (1), obj.criticality, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "context_switch_overhead" then
		To_Integer (handler.Parameter_List (1), obj.context_switch_overhead, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cfg_name" then
		obj.cfg_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "cfg_relocatable" then
		To_Boolean (handler.Parameter_List (1), obj.cfg_relocatable, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cache_access_profile_name" then
		obj.cache_access_profile_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "mils_confidentiality_level" then
		To_MILS_Confidentiality_Level_Type (handler.Parameter_List (1), obj.mils_confidentiality_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_integrity_level" then
		To_MILS_Integrity_Level_Type (handler.Parameter_List (1), obj.mils_integrity_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_component" then
		To_MILS_Component_Type (handler.Parameter_List (1), obj.mils_component, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_task" then
		To_MILS_Task_Type (handler.Parameter_List (1), obj.mils_task, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_compliant" then
		To_Boolean (handler.Parameter_List (1), obj.mils_compliant, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "access_memory_number" then
		To_Integer (handler.Parameter_List (1), obj.access_memory_number, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "maximum_number_of_memory_request_per_job" then
		To_Integer (handler.Parameter_List (1), obj.maximum_number_of_memory_request_per_job, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "seed" then
		To_Integer (handler.Parameter_List (1), obj.seed, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "predictable" then
		To_Boolean (handler.Parameter_List (1), obj.predictable, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "period" then
		To_Integer (handler.Parameter_List (1), obj.period, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "jitter" then
		To_Integer (handler.Parameter_List (1), obj.jitter, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "every" then
		To_Integer (handler.Parameter_List (1), obj.every, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "completion_time" then
		To_Integer (handler.Parameter_List (1), obj.completion_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Timed_Task_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.task_type := Tasks_Type'first;
	obj.cpu_name := empty_string;
	obj.address_space_name := empty_string;
	obj.core_name := empty_string;
	obj.capacity_model := Execution_Unit_Model_Type'first;
	obj.capacity := 0;
	obj.energy_consumption := 0;
	obj.deadline := 0;
	obj.start_time := 0;
	obj.priority := 0;
	obj.blocking_time := 0;
	obj.policy := Policies'first;
	obj.text_memory_size := 0;
	obj.text_memory_start_address := 0;
	obj.stack_memory_size := 0;
	obj.criticality := 0;
	obj.context_switch_overhead := 0;
	obj.cfg_name := empty_string;
	obj.cfg_relocatable := false;
	obj.cache_access_profile_name := empty_string;
	obj.mils_confidentiality_level := MILS_Confidentiality_Level_Type'first;
	obj.mils_integrity_level := MILS_Integrity_Level_Type'first;
	obj.mils_component := MILS_Component_Type'first;
	obj.mils_task := MILS_Task_Type'first;
	obj.mils_compliant := false;
	obj.access_memory_number := 0;
	obj.maximum_number_of_memory_request_per_job := 0;
	obj.seed := 0;
	obj.predictable := false;
	obj.period := 0;
	obj.jitter := 0;
	obj.every := 0;
	obj.completion_time := 0;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Timed_Task_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "task_type" then
		To_Tasks_Type (handler.Parameter_List (1), obj.task_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cpu_name" then
		obj.cpu_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "address_space_name" then
		obj.address_space_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "core_name" then
		obj.core_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "capacity_model" then
		To_Execution_Unit_Model_Type (handler.Parameter_List (1), obj.capacity_model, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "capacity" then
		To_Integer (handler.Parameter_List (1), obj.capacity, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "energy_consumption" then
		To_Integer (handler.Parameter_List (1), obj.energy_consumption, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "deadline" then
		To_Integer (handler.Parameter_List (1), obj.deadline, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "start_time" then
		To_Integer (handler.Parameter_List (1), obj.start_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "priority" then
		To_Integer (handler.Parameter_List (1), obj.priority, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "blocking_time" then
		To_Integer (handler.Parameter_List (1), obj.blocking_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "policy" then
		To_Policies (handler.Parameter_List (1), obj.policy, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "text_memory_size" then
		To_Integer (handler.Parameter_List (1), obj.text_memory_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "text_memory_start_address" then
		To_Integer (handler.Parameter_List (1), obj.text_memory_start_address, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "stack_memory_size" then
		To_Integer (handler.Parameter_List (1), obj.stack_memory_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "criticality" then
		To_Integer (handler.Parameter_List (1), obj.criticality, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "context_switch_overhead" then
		To_Integer (handler.Parameter_List (1), obj.context_switch_overhead, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cfg_name" then
		obj.cfg_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "cfg_relocatable" then
		To_Boolean (handler.Parameter_List (1), obj.cfg_relocatable, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cache_access_profile_name" then
		obj.cache_access_profile_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "mils_confidentiality_level" then
		To_MILS_Confidentiality_Level_Type (handler.Parameter_List (1), obj.mils_confidentiality_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_integrity_level" then
		To_MILS_Integrity_Level_Type (handler.Parameter_List (1), obj.mils_integrity_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_component" then
		To_MILS_Component_Type (handler.Parameter_List (1), obj.mils_component, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_task" then
		To_MILS_Task_Type (handler.Parameter_List (1), obj.mils_task, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_compliant" then
		To_Boolean (handler.Parameter_List (1), obj.mils_compliant, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "access_memory_number" then
		To_Integer (handler.Parameter_List (1), obj.access_memory_number, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "maximum_number_of_memory_request_per_job" then
		To_Integer (handler.Parameter_List (1), obj.maximum_number_of_memory_request_per_job, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "seed" then
		To_Integer (handler.Parameter_List (1), obj.seed, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "predictable" then
		To_Boolean (handler.Parameter_List (1), obj.predictable, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "period" then
		To_Integer (handler.Parameter_List (1), obj.period, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "jitter" then
		To_Integer (handler.Parameter_List (1), obj.jitter, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "every" then
		To_Integer (handler.Parameter_List (1), obj.every, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "completion_time" then
		To_Integer (handler.Parameter_List (1), obj.completion_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Sporadic_Task_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.task_type := Tasks_Type'first;
	obj.cpu_name := empty_string;
	obj.address_space_name := empty_string;
	obj.core_name := empty_string;
	obj.capacity_model := Execution_Unit_Model_Type'first;
	obj.capacity := 0;
	obj.energy_consumption := 0;
	obj.deadline := 0;
	obj.start_time := 0;
	obj.priority := 0;
	obj.blocking_time := 0;
	obj.policy := Policies'first;
	obj.text_memory_size := 0;
	obj.text_memory_start_address := 0;
	obj.stack_memory_size := 0;
	obj.criticality := 0;
	obj.context_switch_overhead := 0;
	obj.cfg_name := empty_string;
	obj.cfg_relocatable := false;
	obj.cache_access_profile_name := empty_string;
	obj.mils_confidentiality_level := MILS_Confidentiality_Level_Type'first;
	obj.mils_integrity_level := MILS_Integrity_Level_Type'first;
	obj.mils_component := MILS_Component_Type'first;
	obj.mils_task := MILS_Task_Type'first;
	obj.mils_compliant := false;
	obj.access_memory_number := 0;
	obj.maximum_number_of_memory_request_per_job := 0;
	obj.seed := 0;
	obj.predictable := false;
	obj.period := 0;
	obj.jitter := 0;
	obj.every := 0;
	obj.completion_time := 0;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Sporadic_Task_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "task_type" then
		To_Tasks_Type (handler.Parameter_List (1), obj.task_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cpu_name" then
		obj.cpu_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "address_space_name" then
		obj.address_space_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "core_name" then
		obj.core_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "capacity_model" then
		To_Execution_Unit_Model_Type (handler.Parameter_List (1), obj.capacity_model, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "capacity" then
		To_Integer (handler.Parameter_List (1), obj.capacity, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "energy_consumption" then
		To_Integer (handler.Parameter_List (1), obj.energy_consumption, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "deadline" then
		To_Integer (handler.Parameter_List (1), obj.deadline, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "start_time" then
		To_Integer (handler.Parameter_List (1), obj.start_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "priority" then
		To_Integer (handler.Parameter_List (1), obj.priority, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "blocking_time" then
		To_Integer (handler.Parameter_List (1), obj.blocking_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "policy" then
		To_Policies (handler.Parameter_List (1), obj.policy, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "text_memory_size" then
		To_Integer (handler.Parameter_List (1), obj.text_memory_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "text_memory_start_address" then
		To_Integer (handler.Parameter_List (1), obj.text_memory_start_address, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "stack_memory_size" then
		To_Integer (handler.Parameter_List (1), obj.stack_memory_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "criticality" then
		To_Integer (handler.Parameter_List (1), obj.criticality, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "context_switch_overhead" then
		To_Integer (handler.Parameter_List (1), obj.context_switch_overhead, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cfg_name" then
		obj.cfg_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "cfg_relocatable" then
		To_Boolean (handler.Parameter_List (1), obj.cfg_relocatable, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cache_access_profile_name" then
		obj.cache_access_profile_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "mils_confidentiality_level" then
		To_MILS_Confidentiality_Level_Type (handler.Parameter_List (1), obj.mils_confidentiality_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_integrity_level" then
		To_MILS_Integrity_Level_Type (handler.Parameter_List (1), obj.mils_integrity_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_component" then
		To_MILS_Component_Type (handler.Parameter_List (1), obj.mils_component, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_task" then
		To_MILS_Task_Type (handler.Parameter_List (1), obj.mils_task, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_compliant" then
		To_Boolean (handler.Parameter_List (1), obj.mils_compliant, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "access_memory_number" then
		To_Integer (handler.Parameter_List (1), obj.access_memory_number, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "maximum_number_of_memory_request_per_job" then
		To_Integer (handler.Parameter_List (1), obj.maximum_number_of_memory_request_per_job, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "seed" then
		To_Integer (handler.Parameter_List (1), obj.seed, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "predictable" then
		To_Boolean (handler.Parameter_List (1), obj.predictable, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "period" then
		To_Integer (handler.Parameter_List (1), obj.period, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "jitter" then
		To_Integer (handler.Parameter_List (1), obj.jitter, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "every" then
		To_Integer (handler.Parameter_List (1), obj.every, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "completion_time" then
		To_Integer (handler.Parameter_List (1), obj.completion_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Parametric_Task_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.task_type := Tasks_Type'first;
	obj.cpu_name := empty_string;
	obj.address_space_name := empty_string;
	obj.core_name := empty_string;
	obj.capacity_model := Execution_Unit_Model_Type'first;
	obj.capacity := 0;
	obj.energy_consumption := 0;
	obj.deadline := 0;
	obj.start_time := 0;
	obj.priority := 0;
	obj.blocking_time := 0;
	obj.policy := Policies'first;
	obj.text_memory_size := 0;
	obj.text_memory_start_address := 0;
	obj.stack_memory_size := 0;
	obj.criticality := 0;
	obj.context_switch_overhead := 0;
	obj.cfg_name := empty_string;
	obj.cfg_relocatable := false;
	obj.cache_access_profile_name := empty_string;
	obj.mils_confidentiality_level := MILS_Confidentiality_Level_Type'first;
	obj.mils_integrity_level := MILS_Integrity_Level_Type'first;
	obj.mils_component := MILS_Component_Type'first;
	obj.mils_task := MILS_Task_Type'first;
	obj.mils_compliant := false;
	obj.access_memory_number := 0;
	obj.maximum_number_of_memory_request_per_job := 0;
	obj.seed := 0;
	obj.predictable := false;
	obj.period := 0;
	obj.jitter := 0;
	obj.every := 0;
	obj.completion_time := 0;
	obj.activation_rule := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Parametric_Task_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "task_type" then
		To_Tasks_Type (handler.Parameter_List (1), obj.task_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cpu_name" then
		obj.cpu_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "address_space_name" then
		obj.address_space_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "core_name" then
		obj.core_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "capacity_model" then
		To_Execution_Unit_Model_Type (handler.Parameter_List (1), obj.capacity_model, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "capacity" then
		To_Integer (handler.Parameter_List (1), obj.capacity, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "energy_consumption" then
		To_Integer (handler.Parameter_List (1), obj.energy_consumption, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "deadline" then
		To_Integer (handler.Parameter_List (1), obj.deadline, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "start_time" then
		To_Integer (handler.Parameter_List (1), obj.start_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "priority" then
		To_Integer (handler.Parameter_List (1), obj.priority, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "blocking_time" then
		To_Integer (handler.Parameter_List (1), obj.blocking_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "policy" then
		To_Policies (handler.Parameter_List (1), obj.policy, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "text_memory_size" then
		To_Integer (handler.Parameter_List (1), obj.text_memory_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "text_memory_start_address" then
		To_Integer (handler.Parameter_List (1), obj.text_memory_start_address, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "stack_memory_size" then
		To_Integer (handler.Parameter_List (1), obj.stack_memory_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "criticality" then
		To_Integer (handler.Parameter_List (1), obj.criticality, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "context_switch_overhead" then
		To_Integer (handler.Parameter_List (1), obj.context_switch_overhead, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cfg_name" then
		obj.cfg_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "cfg_relocatable" then
		To_Boolean (handler.Parameter_List (1), obj.cfg_relocatable, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cache_access_profile_name" then
		obj.cache_access_profile_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "mils_confidentiality_level" then
		To_MILS_Confidentiality_Level_Type (handler.Parameter_List (1), obj.mils_confidentiality_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_integrity_level" then
		To_MILS_Integrity_Level_Type (handler.Parameter_List (1), obj.mils_integrity_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_component" then
		To_MILS_Component_Type (handler.Parameter_List (1), obj.mils_component, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_task" then
		To_MILS_Task_Type (handler.Parameter_List (1), obj.mils_task, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_compliant" then
		To_Boolean (handler.Parameter_List (1), obj.mils_compliant, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "access_memory_number" then
		To_Integer (handler.Parameter_List (1), obj.access_memory_number, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "maximum_number_of_memory_request_per_job" then
		To_Integer (handler.Parameter_List (1), obj.maximum_number_of_memory_request_per_job, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "seed" then
		To_Integer (handler.Parameter_List (1), obj.seed, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "predictable" then
		To_Boolean (handler.Parameter_List (1), obj.predictable, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "period" then
		To_Integer (handler.Parameter_List (1), obj.period, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "jitter" then
		To_Integer (handler.Parameter_List (1), obj.jitter, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "every" then
		To_Integer (handler.Parameter_List (1), obj.every, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "completion_time" then
		To_Integer (handler.Parameter_List (1), obj.completion_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "activation_rule" then
		obj.activation_rule := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Scheduling_Task_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.task_type := Tasks_Type'first;
	obj.cpu_name := empty_string;
	obj.address_space_name := empty_string;
	obj.core_name := empty_string;
	obj.capacity_model := Execution_Unit_Model_Type'first;
	obj.capacity := 0;
	obj.energy_consumption := 0;
	obj.deadline := 0;
	obj.start_time := 0;
	obj.priority := 0;
	obj.blocking_time := 0;
	obj.policy := Policies'first;
	obj.text_memory_size := 0;
	obj.text_memory_start_address := 0;
	obj.stack_memory_size := 0;
	obj.criticality := 0;
	obj.context_switch_overhead := 0;
	obj.cfg_name := empty_string;
	obj.cfg_relocatable := false;
	obj.cache_access_profile_name := empty_string;
	obj.mils_confidentiality_level := MILS_Confidentiality_Level_Type'first;
	obj.mils_integrity_level := MILS_Integrity_Level_Type'first;
	obj.mils_component := MILS_Component_Type'first;
	obj.mils_task := MILS_Task_Type'first;
	obj.mils_compliant := false;
	obj.access_memory_number := 0;
	obj.maximum_number_of_memory_request_per_job := 0;
	obj.seed := 0;
	obj.predictable := false;
	obj.period := 0;
	obj.jitter := 0;
	obj.every := 0;
	obj.completion_time := 0;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Scheduling_Task_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "task_type" then
		To_Tasks_Type (handler.Parameter_List (1), obj.task_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cpu_name" then
		obj.cpu_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "address_space_name" then
		obj.address_space_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "core_name" then
		obj.core_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "capacity_model" then
		To_Execution_Unit_Model_Type (handler.Parameter_List (1), obj.capacity_model, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "capacity" then
		To_Integer (handler.Parameter_List (1), obj.capacity, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "energy_consumption" then
		To_Integer (handler.Parameter_List (1), obj.energy_consumption, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "deadline" then
		To_Integer (handler.Parameter_List (1), obj.deadline, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "start_time" then
		To_Integer (handler.Parameter_List (1), obj.start_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "priority" then
		To_Integer (handler.Parameter_List (1), obj.priority, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "blocking_time" then
		To_Integer (handler.Parameter_List (1), obj.blocking_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "policy" then
		To_Policies (handler.Parameter_List (1), obj.policy, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "text_memory_size" then
		To_Integer (handler.Parameter_List (1), obj.text_memory_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "text_memory_start_address" then
		To_Integer (handler.Parameter_List (1), obj.text_memory_start_address, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "stack_memory_size" then
		To_Integer (handler.Parameter_List (1), obj.stack_memory_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "criticality" then
		To_Integer (handler.Parameter_List (1), obj.criticality, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "context_switch_overhead" then
		To_Integer (handler.Parameter_List (1), obj.context_switch_overhead, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cfg_name" then
		obj.cfg_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "cfg_relocatable" then
		To_Boolean (handler.Parameter_List (1), obj.cfg_relocatable, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cache_access_profile_name" then
		obj.cache_access_profile_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "mils_confidentiality_level" then
		To_MILS_Confidentiality_Level_Type (handler.Parameter_List (1), obj.mils_confidentiality_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_integrity_level" then
		To_MILS_Integrity_Level_Type (handler.Parameter_List (1), obj.mils_integrity_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_component" then
		To_MILS_Component_Type (handler.Parameter_List (1), obj.mils_component, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_task" then
		To_MILS_Task_Type (handler.Parameter_List (1), obj.mils_task, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_compliant" then
		To_Boolean (handler.Parameter_List (1), obj.mils_compliant, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "access_memory_number" then
		To_Integer (handler.Parameter_List (1), obj.access_memory_number, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "maximum_number_of_memory_request_per_job" then
		To_Integer (handler.Parameter_List (1), obj.maximum_number_of_memory_request_per_job, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "seed" then
		To_Integer (handler.Parameter_List (1), obj.seed, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "predictable" then
		To_Boolean (handler.Parameter_List (1), obj.predictable, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "period" then
		To_Integer (handler.Parameter_List (1), obj.period, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "jitter" then
		To_Integer (handler.Parameter_List (1), obj.jitter, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "every" then
		To_Integer (handler.Parameter_List (1), obj.every, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "completion_time" then
		To_Integer (handler.Parameter_List (1), obj.completion_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Frame_Task_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.task_type := Tasks_Type'first;
	obj.cpu_name := empty_string;
	obj.address_space_name := empty_string;
	obj.core_name := empty_string;
	obj.capacity_model := Execution_Unit_Model_Type'first;
	obj.capacity := 0;
	obj.energy_consumption := 0;
	obj.deadline := 0;
	obj.start_time := 0;
	obj.priority := 0;
	obj.blocking_time := 0;
	obj.policy := Policies'first;
	obj.text_memory_size := 0;
	obj.text_memory_start_address := 0;
	obj.stack_memory_size := 0;
	obj.criticality := 0;
	obj.context_switch_overhead := 0;
	obj.cfg_name := empty_string;
	obj.cfg_relocatable := false;
	obj.cache_access_profile_name := empty_string;
	obj.mils_confidentiality_level := MILS_Confidentiality_Level_Type'first;
	obj.mils_integrity_level := MILS_Integrity_Level_Type'first;
	obj.mils_component := MILS_Component_Type'first;
	obj.mils_task := MILS_Task_Type'first;
	obj.mils_compliant := false;
	obj.access_memory_number := 0;
	obj.maximum_number_of_memory_request_per_job := 0;
	obj.seed := 0;
	obj.predictable := false;
	obj.period := 0;
	obj.jitter := 0;
	obj.every := 0;
	obj.completion_time := 0;
	obj.interarrival := 0;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Frame_Task_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "task_type" then
		To_Tasks_Type (handler.Parameter_List (1), obj.task_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cpu_name" then
		obj.cpu_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "address_space_name" then
		obj.address_space_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "core_name" then
		obj.core_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "capacity_model" then
		To_Execution_Unit_Model_Type (handler.Parameter_List (1), obj.capacity_model, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "capacity" then
		To_Integer (handler.Parameter_List (1), obj.capacity, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "energy_consumption" then
		To_Integer (handler.Parameter_List (1), obj.energy_consumption, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "deadline" then
		To_Integer (handler.Parameter_List (1), obj.deadline, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "start_time" then
		To_Integer (handler.Parameter_List (1), obj.start_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "priority" then
		To_Integer (handler.Parameter_List (1), obj.priority, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "blocking_time" then
		To_Integer (handler.Parameter_List (1), obj.blocking_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "policy" then
		To_Policies (handler.Parameter_List (1), obj.policy, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "text_memory_size" then
		To_Integer (handler.Parameter_List (1), obj.text_memory_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "text_memory_start_address" then
		To_Integer (handler.Parameter_List (1), obj.text_memory_start_address, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "stack_memory_size" then
		To_Integer (handler.Parameter_List (1), obj.stack_memory_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "criticality" then
		To_Integer (handler.Parameter_List (1), obj.criticality, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "context_switch_overhead" then
		To_Integer (handler.Parameter_List (1), obj.context_switch_overhead, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cfg_name" then
		obj.cfg_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "cfg_relocatable" then
		To_Boolean (handler.Parameter_List (1), obj.cfg_relocatable, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cache_access_profile_name" then
		obj.cache_access_profile_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "mils_confidentiality_level" then
		To_MILS_Confidentiality_Level_Type (handler.Parameter_List (1), obj.mils_confidentiality_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_integrity_level" then
		To_MILS_Integrity_Level_Type (handler.Parameter_List (1), obj.mils_integrity_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_component" then
		To_MILS_Component_Type (handler.Parameter_List (1), obj.mils_component, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_task" then
		To_MILS_Task_Type (handler.Parameter_List (1), obj.mils_task, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_compliant" then
		To_Boolean (handler.Parameter_List (1), obj.mils_compliant, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "access_memory_number" then
		To_Integer (handler.Parameter_List (1), obj.access_memory_number, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "maximum_number_of_memory_request_per_job" then
		To_Integer (handler.Parameter_List (1), obj.maximum_number_of_memory_request_per_job, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "seed" then
		To_Integer (handler.Parameter_List (1), obj.seed, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "predictable" then
		To_Boolean (handler.Parameter_List (1), obj.predictable, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "period" then
		To_Integer (handler.Parameter_List (1), obj.period, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "jitter" then
		To_Integer (handler.Parameter_List (1), obj.jitter, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "every" then
		To_Integer (handler.Parameter_List (1), obj.every, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "completion_time" then
		To_Integer (handler.Parameter_List (1), obj.completion_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "interarrival" then
		To_Integer (handler.Parameter_List (1), obj.interarrival, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Sporadic_Inner_Periodic_Task_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.task_type := Tasks_Type'first;
	obj.cpu_name := empty_string;
	obj.address_space_name := empty_string;
	obj.core_name := empty_string;
	obj.capacity_model := Execution_Unit_Model_Type'first;
	obj.capacity := 0;
	obj.energy_consumption := 0;
	obj.deadline := 0;
	obj.start_time := 0;
	obj.priority := 0;
	obj.blocking_time := 0;
	obj.policy := Policies'first;
	obj.text_memory_size := 0;
	obj.text_memory_start_address := 0;
	obj.stack_memory_size := 0;
	obj.criticality := 0;
	obj.context_switch_overhead := 0;
	obj.cfg_name := empty_string;
	obj.cfg_relocatable := false;
	obj.cache_access_profile_name := empty_string;
	obj.mils_confidentiality_level := MILS_Confidentiality_Level_Type'first;
	obj.mils_integrity_level := MILS_Integrity_Level_Type'first;
	obj.mils_component := MILS_Component_Type'first;
	obj.mils_task := MILS_Task_Type'first;
	obj.mils_compliant := false;
	obj.access_memory_number := 0;
	obj.maximum_number_of_memory_request_per_job := 0;
	obj.seed := 0;
	obj.predictable := false;
	obj.period := 0;
	obj.jitter := 0;
	obj.every := 0;
	obj.completion_time := 0;
	obj.activation_rule := empty_string;
	obj.outer_period := 0;
	obj.outer_duration := 0;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Sporadic_Inner_Periodic_Task_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "task_type" then
		To_Tasks_Type (handler.Parameter_List (1), obj.task_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cpu_name" then
		obj.cpu_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "address_space_name" then
		obj.address_space_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "core_name" then
		obj.core_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "capacity_model" then
		To_Execution_Unit_Model_Type (handler.Parameter_List (1), obj.capacity_model, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "capacity" then
		To_Integer (handler.Parameter_List (1), obj.capacity, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "energy_consumption" then
		To_Integer (handler.Parameter_List (1), obj.energy_consumption, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "deadline" then
		To_Integer (handler.Parameter_List (1), obj.deadline, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "start_time" then
		To_Integer (handler.Parameter_List (1), obj.start_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "priority" then
		To_Integer (handler.Parameter_List (1), obj.priority, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "blocking_time" then
		To_Integer (handler.Parameter_List (1), obj.blocking_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "policy" then
		To_Policies (handler.Parameter_List (1), obj.policy, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "text_memory_size" then
		To_Integer (handler.Parameter_List (1), obj.text_memory_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "text_memory_start_address" then
		To_Integer (handler.Parameter_List (1), obj.text_memory_start_address, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "stack_memory_size" then
		To_Integer (handler.Parameter_List (1), obj.stack_memory_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "criticality" then
		To_Integer (handler.Parameter_List (1), obj.criticality, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "context_switch_overhead" then
		To_Integer (handler.Parameter_List (1), obj.context_switch_overhead, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cfg_name" then
		obj.cfg_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "cfg_relocatable" then
		To_Boolean (handler.Parameter_List (1), obj.cfg_relocatable, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cache_access_profile_name" then
		obj.cache_access_profile_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "mils_confidentiality_level" then
		To_MILS_Confidentiality_Level_Type (handler.Parameter_List (1), obj.mils_confidentiality_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_integrity_level" then
		To_MILS_Integrity_Level_Type (handler.Parameter_List (1), obj.mils_integrity_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_component" then
		To_MILS_Component_Type (handler.Parameter_List (1), obj.mils_component, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_task" then
		To_MILS_Task_Type (handler.Parameter_List (1), obj.mils_task, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_compliant" then
		To_Boolean (handler.Parameter_List (1), obj.mils_compliant, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "access_memory_number" then
		To_Integer (handler.Parameter_List (1), obj.access_memory_number, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "maximum_number_of_memory_request_per_job" then
		To_Integer (handler.Parameter_List (1), obj.maximum_number_of_memory_request_per_job, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "seed" then
		To_Integer (handler.Parameter_List (1), obj.seed, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "predictable" then
		To_Boolean (handler.Parameter_List (1), obj.predictable, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "period" then
		To_Integer (handler.Parameter_List (1), obj.period, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "jitter" then
		To_Integer (handler.Parameter_List (1), obj.jitter, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "every" then
		To_Integer (handler.Parameter_List (1), obj.every, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "completion_time" then
		To_Integer (handler.Parameter_List (1), obj.completion_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "activation_rule" then
		obj.activation_rule := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "outer_period" then
		To_Integer (handler.Parameter_List (1), obj.outer_period, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "outer_duration" then
		To_Integer (handler.Parameter_List (1), obj.outer_duration, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Periodic_Inner_Periodic_Task_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.task_type := Tasks_Type'first;
	obj.cpu_name := empty_string;
	obj.address_space_name := empty_string;
	obj.core_name := empty_string;
	obj.capacity_model := Execution_Unit_Model_Type'first;
	obj.capacity := 0;
	obj.energy_consumption := 0;
	obj.deadline := 0;
	obj.start_time := 0;
	obj.priority := 0;
	obj.blocking_time := 0;
	obj.policy := Policies'first;
	obj.text_memory_size := 0;
	obj.text_memory_start_address := 0;
	obj.stack_memory_size := 0;
	obj.criticality := 0;
	obj.context_switch_overhead := 0;
	obj.cfg_name := empty_string;
	obj.cfg_relocatable := false;
	obj.cache_access_profile_name := empty_string;
	obj.mils_confidentiality_level := MILS_Confidentiality_Level_Type'first;
	obj.mils_integrity_level := MILS_Integrity_Level_Type'first;
	obj.mils_component := MILS_Component_Type'first;
	obj.mils_task := MILS_Task_Type'first;
	obj.mils_compliant := false;
	obj.access_memory_number := 0;
	obj.maximum_number_of_memory_request_per_job := 0;
	obj.seed := 0;
	obj.predictable := false;
	obj.period := 0;
	obj.jitter := 0;
	obj.every := 0;
	obj.completion_time := 0;
	obj.activation_rule := empty_string;
	obj.outer_period := 0;
	obj.outer_duration := 0;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Periodic_Inner_Periodic_Task_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "task_type" then
		To_Tasks_Type (handler.Parameter_List (1), obj.task_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cpu_name" then
		obj.cpu_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "address_space_name" then
		obj.address_space_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "core_name" then
		obj.core_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "capacity_model" then
		To_Execution_Unit_Model_Type (handler.Parameter_List (1), obj.capacity_model, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "capacity" then
		To_Integer (handler.Parameter_List (1), obj.capacity, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "energy_consumption" then
		To_Integer (handler.Parameter_List (1), obj.energy_consumption, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "deadline" then
		To_Integer (handler.Parameter_List (1), obj.deadline, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "start_time" then
		To_Integer (handler.Parameter_List (1), obj.start_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "priority" then
		To_Integer (handler.Parameter_List (1), obj.priority, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "blocking_time" then
		To_Integer (handler.Parameter_List (1), obj.blocking_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "policy" then
		To_Policies (handler.Parameter_List (1), obj.policy, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "text_memory_size" then
		To_Integer (handler.Parameter_List (1), obj.text_memory_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "text_memory_start_address" then
		To_Integer (handler.Parameter_List (1), obj.text_memory_start_address, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "stack_memory_size" then
		To_Integer (handler.Parameter_List (1), obj.stack_memory_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "criticality" then
		To_Integer (handler.Parameter_List (1), obj.criticality, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "context_switch_overhead" then
		To_Integer (handler.Parameter_List (1), obj.context_switch_overhead, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cfg_name" then
		obj.cfg_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "cfg_relocatable" then
		To_Boolean (handler.Parameter_List (1), obj.cfg_relocatable, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cache_access_profile_name" then
		obj.cache_access_profile_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "mils_confidentiality_level" then
		To_MILS_Confidentiality_Level_Type (handler.Parameter_List (1), obj.mils_confidentiality_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_integrity_level" then
		To_MILS_Integrity_Level_Type (handler.Parameter_List (1), obj.mils_integrity_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_component" then
		To_MILS_Component_Type (handler.Parameter_List (1), obj.mils_component, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_task" then
		To_MILS_Task_Type (handler.Parameter_List (1), obj.mils_task, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_compliant" then
		To_Boolean (handler.Parameter_List (1), obj.mils_compliant, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "access_memory_number" then
		To_Integer (handler.Parameter_List (1), obj.access_memory_number, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "maximum_number_of_memory_request_per_job" then
		To_Integer (handler.Parameter_List (1), obj.maximum_number_of_memory_request_per_job, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "seed" then
		To_Integer (handler.Parameter_List (1), obj.seed, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "predictable" then
		To_Boolean (handler.Parameter_List (1), obj.predictable, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "period" then
		To_Integer (handler.Parameter_List (1), obj.period, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "jitter" then
		To_Integer (handler.Parameter_List (1), obj.jitter, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "every" then
		To_Integer (handler.Parameter_List (1), obj.every, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "completion_time" then
		To_Integer (handler.Parameter_List (1), obj.completion_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "activation_rule" then
		obj.activation_rule := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "outer_period" then
		To_Integer (handler.Parameter_List (1), obj.outer_period, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "outer_duration" then
		To_Integer (handler.Parameter_List (1), obj.outer_duration, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Battery_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.capacity := 0;
	obj.rechargeable_power := 0;
	obj.cpu_name := empty_string;
	obj.e_max := 0;
	obj.e_min := 0;
	obj.initial_energy := 0;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Battery_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "capacity" then
		To_Integer (handler.Parameter_List (1), obj.capacity, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "rechargeable_power" then
		To_Integer (handler.Parameter_List (1), obj.rechargeable_power, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cpu_name" then
		obj.cpu_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "e_max" then
		To_Integer (handler.Parameter_List (1), obj.e_max, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "e_min" then
		To_Integer (handler.Parameter_List (1), obj.e_min, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "initial_energy" then
		To_Integer (handler.Parameter_List (1), obj.initial_energy, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Generic_Processor_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.processor_type := Processors_type'first;
	obj.migration_type := Migrations_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Generic_Processor_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "processor_type" then
		To_Processors_type (handler.Parameter_List (1), obj.processor_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "migration_type" then
		To_Migrations_Type (handler.Parameter_List (1), obj.migration_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Mono_Core_Processor_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.processor_type := Processors_type'first;
	obj.migration_type := Migrations_Type'first;
	obj.core := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Mono_Core_Processor_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is 
begin
	if Get_Length (Atts) > 0 then
		if To_String (To_Lower (Qname)) = "core" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.core := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Mono_Core_Processor_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "processor_type" then
		To_Processors_type (handler.Parameter_List (1), obj.processor_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "migration_type" then
		To_Migrations_Type (handler.Parameter_List (1), obj.migration_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Multi_Cores_Processor_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.processor_type := Processors_type'first;
	obj.migration_type := Migrations_Type'first;
	obj.l2_cache_system_name := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Multi_Cores_Processor_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "processor_type" then
		To_Processors_type (handler.Parameter_List (1), obj.processor_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "migration_type" then
		To_Migrations_Type (handler.Parameter_List (1), obj.migration_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "l2_cache_system_name" then
		obj.l2_cache_system_name := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Core_Unit_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.speed := 0;
	obj.l1_cache_system_name := empty_string;
	obj.worstcase_perequest_intrabank_memory_interference := 0;
	obj.worstcase_perequest_interbank_memory_interference := 0;
	obj.isa := Isa_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Core_Unit_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "speed" then
		To_Integer (handler.Parameter_List (1), obj.speed, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "l1_cache_system_name" then
		obj.l1_cache_system_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "worstcase_perequest_intrabank_memory_interference" then
		To_Integer (handler.Parameter_List (1), obj.worstcase_perequest_intrabank_memory_interference, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "worstcase_perequest_interbank_memory_interference" then
		To_Integer (handler.Parameter_List (1), obj.worstcase_perequest_interbank_memory_interference, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "isa" then
		To_Isa_Type (handler.Parameter_List (1), obj.isa, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Basic_Block_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.graph_type := CFG_Graph_Type'first;
	obj.node_type := CFG_Node_Type'first;
	obj.instruction_offset := 0;
	obj.instruction_capacity := 0;
	obj.number_of_memory_access := 0;
	obj.execution_time := 0;
	obj.data_offset := 0;
	obj.data_capacity := 0;
	obj.loop_bound := 0;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Basic_Block_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "graph_type" then
		To_CFG_Graph_Type (handler.Parameter_List (1), obj.graph_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "node_type" then
		To_CFG_Node_Type (handler.Parameter_List (1), obj.node_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "instruction_offset" then
		To_Integer (handler.Parameter_List (1), obj.instruction_offset, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "instruction_capacity" then
		To_Integer (handler.Parameter_List (1), obj.instruction_capacity, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "number_of_memory_access" then
		To_Integer (handler.Parameter_List (1), obj.number_of_memory_access, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "execution_time" then
		To_Integer (handler.Parameter_List (1), obj.execution_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "data_offset" then
		To_Integer (handler.Parameter_List (1), obj.data_offset, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "data_capacity" then
		To_Integer (handler.Parameter_List (1), obj.data_capacity, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "loop_bound" then
		To_Integer (handler.Parameter_List (1), obj.loop_bound, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Generic_Message_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.message_type := Messages_Type'first;
	obj.preemptive_type := Preemptives_Type'first;
	obj.deadline := 0;
	obj.size := 0;
	obj.response_time := 0;
	obj.communication_time := 0;
	obj.mils_confidentiality_level := MILS_Confidentiality_Level_Type'first;
	obj.mils_integrity_level := MILS_Integrity_Level_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Generic_Message_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "message_type" then
		To_Messages_Type (handler.Parameter_List (1), obj.message_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "preemptive_type" then
		To_Preemptives_Type (handler.Parameter_List (1), obj.preemptive_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "deadline" then
		To_Integer (handler.Parameter_List (1), obj.deadline, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "size" then
		To_Integer (handler.Parameter_List (1), obj.size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "response_time" then
		To_Integer (handler.Parameter_List (1), obj.response_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "communication_time" then
		To_Integer (handler.Parameter_List (1), obj.communication_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_confidentiality_level" then
		To_MILS_Confidentiality_Level_Type (handler.Parameter_List (1), obj.mils_confidentiality_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_integrity_level" then
		To_MILS_Integrity_Level_Type (handler.Parameter_List (1), obj.mils_integrity_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Periodic_Message_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.message_type := Messages_Type'first;
	obj.preemptive_type := Preemptives_Type'first;
	obj.deadline := 0;
	obj.size := 0;
	obj.response_time := 0;
	obj.communication_time := 0;
	obj.mils_confidentiality_level := MILS_Confidentiality_Level_Type'first;
	obj.mils_integrity_level := MILS_Integrity_Level_Type'first;
	obj.period := 0;
	obj.jitter := 0;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Periodic_Message_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "message_type" then
		To_Messages_Type (handler.Parameter_List (1), obj.message_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "preemptive_type" then
		To_Preemptives_Type (handler.Parameter_List (1), obj.preemptive_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "deadline" then
		To_Integer (handler.Parameter_List (1), obj.deadline, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "size" then
		To_Integer (handler.Parameter_List (1), obj.size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "response_time" then
		To_Integer (handler.Parameter_List (1), obj.response_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "communication_time" then
		To_Integer (handler.Parameter_List (1), obj.communication_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_confidentiality_level" then
		To_MILS_Confidentiality_Level_Type (handler.Parameter_List (1), obj.mils_confidentiality_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_integrity_level" then
		To_MILS_Integrity_Level_Type (handler.Parameter_List (1), obj.mils_integrity_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "period" then
		To_Integer (handler.Parameter_List (1), obj.period, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "jitter" then
		To_Integer (handler.Parameter_List (1), obj.jitter, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Aperiodic_Message_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.message_type := Messages_Type'first;
	obj.preemptive_type := Preemptives_Type'first;
	obj.deadline := 0;
	obj.size := 0;
	obj.response_time := 0;
	obj.communication_time := 0;
	obj.mils_confidentiality_level := MILS_Confidentiality_Level_Type'first;
	obj.mils_integrity_level := MILS_Integrity_Level_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Aperiodic_Message_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "message_type" then
		To_Messages_Type (handler.Parameter_List (1), obj.message_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "preemptive_type" then
		To_Preemptives_Type (handler.Parameter_List (1), obj.preemptive_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "deadline" then
		To_Integer (handler.Parameter_List (1), obj.deadline, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "size" then
		To_Integer (handler.Parameter_List (1), obj.size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "response_time" then
		To_Integer (handler.Parameter_List (1), obj.response_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "communication_time" then
		To_Integer (handler.Parameter_List (1), obj.communication_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_confidentiality_level" then
		To_MILS_Confidentiality_Level_Type (handler.Parameter_List (1), obj.mils_confidentiality_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_integrity_level" then
		To_MILS_Integrity_Level_Type (handler.Parameter_List (1), obj.mils_integrity_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out DFG_Variable_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out DFG_Variable_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out DFG_Statement_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.Defined_Variable := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out DFG_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is 
begin
	if Get_Length (Atts) > 0 then
		if To_String (To_Lower (Qname)) = "defined_variable" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.Defined_Variable := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out DFG_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Task_Release_Record_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.task_name := empty_string;
	obj.task_index := 0;
	obj.capacity := 0;
	obj.release_time := 0;
	obj.finish_time := 0;
	obj.deadline := 0;
	obj.completed := false;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Task_Release_Record_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "task_name" then
		obj.task_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "task_index" then
		To_Integer (handler.Parameter_List (1), obj.task_index, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "capacity" then
		To_Integer (handler.Parameter_List (1), obj.capacity, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "release_time" then
		To_Integer (handler.Parameter_List (1), obj.release_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "finish_time" then
		To_Integer (handler.Parameter_List (1), obj.finish_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "deadline" then
		To_Integer (handler.Parameter_List (1), obj.deadline, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "completed" then
		To_Boolean (handler.Parameter_List (1), obj.completed, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Buffer_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.cpu_name := empty_string;
	obj.address_space_name := empty_string;
	obj.queueing_system_type := Queueing_Systems_Type'first;
	obj.buffer_size := 0;
	obj.buffer_initial_data_size := 0;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Buffer_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "cpu_name" then
		obj.cpu_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "address_space_name" then
		obj.address_space_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "queueing_system_type" then
		To_Queueing_Systems_Type (handler.Parameter_List (1), obj.queueing_system_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "buffer_size" then
		To_Integer (handler.Parameter_List (1), obj.buffer_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "buffer_initial_data_size" then
		To_Integer (handler.Parameter_List (1), obj.buffer_initial_data_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Generic_Network_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.network_delay := Networks_Delay_Type'first;
	obj.network_architecture_type := Networks_Architecture_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Generic_Network_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "network_delay" then
		To_Networks_Delay_Type (handler.Parameter_List (1), obj.network_delay, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "network_architecture_type" then
		To_Networks_Architecture_Type (handler.Parameter_List (1), obj.network_architecture_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out NOC_Network_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.network_delay := Networks_Delay_Type'first;
	obj.network_architecture_type := Networks_Architecture_Type'first;
	obj.topology := Topology_Type'first;
	obj.number_of_processor := 0;
	obj.link_delay := 0;
	obj.dimension := 0;
	obj.number_of_virtual_channel := 0;
	obj.routing_protocol := Routing_Type'first;
	obj.switching_protocol := Switching_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out NOC_Network_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "network_delay" then
		To_Networks_Delay_Type (handler.Parameter_List (1), obj.network_delay, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "network_architecture_type" then
		To_Networks_Architecture_Type (handler.Parameter_List (1), obj.network_architecture_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "topology" then
		To_Topology_Type (handler.Parameter_List (1), obj.topology, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "number_of_processor" then
		To_Integer (handler.Parameter_List (1), obj.number_of_processor, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "link_delay" then
		To_Integer (handler.Parameter_List (1), obj.link_delay, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "dimension" then
		To_Integer (handler.Parameter_List (1), obj.dimension, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "number_of_virtual_channel" then
		To_Integer (handler.Parameter_List (1), obj.number_of_virtual_channel, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "routing_protocol" then
		To_Routing_Type (handler.Parameter_List (1), obj.routing_protocol, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "switching_protocol" then
		To_Switching_Type (handler.Parameter_List (1), obj.switching_protocol, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Spacewire_Network_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.network_delay := Networks_Delay_Type'first;
	obj.network_architecture_type := Networks_Architecture_Type'first;
	obj.number_of_processor := 0;
	obj.link_delay := 0;
	obj.Xdimension := 0;
	obj.Ydimension := 0;
	obj.routing_protocol := Routing_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Spacewire_Network_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "network_delay" then
		To_Networks_Delay_Type (handler.Parameter_List (1), obj.network_delay, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "network_architecture_type" then
		To_Networks_Architecture_Type (handler.Parameter_List (1), obj.network_architecture_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "number_of_processor" then
		To_Integer (handler.Parameter_List (1), obj.number_of_processor, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "link_delay" then
		To_Integer (handler.Parameter_List (1), obj.link_delay, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "xdimension" then
		To_Integer (handler.Parameter_List (1), obj.Xdimension, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "ydimension" then
		To_Integer (handler.Parameter_List (1), obj.Ydimension, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "routing_protocol" then
		To_Routing_Type (handler.Parameter_List (1), obj.routing_protocol, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Bus_Network_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.network_delay := Networks_Delay_Type'first;
	obj.network_architecture_type := Networks_Architecture_Type'first;
	obj.bus_arbitration := Arbitration_Type'first;
	obj.memory_word_access_time := 0;
	obj.maximum_interbank_interferences_memory_delay := 0;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Bus_Network_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "network_delay" then
		To_Networks_Delay_Type (handler.Parameter_List (1), obj.network_delay, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "network_architecture_type" then
		To_Networks_Architecture_Type (handler.Parameter_List (1), obj.network_architecture_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "bus_arbitration" then
		To_Arbitration_Type (handler.Parameter_List (1), obj.bus_arbitration, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "memory_word_access_time" then
		To_Integer (handler.Parameter_List (1), obj.memory_word_access_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "maximum_interbank_interferences_memory_delay" then
		To_Integer (handler.Parameter_List (1), obj.maximum_interbank_interferences_memory_delay, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Generic_Memory_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.size := 0;
	obj.access_latency := 0;
	obj.memory_category := Memory_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Generic_Memory_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "size" then
		To_Integer (handler.Parameter_List (1), obj.size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "access_latency" then
		To_Integer (handler.Parameter_List (1), obj.access_latency, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "memory_category" then
		To_Memory_Type (handler.Parameter_List (1), obj.memory_category, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out DRAM_Memory_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.size := 0;
	obj.access_latency := 0;
	obj.memory_category := Memory_Type'first;
	obj.shared_access_latency := 0;
	obj.private_access_latency := 0;
	obj.l_rw_inter := 0;
	obj.l_act_inter := 0;
	obj.l_pre_inter := 0;
	obj.n_reorder := 0;
	obj.l_conhit := 0;
	obj.l_conf := 0;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out DRAM_Memory_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "size" then
		To_Integer (handler.Parameter_List (1), obj.size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "access_latency" then
		To_Integer (handler.Parameter_List (1), obj.access_latency, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "memory_category" then
		To_Memory_Type (handler.Parameter_List (1), obj.memory_category, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "shared_access_latency" then
		To_Integer (handler.Parameter_List (1), obj.shared_access_latency, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "private_access_latency" then
		To_Integer (handler.Parameter_List (1), obj.private_access_latency, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "l_rw_inter" then
		To_Integer (handler.Parameter_List (1), obj.l_rw_inter, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "l_act_inter" then
		To_Integer (handler.Parameter_List (1), obj.l_act_inter, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "l_pre_inter" then
		To_Integer (handler.Parameter_List (1), obj.l_pre_inter, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "n_reorder" then
		To_Integer (handler.Parameter_List (1), obj.n_reorder, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "l_conhit" then
		To_Integer (handler.Parameter_List (1), obj.l_conhit, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "l_conf" then
		To_Integer (handler.Parameter_List (1), obj.l_conf, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Kalray_Memory_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.size := 0;
	obj.access_latency := 0;
	obj.memory_category := Memory_Type'first;
	obj.nb_bank := 0;
	obj.partition_mode := false;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Kalray_Memory_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "size" then
		To_Integer (handler.Parameter_List (1), obj.size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "access_latency" then
		To_Integer (handler.Parameter_List (1), obj.access_latency, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "memory_category" then
		To_Memory_Type (handler.Parameter_List (1), obj.memory_category, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "nb_bank" then
		To_Integer (handler.Parameter_List (1), obj.nb_bank, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "partition_mode" then
		To_Boolean (handler.Parameter_List (1), obj.partition_mode, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Address_Space_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.cpu_name := empty_string;
	obj.text_memory_size := 0;
	obj.stack_memory_size := 0;
	obj.data_memory_size := 0;
	obj.heap_memory_size := 0;
	obj.mils_confidentiality_level := MILS_Confidentiality_Level_Type'first;
	obj.mils_integrity_level := MILS_Integrity_Level_Type'first;
	obj.mils_component := MILS_Component_Type'first;
	obj.mils_partition := MILS_Partition_Type'first;
	obj.mils_compliant := false;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Address_Space_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "cpu_name" then
		obj.cpu_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "text_memory_size" then
		To_Integer (handler.Parameter_List (1), obj.text_memory_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "stack_memory_size" then
		To_Integer (handler.Parameter_List (1), obj.stack_memory_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "data_memory_size" then
		To_Integer (handler.Parameter_List (1), obj.data_memory_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "heap_memory_size" then
		To_Integer (handler.Parameter_List (1), obj.heap_memory_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_confidentiality_level" then
		To_MILS_Confidentiality_Level_Type (handler.Parameter_List (1), obj.mils_confidentiality_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_integrity_level" then
		To_MILS_Integrity_Level_Type (handler.Parameter_List (1), obj.mils_integrity_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_component" then
		To_MILS_Component_Type (handler.Parameter_List (1), obj.mils_component, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_partition" then
		To_MILS_Partition_Type (handler.Parameter_List (1), obj.mils_partition, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_compliant" then
		To_Boolean (handler.Parameter_List (1), obj.mils_compliant, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Run_Server_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.task_type := Tasks_Type'first;
	obj.cpu_name := empty_string;
	obj.address_space_name := empty_string;
	obj.core_name := empty_string;
	obj.capacity_model := Execution_Unit_Model_Type'first;
	obj.capacity := 0;
	obj.energy_consumption := 0;
	obj.deadline := 0;
	obj.start_time := 0;
	obj.priority := 0;
	obj.blocking_time := 0;
	obj.policy := Policies'first;
	obj.text_memory_size := 0;
	obj.text_memory_start_address := 0;
	obj.stack_memory_size := 0;
	obj.criticality := 0;
	obj.context_switch_overhead := 0;
	obj.cfg_name := empty_string;
	obj.cfg_relocatable := false;
	obj.cache_access_profile_name := empty_string;
	obj.mils_confidentiality_level := MILS_Confidentiality_Level_Type'first;
	obj.mils_integrity_level := MILS_Integrity_Level_Type'first;
	obj.mils_component := MILS_Component_Type'first;
	obj.mils_task := MILS_Task_Type'first;
	obj.mils_compliant := false;
	obj.access_memory_number := 0;
	obj.maximum_number_of_memory_request_per_job := 0;
	obj.seed := 0;
	obj.predictable := false;
	obj.period := 0;
	obj.jitter := 0;
	obj.every := 0;
	obj.completion_time := 0;
	obj.rate := 0.0;
	obj.core := empty_string;
	obj.executing := false;
	obj.job_capacity := 0;
	obj.job_duration := 0;
	obj.job_release := 0;
	obj.job_deadline := 0;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Run_Server_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "task_type" then
		To_Tasks_Type (handler.Parameter_List (1), obj.task_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cpu_name" then
		obj.cpu_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "address_space_name" then
		obj.address_space_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "core_name" then
		obj.core_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "capacity_model" then
		To_Execution_Unit_Model_Type (handler.Parameter_List (1), obj.capacity_model, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "capacity" then
		To_Integer (handler.Parameter_List (1), obj.capacity, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "energy_consumption" then
		To_Integer (handler.Parameter_List (1), obj.energy_consumption, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "deadline" then
		To_Integer (handler.Parameter_List (1), obj.deadline, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "start_time" then
		To_Integer (handler.Parameter_List (1), obj.start_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "priority" then
		To_Integer (handler.Parameter_List (1), obj.priority, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "blocking_time" then
		To_Integer (handler.Parameter_List (1), obj.blocking_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "policy" then
		To_Policies (handler.Parameter_List (1), obj.policy, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "text_memory_size" then
		To_Integer (handler.Parameter_List (1), obj.text_memory_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "text_memory_start_address" then
		To_Integer (handler.Parameter_List (1), obj.text_memory_start_address, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "stack_memory_size" then
		To_Integer (handler.Parameter_List (1), obj.stack_memory_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "criticality" then
		To_Integer (handler.Parameter_List (1), obj.criticality, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "context_switch_overhead" then
		To_Integer (handler.Parameter_List (1), obj.context_switch_overhead, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cfg_name" then
		obj.cfg_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "cfg_relocatable" then
		To_Boolean (handler.Parameter_List (1), obj.cfg_relocatable, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cache_access_profile_name" then
		obj.cache_access_profile_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "mils_confidentiality_level" then
		To_MILS_Confidentiality_Level_Type (handler.Parameter_List (1), obj.mils_confidentiality_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_integrity_level" then
		To_MILS_Integrity_Level_Type (handler.Parameter_List (1), obj.mils_integrity_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_component" then
		To_MILS_Component_Type (handler.Parameter_List (1), obj.mils_component, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_task" then
		To_MILS_Task_Type (handler.Parameter_List (1), obj.mils_task, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_compliant" then
		To_Boolean (handler.Parameter_List (1), obj.mils_compliant, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "access_memory_number" then
		To_Integer (handler.Parameter_List (1), obj.access_memory_number, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "maximum_number_of_memory_request_per_job" then
		To_Integer (handler.Parameter_List (1), obj.maximum_number_of_memory_request_per_job, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "seed" then
		To_Integer (handler.Parameter_List (1), obj.seed, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "predictable" then
		To_Boolean (handler.Parameter_List (1), obj.predictable, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "period" then
		To_Integer (handler.Parameter_List (1), obj.period, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "jitter" then
		To_Integer (handler.Parameter_List (1), obj.jitter, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "every" then
		To_Integer (handler.Parameter_List (1), obj.every, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "completion_time" then
		To_Integer (handler.Parameter_List (1), obj.completion_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "rate" then
		To_Double (handler.Parameter_List (1), obj.rate, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "core" then
		obj.core := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "executing" then
		To_Boolean (handler.Parameter_List (1), obj.executing, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "job_capacity" then
		To_Integer (handler.Parameter_List (1), obj.job_capacity, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "job_duration" then
		To_Integer (handler.Parameter_List (1), obj.job_duration, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "job_release" then
		To_Integer (handler.Parameter_List (1), obj.job_release, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "job_deadline" then
		To_Integer (handler.Parameter_List (1), obj.job_deadline, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Run_Server_Primal_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.task_type := Tasks_Type'first;
	obj.cpu_name := empty_string;
	obj.address_space_name := empty_string;
	obj.core_name := empty_string;
	obj.capacity_model := Execution_Unit_Model_Type'first;
	obj.capacity := 0;
	obj.energy_consumption := 0;
	obj.deadline := 0;
	obj.start_time := 0;
	obj.priority := 0;
	obj.blocking_time := 0;
	obj.policy := Policies'first;
	obj.text_memory_size := 0;
	obj.text_memory_start_address := 0;
	obj.stack_memory_size := 0;
	obj.criticality := 0;
	obj.context_switch_overhead := 0;
	obj.cfg_name := empty_string;
	obj.cfg_relocatable := false;
	obj.cache_access_profile_name := empty_string;
	obj.mils_confidentiality_level := MILS_Confidentiality_Level_Type'first;
	obj.mils_integrity_level := MILS_Integrity_Level_Type'first;
	obj.mils_component := MILS_Component_Type'first;
	obj.mils_task := MILS_Task_Type'first;
	obj.mils_compliant := false;
	obj.access_memory_number := 0;
	obj.maximum_number_of_memory_request_per_job := 0;
	obj.seed := 0;
	obj.predictable := false;
	obj.period := 0;
	obj.jitter := 0;
	obj.every := 0;
	obj.completion_time := 0;
	obj.rate := 0.0;
	obj.core := empty_string;
	obj.executing := false;
	obj.job_capacity := 0;
	obj.job_duration := 0;
	obj.job_release := 0;
	obj.job_deadline := 0;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Run_Server_Primal_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "task_type" then
		To_Tasks_Type (handler.Parameter_List (1), obj.task_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cpu_name" then
		obj.cpu_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "address_space_name" then
		obj.address_space_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "core_name" then
		obj.core_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "capacity_model" then
		To_Execution_Unit_Model_Type (handler.Parameter_List (1), obj.capacity_model, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "capacity" then
		To_Integer (handler.Parameter_List (1), obj.capacity, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "energy_consumption" then
		To_Integer (handler.Parameter_List (1), obj.energy_consumption, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "deadline" then
		To_Integer (handler.Parameter_List (1), obj.deadline, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "start_time" then
		To_Integer (handler.Parameter_List (1), obj.start_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "priority" then
		To_Integer (handler.Parameter_List (1), obj.priority, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "blocking_time" then
		To_Integer (handler.Parameter_List (1), obj.blocking_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "policy" then
		To_Policies (handler.Parameter_List (1), obj.policy, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "text_memory_size" then
		To_Integer (handler.Parameter_List (1), obj.text_memory_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "text_memory_start_address" then
		To_Integer (handler.Parameter_List (1), obj.text_memory_start_address, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "stack_memory_size" then
		To_Integer (handler.Parameter_List (1), obj.stack_memory_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "criticality" then
		To_Integer (handler.Parameter_List (1), obj.criticality, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "context_switch_overhead" then
		To_Integer (handler.Parameter_List (1), obj.context_switch_overhead, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cfg_name" then
		obj.cfg_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "cfg_relocatable" then
		To_Boolean (handler.Parameter_List (1), obj.cfg_relocatable, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cache_access_profile_name" then
		obj.cache_access_profile_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "mils_confidentiality_level" then
		To_MILS_Confidentiality_Level_Type (handler.Parameter_List (1), obj.mils_confidentiality_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_integrity_level" then
		To_MILS_Integrity_Level_Type (handler.Parameter_List (1), obj.mils_integrity_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_component" then
		To_MILS_Component_Type (handler.Parameter_List (1), obj.mils_component, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_task" then
		To_MILS_Task_Type (handler.Parameter_List (1), obj.mils_task, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_compliant" then
		To_Boolean (handler.Parameter_List (1), obj.mils_compliant, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "access_memory_number" then
		To_Integer (handler.Parameter_List (1), obj.access_memory_number, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "maximum_number_of_memory_request_per_job" then
		To_Integer (handler.Parameter_List (1), obj.maximum_number_of_memory_request_per_job, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "seed" then
		To_Integer (handler.Parameter_List (1), obj.seed, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "predictable" then
		To_Boolean (handler.Parameter_List (1), obj.predictable, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "period" then
		To_Integer (handler.Parameter_List (1), obj.period, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "jitter" then
		To_Integer (handler.Parameter_List (1), obj.jitter, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "every" then
		To_Integer (handler.Parameter_List (1), obj.every, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "completion_time" then
		To_Integer (handler.Parameter_List (1), obj.completion_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "rate" then
		To_Double (handler.Parameter_List (1), obj.rate, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "core" then
		obj.core := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "executing" then
		To_Boolean (handler.Parameter_List (1), obj.executing, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "job_capacity" then
		To_Integer (handler.Parameter_List (1), obj.job_capacity, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "job_duration" then
		To_Integer (handler.Parameter_List (1), obj.job_duration, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "job_release" then
		To_Integer (handler.Parameter_List (1), obj.job_release, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "job_deadline" then
		To_Integer (handler.Parameter_List (1), obj.job_deadline, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Run_Server_Dual_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
	obj.task_type := Tasks_Type'first;
	obj.cpu_name := empty_string;
	obj.address_space_name := empty_string;
	obj.core_name := empty_string;
	obj.capacity_model := Execution_Unit_Model_Type'first;
	obj.capacity := 0;
	obj.energy_consumption := 0;
	obj.deadline := 0;
	obj.start_time := 0;
	obj.priority := 0;
	obj.blocking_time := 0;
	obj.policy := Policies'first;
	obj.text_memory_size := 0;
	obj.text_memory_start_address := 0;
	obj.stack_memory_size := 0;
	obj.criticality := 0;
	obj.context_switch_overhead := 0;
	obj.cfg_name := empty_string;
	obj.cfg_relocatable := false;
	obj.cache_access_profile_name := empty_string;
	obj.mils_confidentiality_level := MILS_Confidentiality_Level_Type'first;
	obj.mils_integrity_level := MILS_Integrity_Level_Type'first;
	obj.mils_component := MILS_Component_Type'first;
	obj.mils_task := MILS_Task_Type'first;
	obj.mils_compliant := false;
	obj.access_memory_number := 0;
	obj.maximum_number_of_memory_request_per_job := 0;
	obj.seed := 0;
	obj.predictable := false;
	obj.period := 0;
	obj.jitter := 0;
	obj.every := 0;
	obj.completion_time := 0;
	obj.rate := 0.0;
	obj.core := empty_string;
	obj.executing := false;
	obj.job_capacity := 0;
	obj.job_duration := 0;
	obj.job_release := 0;
	obj.job_deadline := 0;
	obj.primal_server := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Run_Server_Dual_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is 
begin
	if Get_Length (Atts) > 0 then
		if To_String (To_Lower (Qname)) = "primal_server" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.primal_server := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Run_Server_Dual_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "task_type" then
		To_Tasks_Type (handler.Parameter_List (1), obj.task_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cpu_name" then
		obj.cpu_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "address_space_name" then
		obj.address_space_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "core_name" then
		obj.core_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "capacity_model" then
		To_Execution_Unit_Model_Type (handler.Parameter_List (1), obj.capacity_model, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "capacity" then
		To_Integer (handler.Parameter_List (1), obj.capacity, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "energy_consumption" then
		To_Integer (handler.Parameter_List (1), obj.energy_consumption, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "deadline" then
		To_Integer (handler.Parameter_List (1), obj.deadline, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "start_time" then
		To_Integer (handler.Parameter_List (1), obj.start_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "priority" then
		To_Integer (handler.Parameter_List (1), obj.priority, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "blocking_time" then
		To_Integer (handler.Parameter_List (1), obj.blocking_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "policy" then
		To_Policies (handler.Parameter_List (1), obj.policy, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "text_memory_size" then
		To_Integer (handler.Parameter_List (1), obj.text_memory_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "text_memory_start_address" then
		To_Integer (handler.Parameter_List (1), obj.text_memory_start_address, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "stack_memory_size" then
		To_Integer (handler.Parameter_List (1), obj.stack_memory_size, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "criticality" then
		To_Integer (handler.Parameter_List (1), obj.criticality, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "context_switch_overhead" then
		To_Integer (handler.Parameter_List (1), obj.context_switch_overhead, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cfg_name" then
		obj.cfg_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "cfg_relocatable" then
		To_Boolean (handler.Parameter_List (1), obj.cfg_relocatable, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "cache_access_profile_name" then
		obj.cache_access_profile_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "mils_confidentiality_level" then
		To_MILS_Confidentiality_Level_Type (handler.Parameter_List (1), obj.mils_confidentiality_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_integrity_level" then
		To_MILS_Integrity_Level_Type (handler.Parameter_List (1), obj.mils_integrity_level, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_component" then
		To_MILS_Component_Type (handler.Parameter_List (1), obj.mils_component, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_task" then
		To_MILS_Task_Type (handler.Parameter_List (1), obj.mils_task, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "mils_compliant" then
		To_Boolean (handler.Parameter_List (1), obj.mils_compliant, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "access_memory_number" then
		To_Integer (handler.Parameter_List (1), obj.access_memory_number, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "maximum_number_of_memory_request_per_job" then
		To_Integer (handler.Parameter_List (1), obj.maximum_number_of_memory_request_per_job, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "seed" then
		To_Integer (handler.Parameter_List (1), obj.seed, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "predictable" then
		To_Boolean (handler.Parameter_List (1), obj.predictable, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "period" then
		To_Integer (handler.Parameter_List (1), obj.period, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "jitter" then
		To_Integer (handler.Parameter_List (1), obj.jitter, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "every" then
		To_Integer (handler.Parameter_List (1), obj.every, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "completion_time" then
		To_Integer (handler.Parameter_List (1), obj.completion_time, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "rate" then
		To_Double (handler.Parameter_List (1), obj.rate, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "core" then
		obj.core := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "executing" then
		To_Boolean (handler.Parameter_List (1), obj.executing, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "job_capacity" then
		To_Integer (handler.Parameter_List (1), obj.job_capacity, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "job_duration" then
		To_Integer (handler.Parameter_List (1), obj.job_duration, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "job_release" then
		To_Integer (handler.Parameter_List (1), obj.job_release, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "job_deadline" then
		To_Integer (handler.Parameter_List (1), obj.job_deadline, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Task_Node_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.Id := empty_string;
	obj.TaskRef := empty_string;
	obj.Kind := Tasks_Type'first;
	obj.Proc := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Task_Node_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is 
begin
	if Get_Length (Atts) > 0 then
		if To_String (To_Lower (Qname)) = "taskref" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.TaskRef := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
		if To_String (To_Lower (Qname)) = "proc" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.Proc := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Task_Node_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "id" then
		obj.Id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "kind" then
		To_Tasks_Type (handler.Parameter_List (1), obj.Kind, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Time_Triggered_Communication_Edge_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.Id := empty_string;
	obj.Node_1 := empty_string;
	obj.Node_2 := empty_string;
	obj.Timing_Property := Time_Triggered_Communication_Timing_Property_Type'first;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Time_Triggered_Communication_Edge_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "id" then
		obj.Id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "node_1" then
		obj.Node_1 := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "node_2" then
		obj.Node_2 := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "timing_property" then
		To_Time_Triggered_Communication_Timing_Property_Type (handler.Parameter_List (1), obj.Timing_Property, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Resource_Edge_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.Id := empty_string;
	obj.Node_1 := empty_string;
	obj.Node_2 := empty_string;
	obj.Resource_Dependency_Resource := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Resource_Edge_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is 
begin
	if Get_Length (Atts) > 0 then
		if To_String (To_Lower (Qname)) = "resource_dependency_resource" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.Resource_Dependency_Resource := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Resource_Edge_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "id" then
		obj.Id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "node_1" then
		obj.Node_1 := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "node_2" then
		obj.Node_2 := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Precedence_Edge_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.Id := empty_string;
	obj.Node_1 := empty_string;
	obj.Node_2 := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Precedence_Edge_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "id" then
		obj.Id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "node_1" then
		obj.Node_1 := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "node_2" then
		obj.Node_2 := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Communication_Edge_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.Id := empty_string;
	obj.Node_1 := empty_string;
	obj.Node_2 := empty_string;
	obj.Communication_Dependency_Object := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Communication_Edge_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is 
begin
	if Get_Length (Atts) > 0 then
		if To_String (To_Lower (Qname)) = "communication_dependency_object" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.Communication_Dependency_Object := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Communication_Edge_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "id" then
		obj.Id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "node_1" then
		obj.Node_1 := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "node_2" then
		obj.Node_2 := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Buffer_Edge_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.Id := empty_string;
	obj.Node_1 := empty_string;
	obj.Node_2 := empty_string;
	obj.Buffer_Dependency_Object := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Buffer_Edge_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is 
begin
	if Get_Length (Atts) > 0 then
		if To_String (To_Lower (Qname)) = "buffer_dependency_object" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.Buffer_Dependency_Object := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Buffer_Edge_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "id" then
		obj.Id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "node_1" then
		obj.Node_1 := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "node_2" then
		obj.Node_2 := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Generic_Statement_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.statement_type := Statements_Type'first;
	obj.line_number := 0;
	obj.file_name := empty_string;
	obj.next_statement := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Generic_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is 
begin
	if Get_Length (Atts) > 0 then
		if To_String (To_Lower (Qname)) = "next_statement" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.next_statement := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Generic_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "statement_type" then
		To_Statements_Type (handler.Parameter_List (1), obj.statement_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "line_number" then
		To_Integer (handler.Parameter_List (1), obj.line_number, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "file_name" then
		obj.file_name := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Nop_Statement_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.statement_type := Statements_Type'first;
	obj.line_number := 0;
	obj.file_name := empty_string;
	obj.next_statement := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Nop_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is 
begin
	if Get_Length (Atts) > 0 then
		if To_String (To_Lower (Qname)) = "next_statement" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.next_statement := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Nop_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "statement_type" then
		To_Statements_Type (handler.Parameter_List (1), obj.statement_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "line_number" then
		To_Integer (handler.Parameter_List (1), obj.line_number, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "file_name" then
		obj.file_name := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Exit_Statement_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.statement_type := Statements_Type'first;
	obj.line_number := 0;
	obj.file_name := empty_string;
	obj.next_statement := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Exit_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is 
begin
	if Get_Length (Atts) > 0 then
		if To_String (To_Lower (Qname)) = "next_statement" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.next_statement := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Exit_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "statement_type" then
		To_Statements_Type (handler.Parameter_List (1), obj.statement_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "line_number" then
		To_Integer (handler.Parameter_List (1), obj.line_number, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "file_name" then
		obj.file_name := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Put_Statement_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.statement_type := Statements_Type'first;
	obj.line_number := 0;
	obj.file_name := empty_string;
	obj.next_statement := empty_string;
	obj.put_from := empty_string;
	obj.put_to := empty_string;
	obj.expression_to_be_displayed := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Put_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is 
begin
	if Get_Length (Atts) > 0 then
		if To_String (To_Lower (Qname)) = "next_statement" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.next_statement := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
		if To_String (To_Lower (Qname)) = "put_from" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.put_from := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
		if To_String (To_Lower (Qname)) = "put_to" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.put_to := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
		if To_String (To_Lower (Qname)) = "expression_to_be_displayed" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.expression_to_be_displayed := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Put_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "statement_type" then
		To_Statements_Type (handler.Parameter_List (1), obj.statement_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "line_number" then
		To_Integer (handler.Parameter_List (1), obj.line_number, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "file_name" then
		obj.file_name := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out If_Statement_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.statement_type := Statements_Type'first;
	obj.line_number := 0;
	obj.file_name := empty_string;
	obj.next_statement := empty_string;
	obj.bool_expression := empty_string;
	obj.else_statement := empty_string;
	obj.then_statement := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out If_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is 
begin
	if Get_Length (Atts) > 0 then
		if To_String (To_Lower (Qname)) = "next_statement" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.next_statement := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
		if To_String (To_Lower (Qname)) = "bool_expression" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.bool_expression := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
		if To_String (To_Lower (Qname)) = "else_statement" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.else_statement := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
		if To_String (To_Lower (Qname)) = "then_statement" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.then_statement := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out If_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "statement_type" then
		To_Statements_Type (handler.Parameter_List (1), obj.statement_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "line_number" then
		To_Integer (handler.Parameter_List (1), obj.line_number, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "file_name" then
		obj.file_name := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Assign_Statement_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.statement_type := Statements_Type'first;
	obj.line_number := 0;
	obj.file_name := empty_string;
	obj.next_statement := empty_string;
	obj.lvalue := empty_string;
	obj.rvalue := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Assign_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is 
begin
	if Get_Length (Atts) > 0 then
		if To_String (To_Lower (Qname)) = "next_statement" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.next_statement := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
		if To_String (To_Lower (Qname)) = "lvalue" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.lvalue := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
		if To_String (To_Lower (Qname)) = "rvalue" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.rvalue := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Assign_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "statement_type" then
		To_Statements_Type (handler.Parameter_List (1), obj.statement_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "line_number" then
		To_Integer (handler.Parameter_List (1), obj.line_number, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "file_name" then
		obj.file_name := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Clock_Statement_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.statement_type := Statements_Type'first;
	obj.line_number := 0;
	obj.file_name := empty_string;
	obj.next_statement := empty_string;
	obj.lvalue := empty_string;
	obj.rvalue := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Clock_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is 
begin
	if Get_Length (Atts) > 0 then
		if To_String (To_Lower (Qname)) = "next_statement" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.next_statement := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
		if To_String (To_Lower (Qname)) = "lvalue" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.lvalue := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
		if To_String (To_Lower (Qname)) = "rvalue" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.rvalue := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Clock_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "statement_type" then
		To_Statements_Type (handler.Parameter_List (1), obj.statement_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "line_number" then
		To_Integer (handler.Parameter_List (1), obj.line_number, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "file_name" then
		obj.file_name := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Delete_Precedence_Statement_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.statement_type := Statements_Type'first;
	obj.line_number := 0;
	obj.file_name := empty_string;
	obj.next_statement := empty_string;
	obj.Delete_Source := empty_string;
	obj.Delete_Sink := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Delete_Precedence_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is 
begin
	if Get_Length (Atts) > 0 then
		if To_String (To_Lower (Qname)) = "next_statement" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.next_statement := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Delete_Precedence_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "statement_type" then
		To_Statements_Type (handler.Parameter_List (1), obj.statement_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "line_number" then
		To_Integer (handler.Parameter_List (1), obj.line_number, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "file_name" then
		obj.file_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "delete_source" then
		obj.Delete_Source := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "delete_sink" then
		obj.Delete_Sink := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Add_Precedence_Statement_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.statement_type := Statements_Type'first;
	obj.line_number := 0;
	obj.file_name := empty_string;
	obj.next_statement := empty_string;
	obj.Add_Source := empty_string;
	obj.Add_Sink := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Add_Precedence_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is 
begin
	if Get_Length (Atts) > 0 then
		if To_String (To_Lower (Qname)) = "next_statement" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.next_statement := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Add_Precedence_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "statement_type" then
		To_Statements_Type (handler.Parameter_List (1), obj.statement_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "line_number" then
		To_Integer (handler.Parameter_List (1), obj.line_number, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "file_name" then
		obj.file_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "add_source" then
		obj.Add_Source := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "add_sink" then
		obj.Add_Sink := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out For_Statement_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.statement_type := Statements_Type'first;
	obj.line_number := 0;
	obj.file_name := empty_string;
	obj.next_statement := empty_string;
	obj.for_type := Table_Types'first;
	obj.included_statement := empty_string;
	obj.for_index := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out For_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is 
begin
	if Get_Length (Atts) > 0 then
		if To_String (To_Lower (Qname)) = "next_statement" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.next_statement := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
		if To_String (To_Lower (Qname)) = "included_statement" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.included_statement := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
		if To_String (To_Lower (Qname)) = "for_index" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.for_index := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out For_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "statement_type" then
		To_Statements_Type (handler.Parameter_List (1), obj.statement_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "line_number" then
		To_Integer (handler.Parameter_List (1), obj.line_number, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "file_name" then
		obj.file_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "for_type" then
		To_Table_Types (handler.Parameter_List (1), obj.for_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Return_Statement_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.statement_type := Statements_Type'first;
	obj.line_number := 0;
	obj.file_name := empty_string;
	obj.next_statement := empty_string;
	obj.return_value := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Return_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is 
begin
	if Get_Length (Atts) > 0 then
		if To_String (To_Lower (Qname)) = "next_statement" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.next_statement := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
		if To_String (To_Lower (Qname)) = "return_value" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.return_value := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Return_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "statement_type" then
		To_Statements_Type (handler.Parameter_List (1), obj.statement_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "line_number" then
		To_Integer (handler.Parameter_List (1), obj.line_number, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "file_name" then
		obj.file_name := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out While_Statement_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.statement_type := Statements_Type'first;
	obj.line_number := 0;
	obj.file_name := empty_string;
	obj.next_statement := empty_string;
	obj.included_statement := empty_string;
	obj.condition := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out While_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is 
begin
	if Get_Length (Atts) > 0 then
		if To_String (To_Lower (Qname)) = "next_statement" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.next_statement := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
		if To_String (To_Lower (Qname)) = "included_statement" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.included_statement := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
		if To_String (To_Lower (Qname)) = "condition" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.condition := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out While_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "statement_type" then
		To_Statements_Type (handler.Parameter_List (1), obj.statement_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "line_number" then
		To_Integer (handler.Parameter_List (1), obj.line_number, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "file_name" then
		obj.file_name := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Random_Initialize_Statement_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.statement_type := Statements_Type'first;
	obj.line_number := 0;
	obj.file_name := empty_string;
	obj.next_statement := empty_string;
	obj.lvalue := empty_string;
	obj.law := Laws_Type'first;
	obj.parameter1 := empty_string;
	obj.parameter2 := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Random_Initialize_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is 
begin
	if Get_Length (Atts) > 0 then
		if To_String (To_Lower (Qname)) = "next_statement" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.next_statement := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
		if To_String (To_Lower (Qname)) = "parameter1" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.parameter1 := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
		if To_String (To_Lower (Qname)) = "parameter2" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.parameter2 := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Random_Initialize_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "statement_type" then
		To_Statements_Type (handler.Parameter_List (1), obj.statement_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "line_number" then
		To_Integer (handler.Parameter_List (1), obj.line_number, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "file_name" then
		obj.file_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "lvalue" then
		obj.lvalue := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "law" then
		To_Laws_Type (handler.Parameter_List (1), obj.law, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out Set_Statement_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.statement_type := Statements_Type'first;
	obj.line_number := 0;
	obj.file_name := empty_string;
	obj.next_statement := empty_string;
	obj.set_id := empty_string;
	obj.set_value := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Set_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is 
begin
	if Get_Length (Atts) > 0 then
		if To_String (To_Lower (Qname)) = "next_statement" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.next_statement := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
		if To_String (To_Lower (Qname)) = "set_value" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.set_value := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Set_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "statement_type" then
		To_Statements_Type (handler.Parameter_List (1), obj.statement_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "line_number" then
		To_Integer (handler.Parameter_List (1), obj.line_number, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "file_name" then
		obj.file_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "set_id" then
		obj.set_id := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Subprogram_Statement_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.statement_type := Statements_Type'first;
	obj.line_number := 0;
	obj.file_name := empty_string;
	obj.next_statement := empty_string;
	obj.included_statement := empty_string;
	obj.is_a_function := false;
	obj.subprogram_name := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Subprogram_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is 
begin
	if Get_Length (Atts) > 0 then
		if To_String (To_Lower (Qname)) = "next_statement" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.next_statement := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
		if To_String (To_Lower (Qname)) = "included_statement" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.included_statement := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Subprogram_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "statement_type" then
		To_Statements_Type (handler.Parameter_List (1), obj.statement_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "line_number" then
		To_Integer (handler.Parameter_List (1), obj.line_number, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "file_name" then
		obj.file_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "is_a_function" then
		To_Boolean (handler.Parameter_List (1), obj.is_a_function, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "subprogram_name" then
		obj.subprogram_name := handler.Parameter_List (1);
	end if;
end End_Element;

procedure Initialize(obj : out Subprogram_Call_Statement_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.statement_type := Statements_Type'first;
	obj.line_number := 0;
	obj.file_name := empty_string;
	obj.next_statement := empty_string;
	obj.is_a_function := false;
	obj.called_subprogram := empty_string;
	obj.return_value := empty_string;
end Initialize;

procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	obj : in out Subprogram_Call_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class) is 
begin
	if Get_Length (Atts) > 0 then
		if To_String (To_Lower (Qname)) = "next_statement" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.next_statement := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
		if To_String (To_Lower (Qname)) = "called_subprogram" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.called_subprogram := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
		if To_String (To_Lower (Qname)) = "return_value" then
			for J in 0 .. Get_Length (Atts) - 1 loop
				if To_String (To_Lower (Get_Qname (Atts, J))) = "ref" then
					obj.return_value := To_Unbounded_String (Get_Value (Atts, J));
				end if;
			end loop;
		end if;
	end if;
end Start_Element;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Subprogram_Call_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "statement_type" then
		To_Statements_Type (handler.Parameter_List (1), obj.statement_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "line_number" then
		To_Integer (handler.Parameter_List (1), obj.line_number, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "file_name" then
		obj.file_name := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "is_a_function" then
		To_Boolean (handler.Parameter_List (1), obj.is_a_function, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;
end End_Element;

procedure Initialize(obj : out CFG_io) is 
begin 
	obj.cheddar_private_id := empty_string;
	obj.object_type := Objects_Type'first;
	obj.name := empty_string;
end Initialize;

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out CFG_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name    : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "") is 
begin


	if To_String (To_Lower (Qname)) = "cheddar_private_id" then
		obj.cheddar_private_id := handler.Parameter_List (1);
	end if;

	if To_String (To_Lower (Qname)) = "object_type" then
		To_Objects_Type (handler.Parameter_List (1), obj.object_type, Handler.Ok);
		if not Handler.Ok then
			Put_Line ("Warning : Error on data type From " & To_String (Handler.Locator));
		end if;
	end if;

	if To_String (To_Lower (Qname)) = "name" then
		obj.name := handler.Parameter_List (1);
	end if;
end End_Element;
end xml_architecture_io;
