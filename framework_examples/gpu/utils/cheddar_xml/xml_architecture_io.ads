
------------------------------------------------------------------------------
------------------------------------------------------------------------------
--  This source file was automatically generated by Platypus
--  see http://dossen.univ-brest.fr/apl
-- 
--  Any modification of this file will be lost. 
--  Please see the "platypus" directory instead : it contains the Cheddar's
--  model and its meta-model. 
------------------------------------------------------------------------------
 
------------------------------------------------------------------------------
-- Cheddar is a free real time scheduling tool.
-- This program provides services to automatically check temporal constraints
-- of real time tasks.
--
-- Copyright (C) 2002-2014   Frank Singhoff
-- Cheddar is developed by the LAB-STICC Team, University of Brest
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation; either version 2 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
--
--
-- Contact : cheddar@listes.univ-brest.fr
-- 	To post to this mailing list, you must be subscribed
-- 	(see http//beru.univ-brest.fr/~singhoff/cheddar for details)
--
------------------------------------------------------------------------------
------------------------------------------------------------------------------
with Networks;
use Networks;

with Unicode;
use Unicode;

with Unicode.CES;
use Unicode.CES;

with xml_generic_parsers;
use xml_generic_parsers;

with Strings;
use Strings;

with Unbounded_Strings;
use Unbounded_Strings;

use unbounded_strings.Unbounded_String_List_Package;

with call_framework_interface;
use call_framework_interface;

with Debug;
use Debug;

with Sections;
use Sections;

with Framework_Config;
use Framework_Config;

use Framework_Config.Priority_Io;

with id_generators;
use id_generators;

with Objects;
use Objects;

with Statements;
use Statements;

with Automaton;
use Automaton;

use automaton.Transition_Lists_Package;

use automaton.State_Lists_Package;

with Convert_Strings;

with Convert_Unbounded_Strings;

with text_io;
use text_io;

with Ada.Finalization;

with Unchecked_Deallocation;

with Primitive_XML_Strings;
use Primitive_XML_Strings;

with standards_io;
use standards_io;

use standards_io.double_io;

use standards_io.boolean_io;

use standards_io.natural_io;

with Processor_Interface;
use Processor_Interface;

with CFG_Nodes;
use CFG_Nodes;

use CFG_Nodes.CFG_Nodes_Table_Package;

with Tables;

with Expressions;
use Expressions;

with Lists;

with Indexed_Tables;

with Event_Analyzers;
use Event_Analyzers;

with ARINC_653_Schema;
use ARINC_653_Schema;

with Offsets;
use Offsets;

use offsets.Offsets_Table_Package;

with Scheduling_Errors;
use Scheduling_Errors;

with Data_Accesses;
use Data_Accesses;

with Scheduler;
use Scheduler;

with Scheduler_Interface;
use Scheduler_Interface;

with Sets;

with Generic_Graph;
use Generic_Graph;

with Access_Lists;

with Execution_Units;
use Execution_Units;

with Simulations;
use Simulations;

with Caches;
use Caches;

with Resources;
use Resources;

with Tasks;
use Tasks;

use Tasks.Generic_Task_List_Package;

with Task_Groups;
use Task_Groups;

with Parameters;
use Parameters;

use Parameters.Framework_Parameters_Table_Package;

use parameters.User_Defined_Parameters_Table_Package;

with Time_Unit_Events;
use Time_Unit_Events;

use Time_Unit_Events.Time_Unit_Package;

with Messages;
use Messages;

with Buffers;
use Buffers;

use Buffers.Buffer_Roles_Package;

with natural_util;
use natural_util;

with CFG_Edges;
use CFG_Edges;

use CFG_Edges.CFG_Edges_Table_Package;

with MILS_Security;
use MILS_Security;

with Batteries;
use Batteries;

with Xml_Architecture_Parser_Interface;
use Xml_Architecture_Parser_Interface;

with Processors;
use Processors;

use Processors.Generic_Processor_List_Package;

with Core_Units;
use Core_Units;

with Memories;
use Memories;

use Memories.Generic_Memory_List_Package;

with Basic_Blocks;
use Basic_Blocks;

with Editor_Config;
use Editor_Config;

with Dependencies;
use Dependencies;

with DFG_Nodes;
use DFG_Nodes;

with CFGs;
use CFGs;

with Interpreter;
use Interpreter;

with Scheduling_Analysis;
use Scheduling_Analysis;

with Task_Set;
use Task_Set;

with Double_Util;
use Double_Util;

with Queueing_Systems;
use Queueing_Systems;

with Address_Spaces;
use Address_Spaces;

with Multiprocessor_Services_Interface;
use Multiprocessor_Services_Interface;

with Laws;
use Laws;

with Partitioning_Algorithms;
use Partitioning_Algorithms;

with DP_Graph;
use DP_Graph;

with AADL_Parser_Interface;
use AADL_Parser_Interface;

with Applicability_Constraints_Main_Structure;
use Applicability_Constraints_Main_Structure;

with Systems;
use Systems;

with AADL_Config;
use AADL_Config;

with Sax.Readers;
use Sax.Readers;

with Sax.Attributes;
use Sax.Attributes;

with Sax.Locators;
use Sax.Locators;

with Sax.Exceptions;
use Sax.Exceptions;

with Ada.Text_IO;
use Ada.Text_IO;

with doubles; use doubles;

with Ada.Strings.Unbounded;
use Ada.Strings.Unbounded;

with ada.strings.unbounded.text_io;
use ada.strings.unbounded.text_io;

package xml_architecture_io is

-- Attributes of the discriminated types


type PortMappingType_Choice_io is record
	type_of_PortMappingType_Choice : PortMappingType_Choice_Type;
end record;


type Parameter_io is record
	type_of_parameter : Parameter_Type;
	parameter_name : Unbounded_String;
	boolean_value : Boolean;
	integer_value : Integer;
	double_value : Double;
	string_value : Unbounded_String;
end record;


type Time_Unit_Event_io is record
	type_of_event : Time_Unit_Event_Type;
	start_task : Unbounded_String;
	end_task : Unbounded_String;
	write_buffer : Unbounded_String;
	write_task : Unbounded_String;
	write_size : Integer;
	write_buffer_current_data_size : Integer;
	read_buffer : Unbounded_String;
	read_task : Unbounded_String;
	read_size : Integer;
	read_buffer_current_data_size : Integer;
	overflow_buffer : Unbounded_String;
	overflow_task : Unbounded_String;
	overflow_write_size : Integer;
	overflow_buffer_current_data_size : Integer;
	underflow_buffer : Unbounded_String;
	underflow_task : Unbounded_String;
	underflow_read_size : Integer;
	underflow_buffer_current_data_size : Integer;
	switched_task : Unbounded_String;
	running_core : Unbounded_String;
	running_task : Unbounded_String;
	current_priority : Integer;
	CRPD : Integer;
	cache_state : Unbounded_String;
	activation_task : Unbounded_String;
	allocate_task : Unbounded_String;
	allocate_resource : Unbounded_String;
	release_task : Unbounded_String;
	release_resource : Unbounded_String;
	wait_for_resource_task : Unbounded_String;
	wait_for_resource : Unbounded_String;
	send_task : Unbounded_String;
	send_message : Unbounded_String;
	receive_task : Unbounded_String;
	receive_message : Unbounded_String;
	wait_for_memory_task : Unbounded_String;
	wait_for_cache : Unbounded_String;
	activation_address_space : Unbounded_String;
	duration : Integer;
	preempted_task : Unbounded_String;
	preempting_task : Unbounded_String;
	evicted_ucbs : Integer;
	missed_deadline_task : Unbounded_String;
end record;


type Dependency_io is record
	type_of_dependency : Dependency_Type;
	precedence_sink : Unbounded_String;
	precedence_source : Unbounded_String;
	buffer_dependent_task : Unbounded_String;
	buffer_orientation : Orientation_Dependency_Type;
	buffer_dependency_object : Unbounded_String;
	asynchronous_communication_dependent_task : Unbounded_String;
	asynchronous_communication_orientation : Orientation_Dependency_Type;
	asynchronous_communication_dependency_object : Unbounded_String;
	asynchronous_communication_protocol_property : Asynchronous_Communication_Protocol_Property_Type;
	time_triggered_communication_sink : Unbounded_String;
	time_triggered_communication_source : Unbounded_String;
	time_triggered_timing_property : Time_Triggered_Communication_Timing_Property_Type;
	resource_dependency_resource : Unbounded_String;
	resource_dependency_task : Unbounded_String;
	remote_procedure_call_client : Unbounded_String;
	remote_procedure_call_server : Unbounded_String;
	black_board_dependent_task : Unbounded_String;
	black_board_orientation : Orientation_Dependency_Type;
	black_board_dependency_object : Unbounded_String;
end record;


procedure Start_Element(
	Handler: in out Xml_Generic_Parser;
	ref : in out unbounded_string;
	id : in out unbounded_string;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out PortMappingType_Choice_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Parameter_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Time_Unit_Event_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Time_Unit_Event_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Dependency_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Dependency_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Initialize(obj : out PortMappingType_Choice_io);
procedure Initialize(obj : out Parameter_io);
procedure Initialize(obj : out Time_Unit_Event_io);
procedure Initialize(obj : out Dependency_io);

-- Attributes of the parsed entities


type Automaton_Status_io is record
	current_state : Unbounded_String;
end record;


type Transition_Status_io is record
	code : Unbounded_String;
	status : Status_Type;
	wakeup_time : Integer;
end record;


type Offset_Type_io is record
	offset_value : Integer;
	activation : Integer;
end record;


type Scheduling_Error_Record_io is record
	error_type : Error_Type_Type;
	time : Integer;
	error_action : Error_Action_Type;
	user_defined_action : Unbounded_String;
end record;


type Data_Access_Record_io is record
	Access_Type : Data_Access_Type;
	Memory_Address : Integer;
	Time_Constraint_Name : Unbounded_String;
	Size : Integer;
end record;


type Critical_Section_io is record
	task_synchronization : Resources_Synchronization_Type;
	task_begin : Integer;
	task_end : Integer;
end record;


type DFG_Cfg_Type_io is record
	Nb_Blocks : Integer;
end record;


type DFG_Def_Use_Association_io is record
	Def_Variable : Unbounded_String;
	Def_Statement : Unbounded_String;
	Use_Statement : Unbounded_String;
end record;


type DFG_Var_Association_io is record
	Def_Variable : Unbounded_String;
	Statement : Unbounded_String;
end record;


type DFG_Def_Use_Info_io is record	null;
end record;


type Buffer_Size_Item_io is record
	time : Integer;
	size : Integer;
end record;


type Density_Item_io is record
	response_time : Integer;
	probability : Double;
end record;


type Deadlock_Item_io is record
	time : Integer;
	task_name : Unbounded_String;
	resource_name : Unbounded_String;
end record;


type Priority_Inversion_Item_io is record
	start_time : Integer;
	end_time : Integer;
	task_name : Unbounded_String;
	resource_name : Unbounded_String;
end record;


type Relative_Priority_Record_io is record
	higher_priority_task : Unbounded_String;
	hpt_index : Integer;
	lower_priority_task : Unbounded_String;
	lpt_index : Integer;
end record;


type Ceiling_Priority_Record_io is record
	resource_name : Unbounded_String;
	ceiling_priority : Integer;
end record;


type Buffer_Role_io is record
	the_role : Buffer_Role_Type;
	size : Integer;
	time : Integer;
	timeout : Integer;
	amplitude_function : Unbounded_String;
end record;


type Position_io is record
	X : Integer;
	Y : Integer;
end record;


type Memory_Record_io is record
	size : Integer;
	access_latency : Integer;
	memory_category : Memory_Type;
	shared_access_latency : Integer;
	private_access_latency : Integer;
	l_rw_inter : Integer;
	l_act_inter : Integer;
	l_pre_inter : Integer;
	n_reorder : Integer;
	l_conhit : Integer;
	l_conf : Integer;
	nb_bank : Integer;
	partition_mode : Boolean;
end record;


type Scheduling_Result_io is record
	scheduling_msg : Unbounded_String;
	has_error : Boolean;
	error_msg : Unbounded_String;
end record;


type Binding_Record_Type_io is record
	cpu_name : Unbounded_String;
	address_space_name : Unbounded_String;
end record;


type Applicability_Constraint_io is record
	Name : Unbounded_String;
	Result : Boolean;
end record;


type Applicability_Constraint_Case_io is record
	Name : Unbounded_String;
	Feasibility_Test_Names : Unbounded_String;
end record;


type All_Cases_Structure_io is record	null;
end record;


type Scheduling_Parameters_io is record
	scheduler_type : Schedulers_Type;
	quantum : Integer;
	preemptive_type : Preemptives_Type;
	automaton_name : Unbounded_String;
	capacity : Integer;
	period : Integer;
	threshold : Integer;
	priority : Integer;
	user_defined_scheduler_source : Unbounded_String;
	user_defined_scheduler_source_file_name : Unbounded_String;
	user_defined_scheduler_protocol_name : Unbounded_String;
	start_time : Integer;
end record;


type Framework_Request_io is record
	statement : Framework_Statement_Type;
	target : Unbounded_String;
end record;


type Framework_Response_io is record
	title : Unbounded_String;
	text : Unbounded_String;
end record;



procedure Initialize(obj : out Automaton_Status_io);
procedure Initialize(obj : out Transition_Status_io);
procedure Initialize(obj : out Offset_Type_io);
procedure Initialize(obj : out Scheduling_Error_Record_io);
procedure Initialize(obj : out Data_Access_Record_io);
procedure Initialize(obj : out Critical_Section_io);
procedure Initialize(obj : out DFG_Cfg_Type_io);
procedure Initialize(obj : out DFG_Def_Use_Association_io);
procedure Initialize(obj : out DFG_Var_Association_io);
procedure Initialize(obj : out DFG_Def_Use_Info_io);
procedure Initialize(obj : out Buffer_Size_Item_io);
procedure Initialize(obj : out Density_Item_io);
procedure Initialize(obj : out Deadlock_Item_io);
procedure Initialize(obj : out Priority_Inversion_Item_io);
procedure Initialize(obj : out Relative_Priority_Record_io);
procedure Initialize(obj : out Ceiling_Priority_Record_io);
procedure Initialize(obj : out Buffer_Role_io);
procedure Initialize(obj : out Position_io);
procedure Initialize(obj : out Memory_Record_io);
procedure Initialize(obj : out Scheduling_Result_io);
procedure Initialize(obj : out Binding_Record_Type_io);
procedure Initialize(obj : out Applicability_Constraint_io);
procedure Initialize(obj : out Applicability_Constraint_Case_io);
procedure Initialize(obj : out All_Cases_Structure_io);
procedure Initialize(obj : out Scheduling_Parameters_io);
procedure Initialize(obj : out Framework_Request_io);
procedure Initialize(obj : out Framework_Response_io);

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Automaton_Status_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Automaton_Status_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Transition_Status_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Transition_Status_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Offset_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Offset_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Scheduling_Error_Record_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Scheduling_Error_Record_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Data_Access_Record_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Data_Access_Record_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Critical_Section_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Critical_Section_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out DFG_Cfg_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out DFG_Cfg_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out DFG_Def_Use_Association_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out DFG_Def_Use_Association_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out DFG_Var_Association_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out DFG_Var_Association_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out DFG_Def_Use_Info_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out DFG_Def_Use_Info_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Buffer_Size_Item_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Buffer_Size_Item_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Density_Item_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Density_Item_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Deadlock_Item_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Deadlock_Item_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Priority_Inversion_Item_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Priority_Inversion_Item_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Relative_Priority_Record_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Relative_Priority_Record_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Ceiling_Priority_Record_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Ceiling_Priority_Record_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Buffer_Role_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Buffer_Role_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Position_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Position_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Memory_Record_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Memory_Record_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Scheduling_Result_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Scheduling_Result_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Binding_Record_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Binding_Record_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Applicability_Constraint_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Applicability_Constraint_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Applicability_Constraint_Case_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Applicability_Constraint_Case_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out All_Cases_Structure_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out All_Cases_Structure_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Scheduling_Parameters_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Scheduling_Parameters_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Framework_Request_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Framework_Request_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Framework_Response_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Framework_Response_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

type Generic_Section_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	section_type : Sections_Type;
	file_name : Unbounded_String;
end record;

type Computation_Section_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	section_type : Sections_Type;
	file_name : Unbounded_String;
	first_statement : Unbounded_String;
end record;

type Synchronization_Section_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	section_type : Sections_Type;
	file_name : Unbounded_String;
end record;

type CFG_Node_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	graph_type : CFG_Graph_Type;
	node_type : CFG_Node_Type;
end record;

type State_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	is_initial : Boolean;
end record;

type Synchronization_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	synchronization_type : Synchronizations_Type;
end record;

type Transition_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	from_state : Unbounded_String;
	to_state : Unbounded_String;
	guards : Unbounded_String;
	clocks : Unbounded_String;
	synchronization : Unbounded_String;
end record;

type Event_Analyzer_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	event_analyzer_source_file_name : Unbounded_String;
end record;

type ARINC_653_Object_io is record
	cheddar_private_id : Unbounded_String;
end record;

type Error_ID_Type_io is record
	cheddar_private_id : Unbounded_String;
	ErrorIdentifier : Unbounded_String;
	Description : Unbounded_String;
	PartitionAction : PartitionActionType;
	ModuleAction : ModuleActionType;
end record;

type Error_ID_Action_Type_io is record
	cheddar_private_id : Unbounded_String;
	ErrorIdentifier : Unbounded_String;
	Description : Unbounded_String;
	PartitionAction : PartitionActionType;
	ModuleAction : ModuleActionType;
end record;

type Error_ID_Level_Type_io is record
	cheddar_private_id : Unbounded_String;
	ErrorIdentifier : Unbounded_String;
	Description : Unbounded_String;
	PartitionAction : PartitionActionType;
	ModuleAction : ModuleActionType;
	ErrorLevel : ErrorLevelType;
	ErrorCode : ErrorCodeType;
end record;

type System_State_Entry_Type_io is record
	cheddar_private_id : Unbounded_String;
	SystemState : Unbounded_String;
	Description : Unbounded_String;
end record;

type SysHM_Ext_Type_io is record
	cheddar_private_id : Unbounded_String;
end record;

type System_HM_TableType_io is record
	cheddar_private_id : Unbounded_String;
end record;

type Mod_HM_Ext_Type_io is record
	cheddar_private_id : Unbounded_String;
end record;

type Module_HM_Type_io is record
	cheddar_private_id : Unbounded_String;
	ModuleCallback : Unbounded_String;
end record;

type PortExt_Type_io is record
	cheddar_private_id : Unbounded_String;
end record;

type PortType_io is record
	cheddar_private_id : Unbounded_String;
	Name : Unbounded_String;
	MaxMessageSize : Unbounded_String;
	Direction : DirectionType;
end record;

type SamplingPortType_io is record
	cheddar_private_id : Unbounded_String;
	Name : Unbounded_String;
	MaxMessageSize : Unbounded_String;
	Direction : DirectionType;
	RefreshRateSeconds : Double;
end record;

type ProcExt_Type_io is record
	cheddar_private_id : Unbounded_String;
end record;

type ProcessType_io is record
	cheddar_private_id : Unbounded_String;
	Name : Unbounded_String;
	StackSize : Unbounded_String;
end record;

type QueuingPortType_io is record
	cheddar_private_id : Unbounded_String;
	Name : Unbounded_String;
	MaxMessageSize : Unbounded_String;
	Direction : DirectionType;
	MaxNbMessages : Integer;
end record;

type PartitionExt_Type_io is record
	cheddar_private_id : Unbounded_String;
end record;

type PartitionType_io is record
	cheddar_private_id : Unbounded_String;
	PartitionIdentifier : Unbounded_String;
	PartitionName : Unbounded_String;
	Criticality : CriticalityType;
	SystemPartition : Boolean;
	EntryPoint : Unbounded_String;
end record;

type Memory_Requirements_io is record
	cheddar_private_id : Unbounded_String;
	regionName : Unbounded_String;
	memory_type : Unbounded_String;
	sizeBytes : Unbounded_String;
	physicalAddress : Unbounded_String;
	memoryAccess : Unbounded_String;
end record;

type Memory_Ext_Type_io is record
	cheddar_private_id : Unbounded_String;
end record;

type Partition_Memory_Element_io is record
	cheddar_private_id : Unbounded_String;
	PartitionIdentifier : Unbounded_String;
	PartitionName : Unbounded_String;
end record;

type Partition_Sched_Ext_Type_io is record
	cheddar_private_id : Unbounded_String;
end record;

type Window_Schedule_Element_io is record
	cheddar_private_id : Unbounded_String;
	WindowIdentifier : Unbounded_String;
	WindowStartSeconds : Double;
	WindowDurationSeconds : Double;
	PartitionPeriodStart : Boolean;
end record;

type Window_Sched_Ext_Type_io is record
	cheddar_private_id : Unbounded_String;
end record;

type Partition_Schedule_Element_io is record
	cheddar_private_id : Unbounded_String;
	PartitionIdentifier : Unbounded_String;
	PartitionName : Unbounded_String;
	PeriodSeconds : Double;
	PeriodDurationSeconds : Double;
end record;

type Module_Schedule_Type_io is record
	cheddar_private_id : Unbounded_String;
	MajorFrameSeconds : Double;
end record;

type Part_HM_Ext_Type_io is record
	cheddar_private_id : Unbounded_String;
end record;

type Partition_HM_Type_io is record
	cheddar_private_id : Unbounded_String;
	PartitionIdentifier : Unbounded_String;
	PartitionName : Unbounded_String;
	PartitionCallback : Unbounded_String;
end record;

type Pseudo_Partition_io is record
	cheddar_private_id : Unbounded_String;
	Name : Unbounded_String;
	PhysicalAddress : Unbounded_String;
	partition_procedure : Unbounded_String;
end record;

type Standard_Partition_io is record
	cheddar_private_id : Unbounded_String;
	PartitionIdentifier : Unbounded_String;
	PartitionName : Unbounded_String;
	PortName : Unbounded_String;
	PhysicalAddress : Unbounded_String;
end record;

type PortMap_Ext_Type_io is record
	cheddar_private_id : Unbounded_String;
end record;

type PortMappingType_io is record
	cheddar_private_id : Unbounded_String;
end record;

type Channel_io is record
	cheddar_private_id : Unbounded_String;
	ChannelIdentifier : Unbounded_String;
	ChannelName : Unbounded_String;
end record;

type ModExt_Type_io is record
	cheddar_private_id : Unbounded_String;
end record;

type ARINC_653_Module_io is record
	cheddar_private_id : Unbounded_String;
	ModuleName : Unbounded_String;
	ModuleVersion : Unbounded_String;
	ModuleId : Unbounded_String;
end record;

type Scheduling_Error_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	error_type : Error_Type_Type;
	time : Integer;
	error_action : Error_Action_Type;
	user_defined_action : Unbounded_String;
end record;

type Data_Access_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	Access_Type : Data_Access_Type;
	Memory_Address : Integer;
	Time_Constraint_Name : Unbounded_String;
	Size : Integer;
end record;

type Generic_Scheduler_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	scheduler_type : Schedulers_Type;
	quantum : Integer;
	preemptive_type : Preemptives_Type;
	automaton_name : Unbounded_String;
	capacity : Integer;
	period : Integer;
	threshold : Integer;
	priority : Integer;
	user_defined_scheduler_source : Unbounded_String;
	user_defined_scheduler_source_file_name : Unbounded_String;
	user_defined_scheduler_protocol_name : Unbounded_String;
	start_time : Integer;
end record;

type Aperiodic_Task_Server_Protocol_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	scheduler_type : Schedulers_Type;
	quantum : Integer;
	preemptive_type : Preemptives_Type;
	automaton_name : Unbounded_String;
	capacity : Integer;
	period : Integer;
	threshold : Integer;
	priority : Integer;
	user_defined_scheduler_source : Unbounded_String;
	user_defined_scheduler_source_file_name : Unbounded_String;
	user_defined_scheduler_protocol_name : Unbounded_String;
	start_time : Integer;
end record;

type Polling_Server_Protocol_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	scheduler_type : Schedulers_Type;
	quantum : Integer;
	preemptive_type : Preemptives_Type;
	automaton_name : Unbounded_String;
	capacity : Integer;
	period : Integer;
	threshold : Integer;
	priority : Integer;
	user_defined_scheduler_source : Unbounded_String;
	user_defined_scheduler_source_file_name : Unbounded_String;
	user_defined_scheduler_protocol_name : Unbounded_String;
	start_time : Integer;
end record;

type Deferred_Server_Protocol_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	scheduler_type : Schedulers_Type;
	quantum : Integer;
	preemptive_type : Preemptives_Type;
	automaton_name : Unbounded_String;
	capacity : Integer;
	period : Integer;
	threshold : Integer;
	priority : Integer;
	user_defined_scheduler_source : Unbounded_String;
	user_defined_scheduler_source_file_name : Unbounded_String;
	user_defined_scheduler_protocol_name : Unbounded_String;
	start_time : Integer;
end record;

type Sporadic_Server_Protocol_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	scheduler_type : Schedulers_Type;
	quantum : Integer;
	preemptive_type : Preemptives_Type;
	automaton_name : Unbounded_String;
	capacity : Integer;
	period : Integer;
	threshold : Integer;
	priority : Integer;
	user_defined_scheduler_source : Unbounded_String;
	user_defined_scheduler_source_file_name : Unbounded_String;
	user_defined_scheduler_protocol_name : Unbounded_String;
	start_time : Integer;
end record;

type Hierarchical_Protocol_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	scheduler_type : Schedulers_Type;
	quantum : Integer;
	preemptive_type : Preemptives_Type;
	automaton_name : Unbounded_String;
	capacity : Integer;
	period : Integer;
	threshold : Integer;
	priority : Integer;
	user_defined_scheduler_source : Unbounded_String;
	user_defined_scheduler_source_file_name : Unbounded_String;
	user_defined_scheduler_protocol_name : Unbounded_String;
	start_time : Integer;
end record;

type Compiled_User_Defined_Protocol_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	scheduler_type : Schedulers_Type;
	quantum : Integer;
	preemptive_type : Preemptives_Type;
	automaton_name : Unbounded_String;
	capacity : Integer;
	period : Integer;
	threshold : Integer;
	priority : Integer;
	user_defined_scheduler_source : Unbounded_String;
	user_defined_scheduler_source_file_name : Unbounded_String;
	user_defined_scheduler_protocol_name : Unbounded_String;
	start_time : Integer;
end record;

type Automata_User_Defined_Protocol_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	scheduler_type : Schedulers_Type;
	quantum : Integer;
	preemptive_type : Preemptives_Type;
	automaton_name : Unbounded_String;
	capacity : Integer;
	period : Integer;
	threshold : Integer;
	priority : Integer;
	user_defined_scheduler_source : Unbounded_String;
	user_defined_scheduler_source_file_name : Unbounded_String;
	user_defined_scheduler_protocol_name : Unbounded_String;
	start_time : Integer;
end record;

type Pipeline_User_Defined_Protocol_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	scheduler_type : Schedulers_Type;
	quantum : Integer;
	preemptive_type : Preemptives_Type;
	automaton_name : Unbounded_String;
	capacity : Integer;
	period : Integer;
	threshold : Integer;
	priority : Integer;
	user_defined_scheduler_source : Unbounded_String;
	user_defined_scheduler_source_file_name : Unbounded_String;
	user_defined_scheduler_protocol_name : Unbounded_String;
	start_time : Integer;
end record;

type User_Defined_Protocol_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	scheduler_type : Schedulers_Type;
	quantum : Integer;
	preemptive_type : Preemptives_Type;
	automaton_name : Unbounded_String;
	capacity : Integer;
	period : Integer;
	threshold : Integer;
	priority : Integer;
	user_defined_scheduler_source : Unbounded_String;
	user_defined_scheduler_source_file_name : Unbounded_String;
	user_defined_scheduler_protocol_name : Unbounded_String;
	start_time : Integer;
end record;

type Earliest_Deadline_First_Protocol_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	scheduler_type : Schedulers_Type;
	quantum : Integer;
	preemptive_type : Preemptives_Type;
	automaton_name : Unbounded_String;
	capacity : Integer;
	period : Integer;
	threshold : Integer;
	priority : Integer;
	user_defined_scheduler_source : Unbounded_String;
	user_defined_scheduler_source_file_name : Unbounded_String;
	user_defined_scheduler_protocol_name : Unbounded_String;
	start_time : Integer;
end record;

type Least_Laxity_First_Protocol_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	scheduler_type : Schedulers_Type;
	quantum : Integer;
	preemptive_type : Preemptives_Type;
	automaton_name : Unbounded_String;
	capacity : Integer;
	period : Integer;
	threshold : Integer;
	priority : Integer;
	user_defined_scheduler_source : Unbounded_String;
	user_defined_scheduler_source_file_name : Unbounded_String;
	user_defined_scheduler_protocol_name : Unbounded_String;
	start_time : Integer;
end record;

type Least_Runtime_Laxity_First_Protocol_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	scheduler_type : Schedulers_Type;
	quantum : Integer;
	preemptive_type : Preemptives_Type;
	automaton_name : Unbounded_String;
	capacity : Integer;
	period : Integer;
	threshold : Integer;
	priority : Integer;
	user_defined_scheduler_source : Unbounded_String;
	user_defined_scheduler_source_file_name : Unbounded_String;
	user_defined_scheduler_protocol_name : Unbounded_String;
	start_time : Integer;
end record;

type Rate_Monotonic_Protocol_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	scheduler_type : Schedulers_Type;
	quantum : Integer;
	preemptive_type : Preemptives_Type;
	automaton_name : Unbounded_String;
	capacity : Integer;
	period : Integer;
	threshold : Integer;
	priority : Integer;
	user_defined_scheduler_source : Unbounded_String;
	user_defined_scheduler_source_file_name : Unbounded_String;
	user_defined_scheduler_protocol_name : Unbounded_String;
	start_time : Integer;
end record;

type Deadline_Monotonic_Protocol_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	scheduler_type : Schedulers_Type;
	quantum : Integer;
	preemptive_type : Preemptives_Type;
	automaton_name : Unbounded_String;
	capacity : Integer;
	period : Integer;
	threshold : Integer;
	priority : Integer;
	user_defined_scheduler_source : Unbounded_String;
	user_defined_scheduler_source_file_name : Unbounded_String;
	user_defined_scheduler_protocol_name : Unbounded_String;
	start_time : Integer;
end record;

type Round_Robin_Protocol_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	scheduler_type : Schedulers_Type;
	quantum : Integer;
	preemptive_type : Preemptives_Type;
	automaton_name : Unbounded_String;
	capacity : Integer;
	period : Integer;
	threshold : Integer;
	priority : Integer;
	user_defined_scheduler_source : Unbounded_String;
	user_defined_scheduler_source_file_name : Unbounded_String;
	user_defined_scheduler_protocol_name : Unbounded_String;
	start_time : Integer;
end record;

type Time_Sharing_Based_On_Wait_Time_Protocol_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	scheduler_type : Schedulers_Type;
	quantum : Integer;
	preemptive_type : Preemptives_Type;
	automaton_name : Unbounded_String;
	capacity : Integer;
	period : Integer;
	threshold : Integer;
	priority : Integer;
	user_defined_scheduler_source : Unbounded_String;
	user_defined_scheduler_source_file_name : Unbounded_String;
	user_defined_scheduler_protocol_name : Unbounded_String;
	start_time : Integer;
end record;

type Posix_1003_Highest_Priority_First_Protocol_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	scheduler_type : Schedulers_Type;
	quantum : Integer;
	preemptive_type : Preemptives_Type;
	automaton_name : Unbounded_String;
	capacity : Integer;
	period : Integer;
	threshold : Integer;
	priority : Integer;
	user_defined_scheduler_source : Unbounded_String;
	user_defined_scheduler_source_file_name : Unbounded_String;
	user_defined_scheduler_protocol_name : Unbounded_String;
	start_time : Integer;
end record;

type D_Over_Protocol_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	scheduler_type : Schedulers_Type;
	quantum : Integer;
	preemptive_type : Preemptives_Type;
	automaton_name : Unbounded_String;
	capacity : Integer;
	period : Integer;
	threshold : Integer;
	priority : Integer;
	user_defined_scheduler_source : Unbounded_String;
	user_defined_scheduler_source_file_name : Unbounded_String;
	user_defined_scheduler_protocol_name : Unbounded_String;
	start_time : Integer;
end record;

type Maximum_Urgency_First_Based_On_Laxity_Protocol_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	scheduler_type : Schedulers_Type;
	quantum : Integer;
	preemptive_type : Preemptives_Type;
	automaton_name : Unbounded_String;
	capacity : Integer;
	period : Integer;
	threshold : Integer;
	priority : Integer;
	user_defined_scheduler_source : Unbounded_String;
	user_defined_scheduler_source_file_name : Unbounded_String;
	user_defined_scheduler_protocol_name : Unbounded_String;
	start_time : Integer;
end record;

type Maximum_Urgency_First_Based_On_Deadline_Protocol_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	scheduler_type : Schedulers_Type;
	quantum : Integer;
	preemptive_type : Preemptives_Type;
	automaton_name : Unbounded_String;
	capacity : Integer;
	period : Integer;
	threshold : Integer;
	priority : Integer;
	user_defined_scheduler_source : Unbounded_String;
	user_defined_scheduler_source_file_name : Unbounded_String;
	user_defined_scheduler_protocol_name : Unbounded_String;
	start_time : Integer;
end record;

type Time_Sharing_Based_On_Cpu_Usage_Protocol_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	scheduler_type : Schedulers_Type;
	quantum : Integer;
	preemptive_type : Preemptives_Type;
	automaton_name : Unbounded_String;
	capacity : Integer;
	period : Integer;
	threshold : Integer;
	priority : Integer;
	user_defined_scheduler_source : Unbounded_String;
	user_defined_scheduler_source_file_name : Unbounded_String;
	user_defined_scheduler_protocol_name : Unbounded_String;
	start_time : Integer;
end record;

type No_Scheduling_Protocol_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	scheduler_type : Schedulers_Type;
	quantum : Integer;
	preemptive_type : Preemptives_Type;
	automaton_name : Unbounded_String;
	capacity : Integer;
	period : Integer;
	threshold : Integer;
	priority : Integer;
	user_defined_scheduler_source : Unbounded_String;
	user_defined_scheduler_source_file_name : Unbounded_String;
	user_defined_scheduler_protocol_name : Unbounded_String;
	start_time : Integer;
end record;

type Hierarchical_Cyclic_Protocol_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	scheduler_type : Schedulers_Type;
	quantum : Integer;
	preemptive_type : Preemptives_Type;
	automaton_name : Unbounded_String;
	capacity : Integer;
	period : Integer;
	threshold : Integer;
	priority : Integer;
	user_defined_scheduler_source : Unbounded_String;
	user_defined_scheduler_source_file_name : Unbounded_String;
	user_defined_scheduler_protocol_name : Unbounded_String;
	start_time : Integer;
end record;

type Hierarchical_Round_Robin_Protocol_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	scheduler_type : Schedulers_Type;
	quantum : Integer;
	preemptive_type : Preemptives_Type;
	automaton_name : Unbounded_String;
	capacity : Integer;
	period : Integer;
	threshold : Integer;
	priority : Integer;
	user_defined_scheduler_source : Unbounded_String;
	user_defined_scheduler_source_file_name : Unbounded_String;
	user_defined_scheduler_protocol_name : Unbounded_String;
	start_time : Integer;
end record;

type Hierarchical_Fixed_Priority_Protocol_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	scheduler_type : Schedulers_Type;
	quantum : Integer;
	preemptive_type : Preemptives_Type;
	automaton_name : Unbounded_String;
	capacity : Integer;
	period : Integer;
	threshold : Integer;
	priority : Integer;
	user_defined_scheduler_source : Unbounded_String;
	user_defined_scheduler_source_file_name : Unbounded_String;
	user_defined_scheduler_protocol_name : Unbounded_String;
	start_time : Integer;
end record;

type Hierarchical_Offline_Protocol_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	scheduler_type : Schedulers_Type;
	quantum : Integer;
	preemptive_type : Preemptives_Type;
	automaton_name : Unbounded_String;
	capacity : Integer;
	period : Integer;
	threshold : Integer;
	priority : Integer;
	user_defined_scheduler_source : Unbounded_String;
	user_defined_scheduler_source_file_name : Unbounded_String;
	user_defined_scheduler_protocol_name : Unbounded_String;
	start_time : Integer;
end record;

type Fixed_Priority_Protocol_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	scheduler_type : Schedulers_Type;
	quantum : Integer;
	preemptive_type : Preemptives_Type;
	automaton_name : Unbounded_String;
	capacity : Integer;
	period : Integer;
	threshold : Integer;
	priority : Integer;
	user_defined_scheduler_source : Unbounded_String;
	user_defined_scheduler_source_file_name : Unbounded_String;
	user_defined_scheduler_protocol_name : Unbounded_String;
	start_time : Integer;
end record;

type Dynamic_Priority_Protocol_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	scheduler_type : Schedulers_Type;
	quantum : Integer;
	preemptive_type : Preemptives_Type;
	automaton_name : Unbounded_String;
	capacity : Integer;
	period : Integer;
	threshold : Integer;
	priority : Integer;
	user_defined_scheduler_source : Unbounded_String;
	user_defined_scheduler_source_file_name : Unbounded_String;
	user_defined_scheduler_protocol_name : Unbounded_String;
	start_time : Integer;
end record;

type Generic_Object_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
end record;

type Named_Object_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
end record;

type Generic_Node_io is record
	cheddar_private_id : Unbounded_String;
	Id : Unbounded_String;
end record;

type Generic_Edge_io is record
	cheddar_private_id : Unbounded_String;
	Id : Unbounded_String;
	Node_1 : Unbounded_String;
	Node_2 : Unbounded_String;
end record;

type Graph_io is record
	cheddar_private_id : Unbounded_String;
end record;

type Execution_Unit_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	Type_eu : Execution_Unit_Type;
	values_eu : Integer;
end record;

type Generic_Expression_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	expression_type : Expressions_Type;
end record;

type Constant_Expression_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	expression_type : Expressions_Type;
end record;

type Variable_Expression_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	expression_type : Expressions_Type;
	identifier : Unbounded_String;
	variable_type : Simulation_Type;
end record;

type Array_Variable_Expression_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	expression_type : Expressions_Type;
	identifier : Unbounded_String;
	variable_type : Simulation_Type;
	array_index : Unbounded_String;
end record;

type Binary_Expression_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	expression_type : Expressions_Type;
	identifier : Unbounded_String;
	variable_type : Simulation_Type;
	rvalue : Unbounded_String;
	lvalue : Unbounded_String;
	operator : Operator_Type;
end record;

type Unary_Expression_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	expression_type : Expressions_Type;
	identifier : Unbounded_String;
	variable_type : Simulation_Type;
	operator : Operator_Type;
	VALUE : Unbounded_String;
end record;

type Cache_Block_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	cache_block_number : Integer;
end record;

type Cache_Access_Profile_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
end record;

type Generic_Cache_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	cache_size : Integer;
	line_size : Integer;
	associativity : Integer;
	block_reload_time : Integer;
	replacement_policy : Cache_Replacement_Policy_Type;
	coherence_protocol : Cache_Coherence_Protocol_Type;
	cache_category : Cache_Type;
end record;

type Data_Cache_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	cache_size : Integer;
	line_size : Integer;
	associativity : Integer;
	block_reload_time : Integer;
	replacement_policy : Cache_Replacement_Policy_Type;
	coherence_protocol : Cache_Coherence_Protocol_Type;
	cache_category : Cache_Type;
	write_policy : Write_Policy_Type;
end record;

type Instruction_Cache_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	cache_size : Integer;
	line_size : Integer;
	associativity : Integer;
	block_reload_time : Integer;
	replacement_policy : Cache_Replacement_Policy_Type;
	coherence_protocol : Cache_Coherence_Protocol_Type;
	cache_category : Cache_Type;
end record;

type Data_Instruction_Cache_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	cache_size : Integer;
	line_size : Integer;
	associativity : Integer;
	block_reload_time : Integer;
	replacement_policy : Cache_Replacement_Policy_Type;
	coherence_protocol : Cache_Coherence_Protocol_Type;
	cache_category : Cache_Type;
	write_policy : Write_Policy_Type;
end record;

type Cache_System_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
end record;

type Generic_Resource_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	state : Integer;
	size : Integer;
	address : Integer;
	protocol : Resources_Type;
	cpu_name : Unbounded_String;
	address_space_name : Unbounded_String;
	priority : Integer;
	priority_assignment : Priority_Assignment_Type;
end record;

type Np_Resource_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	state : Integer;
	size : Integer;
	address : Integer;
	protocol : Resources_Type;
	cpu_name : Unbounded_String;
	address_space_name : Unbounded_String;
	priority : Integer;
	priority_assignment : Priority_Assignment_Type;
end record;

type Pip_Resource_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	state : Integer;
	size : Integer;
	address : Integer;
	protocol : Resources_Type;
	cpu_name : Unbounded_String;
	address_space_name : Unbounded_String;
	priority : Integer;
	priority_assignment : Priority_Assignment_Type;
end record;

type Pcp_Resource_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	state : Integer;
	size : Integer;
	address : Integer;
	protocol : Resources_Type;
	cpu_name : Unbounded_String;
	address_space_name : Unbounded_String;
	priority : Integer;
	priority_assignment : Priority_Assignment_Type;
end record;

type PPcp_Resource_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	state : Integer;
	size : Integer;
	address : Integer;
	protocol : Resources_Type;
	cpu_name : Unbounded_String;
	address_space_name : Unbounded_String;
	priority : Integer;
	priority_assignment : Priority_Assignment_Type;
end record;

type IPcp_Resource_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	state : Integer;
	size : Integer;
	address : Integer;
	protocol : Resources_Type;
	cpu_name : Unbounded_String;
	address_space_name : Unbounded_String;
	priority : Integer;
	priority_assignment : Priority_Assignment_Type;
end record;

type Generic_Task_Group_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	task_group_type : Task_Groups_Type;
	deadline : Integer;
	start_time : Integer;
	priority : Integer;
	criticality : Integer;
	period : Integer;
	jitter : Integer;
end record;

type Transaction_Task_Group_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	task_group_type : Task_Groups_Type;
	deadline : Integer;
	start_time : Integer;
	priority : Integer;
	criticality : Integer;
	period : Integer;
	jitter : Integer;
end record;

type Multiframe_Task_Group_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	task_group_type : Task_Groups_Type;
	deadline : Integer;
	start_time : Integer;
	priority : Integer;
	criticality : Integer;
	period : Integer;
	jitter : Integer;
end record;

type CFG_Edge_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	node : Unbounded_String;
	next_node : Unbounded_String;
end record;

type Generic_Task_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	task_type : Tasks_Type;
	cpu_name : Unbounded_String;
	address_space_name : Unbounded_String;
	core_name : Unbounded_String;
	capacity_model : Execution_Unit_Model_Type;
	capacity : Integer;
	energy_consumption : Integer;
	deadline : Integer;
	start_time : Integer;
	priority : Integer;
	blocking_time : Integer;
	policy : Policies;
	text_memory_size : Integer;
	text_memory_start_address : Integer;
	stack_memory_size : Integer;
	criticality : Integer;
	context_switch_overhead : Integer;
	cfg_name : Unbounded_String;
	cfg_relocatable : Boolean;
	cache_access_profile_name : Unbounded_String;
	mils_confidentiality_level : MILS_Confidentiality_Level_Type;
	mils_integrity_level : MILS_Integrity_Level_Type;
	mils_component : MILS_Component_Type;
	mils_task : MILS_Task_Type;
	mils_compliant : Boolean;
	access_memory_number : Integer;
	maximum_number_of_memory_request_per_job : Integer;
	seed : Integer;
	predictable : Boolean;
end record;

type Periodic_Task_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	task_type : Tasks_Type;
	cpu_name : Unbounded_String;
	address_space_name : Unbounded_String;
	core_name : Unbounded_String;
	capacity_model : Execution_Unit_Model_Type;
	capacity : Integer;
	energy_consumption : Integer;
	deadline : Integer;
	start_time : Integer;
	priority : Integer;
	blocking_time : Integer;
	policy : Policies;
	text_memory_size : Integer;
	text_memory_start_address : Integer;
	stack_memory_size : Integer;
	criticality : Integer;
	context_switch_overhead : Integer;
	cfg_name : Unbounded_String;
	cfg_relocatable : Boolean;
	cache_access_profile_name : Unbounded_String;
	mils_confidentiality_level : MILS_Confidentiality_Level_Type;
	mils_integrity_level : MILS_Integrity_Level_Type;
	mils_component : MILS_Component_Type;
	mils_task : MILS_Task_Type;
	mils_compliant : Boolean;
	access_memory_number : Integer;
	maximum_number_of_memory_request_per_job : Integer;
	seed : Integer;
	predictable : Boolean;
	period : Integer;
	jitter : Integer;
	every : Integer;
	completion_time : Integer;
end record;

type Aperiodic_Task_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	task_type : Tasks_Type;
	cpu_name : Unbounded_String;
	address_space_name : Unbounded_String;
	core_name : Unbounded_String;
	capacity_model : Execution_Unit_Model_Type;
	capacity : Integer;
	energy_consumption : Integer;
	deadline : Integer;
	start_time : Integer;
	priority : Integer;
	blocking_time : Integer;
	policy : Policies;
	text_memory_size : Integer;
	text_memory_start_address : Integer;
	stack_memory_size : Integer;
	criticality : Integer;
	context_switch_overhead : Integer;
	cfg_name : Unbounded_String;
	cfg_relocatable : Boolean;
	cache_access_profile_name : Unbounded_String;
	mils_confidentiality_level : MILS_Confidentiality_Level_Type;
	mils_integrity_level : MILS_Integrity_Level_Type;
	mils_component : MILS_Component_Type;
	mils_task : MILS_Task_Type;
	mils_compliant : Boolean;
	access_memory_number : Integer;
	maximum_number_of_memory_request_per_job : Integer;
	seed : Integer;
	predictable : Boolean;
end record;

type Poisson_Task_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	task_type : Tasks_Type;
	cpu_name : Unbounded_String;
	address_space_name : Unbounded_String;
	core_name : Unbounded_String;
	capacity_model : Execution_Unit_Model_Type;
	capacity : Integer;
	energy_consumption : Integer;
	deadline : Integer;
	start_time : Integer;
	priority : Integer;
	blocking_time : Integer;
	policy : Policies;
	text_memory_size : Integer;
	text_memory_start_address : Integer;
	stack_memory_size : Integer;
	criticality : Integer;
	context_switch_overhead : Integer;
	cfg_name : Unbounded_String;
	cfg_relocatable : Boolean;
	cache_access_profile_name : Unbounded_String;
	mils_confidentiality_level : MILS_Confidentiality_Level_Type;
	mils_integrity_level : MILS_Integrity_Level_Type;
	mils_component : MILS_Component_Type;
	mils_task : MILS_Task_Type;
	mils_compliant : Boolean;
	access_memory_number : Integer;
	maximum_number_of_memory_request_per_job : Integer;
	seed : Integer;
	predictable : Boolean;
	period : Integer;
	jitter : Integer;
	every : Integer;
	completion_time : Integer;
end record;

type Timed_Task_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	task_type : Tasks_Type;
	cpu_name : Unbounded_String;
	address_space_name : Unbounded_String;
	core_name : Unbounded_String;
	capacity_model : Execution_Unit_Model_Type;
	capacity : Integer;
	energy_consumption : Integer;
	deadline : Integer;
	start_time : Integer;
	priority : Integer;
	blocking_time : Integer;
	policy : Policies;
	text_memory_size : Integer;
	text_memory_start_address : Integer;
	stack_memory_size : Integer;
	criticality : Integer;
	context_switch_overhead : Integer;
	cfg_name : Unbounded_String;
	cfg_relocatable : Boolean;
	cache_access_profile_name : Unbounded_String;
	mils_confidentiality_level : MILS_Confidentiality_Level_Type;
	mils_integrity_level : MILS_Integrity_Level_Type;
	mils_component : MILS_Component_Type;
	mils_task : MILS_Task_Type;
	mils_compliant : Boolean;
	access_memory_number : Integer;
	maximum_number_of_memory_request_per_job : Integer;
	seed : Integer;
	predictable : Boolean;
	period : Integer;
	jitter : Integer;
	every : Integer;
	completion_time : Integer;
end record;

type Sporadic_Task_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	task_type : Tasks_Type;
	cpu_name : Unbounded_String;
	address_space_name : Unbounded_String;
	core_name : Unbounded_String;
	capacity_model : Execution_Unit_Model_Type;
	capacity : Integer;
	energy_consumption : Integer;
	deadline : Integer;
	start_time : Integer;
	priority : Integer;
	blocking_time : Integer;
	policy : Policies;
	text_memory_size : Integer;
	text_memory_start_address : Integer;
	stack_memory_size : Integer;
	criticality : Integer;
	context_switch_overhead : Integer;
	cfg_name : Unbounded_String;
	cfg_relocatable : Boolean;
	cache_access_profile_name : Unbounded_String;
	mils_confidentiality_level : MILS_Confidentiality_Level_Type;
	mils_integrity_level : MILS_Integrity_Level_Type;
	mils_component : MILS_Component_Type;
	mils_task : MILS_Task_Type;
	mils_compliant : Boolean;
	access_memory_number : Integer;
	maximum_number_of_memory_request_per_job : Integer;
	seed : Integer;
	predictable : Boolean;
	period : Integer;
	jitter : Integer;
	every : Integer;
	completion_time : Integer;
end record;

type Parametric_Task_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	task_type : Tasks_Type;
	cpu_name : Unbounded_String;
	address_space_name : Unbounded_String;
	core_name : Unbounded_String;
	capacity_model : Execution_Unit_Model_Type;
	capacity : Integer;
	energy_consumption : Integer;
	deadline : Integer;
	start_time : Integer;
	priority : Integer;
	blocking_time : Integer;
	policy : Policies;
	text_memory_size : Integer;
	text_memory_start_address : Integer;
	stack_memory_size : Integer;
	criticality : Integer;
	context_switch_overhead : Integer;
	cfg_name : Unbounded_String;
	cfg_relocatable : Boolean;
	cache_access_profile_name : Unbounded_String;
	mils_confidentiality_level : MILS_Confidentiality_Level_Type;
	mils_integrity_level : MILS_Integrity_Level_Type;
	mils_component : MILS_Component_Type;
	mils_task : MILS_Task_Type;
	mils_compliant : Boolean;
	access_memory_number : Integer;
	maximum_number_of_memory_request_per_job : Integer;
	seed : Integer;
	predictable : Boolean;
	period : Integer;
	jitter : Integer;
	every : Integer;
	completion_time : Integer;
	activation_rule : Unbounded_String;
end record;

type Scheduling_Task_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	task_type : Tasks_Type;
	cpu_name : Unbounded_String;
	address_space_name : Unbounded_String;
	core_name : Unbounded_String;
	capacity_model : Execution_Unit_Model_Type;
	capacity : Integer;
	energy_consumption : Integer;
	deadline : Integer;
	start_time : Integer;
	priority : Integer;
	blocking_time : Integer;
	policy : Policies;
	text_memory_size : Integer;
	text_memory_start_address : Integer;
	stack_memory_size : Integer;
	criticality : Integer;
	context_switch_overhead : Integer;
	cfg_name : Unbounded_String;
	cfg_relocatable : Boolean;
	cache_access_profile_name : Unbounded_String;
	mils_confidentiality_level : MILS_Confidentiality_Level_Type;
	mils_integrity_level : MILS_Integrity_Level_Type;
	mils_component : MILS_Component_Type;
	mils_task : MILS_Task_Type;
	mils_compliant : Boolean;
	access_memory_number : Integer;
	maximum_number_of_memory_request_per_job : Integer;
	seed : Integer;
	predictable : Boolean;
	period : Integer;
	jitter : Integer;
	every : Integer;
	completion_time : Integer;
end record;

type Frame_Task_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	task_type : Tasks_Type;
	cpu_name : Unbounded_String;
	address_space_name : Unbounded_String;
	core_name : Unbounded_String;
	capacity_model : Execution_Unit_Model_Type;
	capacity : Integer;
	energy_consumption : Integer;
	deadline : Integer;
	start_time : Integer;
	priority : Integer;
	blocking_time : Integer;
	policy : Policies;
	text_memory_size : Integer;
	text_memory_start_address : Integer;
	stack_memory_size : Integer;
	criticality : Integer;
	context_switch_overhead : Integer;
	cfg_name : Unbounded_String;
	cfg_relocatable : Boolean;
	cache_access_profile_name : Unbounded_String;
	mils_confidentiality_level : MILS_Confidentiality_Level_Type;
	mils_integrity_level : MILS_Integrity_Level_Type;
	mils_component : MILS_Component_Type;
	mils_task : MILS_Task_Type;
	mils_compliant : Boolean;
	access_memory_number : Integer;
	maximum_number_of_memory_request_per_job : Integer;
	seed : Integer;
	predictable : Boolean;
	period : Integer;
	jitter : Integer;
	every : Integer;
	completion_time : Integer;
	interarrival : Integer;
end record;

type Sporadic_Inner_Periodic_Task_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	task_type : Tasks_Type;
	cpu_name : Unbounded_String;
	address_space_name : Unbounded_String;
	core_name : Unbounded_String;
	capacity_model : Execution_Unit_Model_Type;
	capacity : Integer;
	energy_consumption : Integer;
	deadline : Integer;
	start_time : Integer;
	priority : Integer;
	blocking_time : Integer;
	policy : Policies;
	text_memory_size : Integer;
	text_memory_start_address : Integer;
	stack_memory_size : Integer;
	criticality : Integer;
	context_switch_overhead : Integer;
	cfg_name : Unbounded_String;
	cfg_relocatable : Boolean;
	cache_access_profile_name : Unbounded_String;
	mils_confidentiality_level : MILS_Confidentiality_Level_Type;
	mils_integrity_level : MILS_Integrity_Level_Type;
	mils_component : MILS_Component_Type;
	mils_task : MILS_Task_Type;
	mils_compliant : Boolean;
	access_memory_number : Integer;
	maximum_number_of_memory_request_per_job : Integer;
	seed : Integer;
	predictable : Boolean;
	period : Integer;
	jitter : Integer;
	every : Integer;
	completion_time : Integer;
	activation_rule : Unbounded_String;
	outer_period : Integer;
	outer_duration : Integer;
end record;

type Periodic_Inner_Periodic_Task_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	task_type : Tasks_Type;
	cpu_name : Unbounded_String;
	address_space_name : Unbounded_String;
	core_name : Unbounded_String;
	capacity_model : Execution_Unit_Model_Type;
	capacity : Integer;
	energy_consumption : Integer;
	deadline : Integer;
	start_time : Integer;
	priority : Integer;
	blocking_time : Integer;
	policy : Policies;
	text_memory_size : Integer;
	text_memory_start_address : Integer;
	stack_memory_size : Integer;
	criticality : Integer;
	context_switch_overhead : Integer;
	cfg_name : Unbounded_String;
	cfg_relocatable : Boolean;
	cache_access_profile_name : Unbounded_String;
	mils_confidentiality_level : MILS_Confidentiality_Level_Type;
	mils_integrity_level : MILS_Integrity_Level_Type;
	mils_component : MILS_Component_Type;
	mils_task : MILS_Task_Type;
	mils_compliant : Boolean;
	access_memory_number : Integer;
	maximum_number_of_memory_request_per_job : Integer;
	seed : Integer;
	predictable : Boolean;
	period : Integer;
	jitter : Integer;
	every : Integer;
	completion_time : Integer;
	activation_rule : Unbounded_String;
	outer_period : Integer;
	outer_duration : Integer;
end record;

type Battery_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	capacity : Integer;
	rechargeable_power : Integer;
	cpu_name : Unbounded_String;
	e_max : Integer;
	e_min : Integer;
	initial_energy : Integer;
end record;

type Generic_Processor_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	processor_type : Processors_type;
	migration_type : Migrations_Type;
end record;

type Mono_Core_Processor_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	processor_type : Processors_type;
	migration_type : Migrations_Type;
	core : Unbounded_String;
end record;

type Multi_Cores_Processor_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	processor_type : Processors_type;
	migration_type : Migrations_Type;
	l2_cache_system_name : Unbounded_String;
end record;

type Core_Unit_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	scheduler_type : Schedulers_Type;
	quantum : Integer;
	preemptive_type : Preemptives_Type;
	automaton_name : Unbounded_String;
	capacity : Integer;
	period : Integer;
	threshold : Integer;
	priority : Integer;
	user_defined_scheduler_source : Unbounded_String;
	user_defined_scheduler_source_file_name : Unbounded_String;
	user_defined_scheduler_protocol_name : Unbounded_String;
	start_time : Integer;
	speed : Integer;
	l1_cache_system_name : Unbounded_String;
	worstcase_perequest_intrabank_memory_interference : Integer;
	worstcase_perequest_interbank_memory_interference : Integer;
	isa : Isa_Type;
end record;

type Basic_Block_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	graph_type : CFG_Graph_Type;
	node_type : CFG_Node_Type;
	instruction_offset : Integer;
	instruction_capacity : Integer;
	number_of_memory_access : Integer;
	execution_time : Integer;
	data_offset : Integer;
	data_capacity : Integer;
	loop_bound : Integer;
end record;

type Generic_Message_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	message_type : Messages_Type;
	preemptive_type : Preemptives_Type;
	deadline : Integer;
	size : Integer;
	response_time : Integer;
	communication_time : Integer;
	mils_confidentiality_level : MILS_Confidentiality_Level_Type;
	mils_integrity_level : MILS_Integrity_Level_Type;
end record;

type Periodic_Message_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	message_type : Messages_Type;
	preemptive_type : Preemptives_Type;
	deadline : Integer;
	size : Integer;
	response_time : Integer;
	communication_time : Integer;
	mils_confidentiality_level : MILS_Confidentiality_Level_Type;
	mils_integrity_level : MILS_Integrity_Level_Type;
	period : Integer;
	jitter : Integer;
end record;

type Aperiodic_Message_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	message_type : Messages_Type;
	preemptive_type : Preemptives_Type;
	deadline : Integer;
	size : Integer;
	response_time : Integer;
	communication_time : Integer;
	mils_confidentiality_level : MILS_Confidentiality_Level_Type;
	mils_integrity_level : MILS_Integrity_Level_Type;
end record;

type DFG_Variable_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
end record;

type DFG_Statement_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	Defined_Variable : Unbounded_String;
end record;

type Task_Release_Record_io is record
	cheddar_private_id : Unbounded_String;
	task_name : Unbounded_String;
	task_index : Integer;
	capacity : Integer;
	release_time : Integer;
	finish_time : Integer;
	deadline : Integer;
	completed : Boolean;
end record;

type Buffer_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	cpu_name : Unbounded_String;
	address_space_name : Unbounded_String;
	queueing_system_type : Queueing_Systems_Type;
	buffer_size : Integer;
	buffer_initial_data_size : Integer;
end record;

type Generic_Network_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	network_delay : Networks_Delay_Type;
	network_architecture_type : Networks_Architecture_Type;
end record;

type NOC_Network_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	network_delay : Networks_Delay_Type;
	network_architecture_type : Networks_Architecture_Type;
	topology : Topology_Type;
	number_of_processor : Integer;
	link_delay : Integer;
	dimension : Integer;
	number_of_virtual_channel : Integer;
	routing_protocol : Routing_Type;
	switching_protocol : Switching_Type;
end record;

type Spacewire_Network_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	network_delay : Networks_Delay_Type;
	network_architecture_type : Networks_Architecture_Type;
	number_of_processor : Integer;
	link_delay : Integer;
	Xdimension : Integer;
	Ydimension : Integer;
	routing_protocol : Routing_Type;
end record;

type Bus_Network_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	network_delay : Networks_Delay_Type;
	network_architecture_type : Networks_Architecture_Type;
	bus_arbitration : Arbitration_Type;
	memory_word_access_time : Integer;
	maximum_interbank_interferences_memory_delay : Integer;
end record;

type Generic_Memory_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	size : Integer;
	access_latency : Integer;
	memory_category : Memory_Type;
end record;

type DRAM_Memory_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	size : Integer;
	access_latency : Integer;
	memory_category : Memory_Type;
	shared_access_latency : Integer;
	private_access_latency : Integer;
	l_rw_inter : Integer;
	l_act_inter : Integer;
	l_pre_inter : Integer;
	n_reorder : Integer;
	l_conhit : Integer;
	l_conf : Integer;
end record;

type Kalray_Memory_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	size : Integer;
	access_latency : Integer;
	memory_category : Memory_Type;
	nb_bank : Integer;
	partition_mode : Boolean;
end record;

type Address_Space_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	cpu_name : Unbounded_String;
	text_memory_size : Integer;
	stack_memory_size : Integer;
	data_memory_size : Integer;
	heap_memory_size : Integer;
	scheduler_type : Schedulers_Type;
	quantum : Integer;
	preemptive_type : Preemptives_Type;
	automaton_name : Unbounded_String;
	capacity : Integer;
	period : Integer;
	threshold : Integer;
	priority : Integer;
	user_defined_scheduler_source : Unbounded_String;
	user_defined_scheduler_source_file_name : Unbounded_String;
	user_defined_scheduler_protocol_name : Unbounded_String;
	start_time : Integer;
	mils_confidentiality_level : MILS_Confidentiality_Level_Type;
	mils_integrity_level : MILS_Integrity_Level_Type;
	mils_component : MILS_Component_Type;
	mils_partition : MILS_Partition_Type;
	mils_compliant : Boolean;
end record;

type Run_Server_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	task_type : Tasks_Type;
	cpu_name : Unbounded_String;
	address_space_name : Unbounded_String;
	core_name : Unbounded_String;
	capacity_model : Execution_Unit_Model_Type;
	capacity : Integer;
	energy_consumption : Integer;
	deadline : Integer;
	start_time : Integer;
	priority : Integer;
	blocking_time : Integer;
	policy : Policies;
	text_memory_size : Integer;
	text_memory_start_address : Integer;
	stack_memory_size : Integer;
	criticality : Integer;
	context_switch_overhead : Integer;
	cfg_name : Unbounded_String;
	cfg_relocatable : Boolean;
	cache_access_profile_name : Unbounded_String;
	mils_confidentiality_level : MILS_Confidentiality_Level_Type;
	mils_integrity_level : MILS_Integrity_Level_Type;
	mils_component : MILS_Component_Type;
	mils_task : MILS_Task_Type;
	mils_compliant : Boolean;
	access_memory_number : Integer;
	maximum_number_of_memory_request_per_job : Integer;
	seed : Integer;
	predictable : Boolean;
	period : Integer;
	jitter : Integer;
	every : Integer;
	completion_time : Integer;
	rate : Double;
	core : Unbounded_String;
	executing : Boolean;
	job_capacity : Integer;
	job_duration : Integer;
	job_release : Integer;
	job_deadline : Integer;
end record;

type Run_Server_Primal_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	task_type : Tasks_Type;
	cpu_name : Unbounded_String;
	address_space_name : Unbounded_String;
	core_name : Unbounded_String;
	capacity_model : Execution_Unit_Model_Type;
	capacity : Integer;
	energy_consumption : Integer;
	deadline : Integer;
	start_time : Integer;
	priority : Integer;
	blocking_time : Integer;
	policy : Policies;
	text_memory_size : Integer;
	text_memory_start_address : Integer;
	stack_memory_size : Integer;
	criticality : Integer;
	context_switch_overhead : Integer;
	cfg_name : Unbounded_String;
	cfg_relocatable : Boolean;
	cache_access_profile_name : Unbounded_String;
	mils_confidentiality_level : MILS_Confidentiality_Level_Type;
	mils_integrity_level : MILS_Integrity_Level_Type;
	mils_component : MILS_Component_Type;
	mils_task : MILS_Task_Type;
	mils_compliant : Boolean;
	access_memory_number : Integer;
	maximum_number_of_memory_request_per_job : Integer;
	seed : Integer;
	predictable : Boolean;
	period : Integer;
	jitter : Integer;
	every : Integer;
	completion_time : Integer;
	rate : Double;
	core : Unbounded_String;
	executing : Boolean;
	job_capacity : Integer;
	job_duration : Integer;
	job_release : Integer;
	job_deadline : Integer;
end record;

type Run_Server_Dual_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
	task_type : Tasks_Type;
	cpu_name : Unbounded_String;
	address_space_name : Unbounded_String;
	core_name : Unbounded_String;
	capacity_model : Execution_Unit_Model_Type;
	capacity : Integer;
	energy_consumption : Integer;
	deadline : Integer;
	start_time : Integer;
	priority : Integer;
	blocking_time : Integer;
	policy : Policies;
	text_memory_size : Integer;
	text_memory_start_address : Integer;
	stack_memory_size : Integer;
	criticality : Integer;
	context_switch_overhead : Integer;
	cfg_name : Unbounded_String;
	cfg_relocatable : Boolean;
	cache_access_profile_name : Unbounded_String;
	mils_confidentiality_level : MILS_Confidentiality_Level_Type;
	mils_integrity_level : MILS_Integrity_Level_Type;
	mils_component : MILS_Component_Type;
	mils_task : MILS_Task_Type;
	mils_compliant : Boolean;
	access_memory_number : Integer;
	maximum_number_of_memory_request_per_job : Integer;
	seed : Integer;
	predictable : Boolean;
	period : Integer;
	jitter : Integer;
	every : Integer;
	completion_time : Integer;
	rate : Double;
	core : Unbounded_String;
	executing : Boolean;
	job_capacity : Integer;
	job_duration : Integer;
	job_release : Integer;
	job_deadline : Integer;
	primal_server : Unbounded_String;
end record;

type Task_Node_io is record
	cheddar_private_id : Unbounded_String;
	Id : Unbounded_String;
	TaskRef : Unbounded_String;
	Kind : Tasks_Type;
	Proc : Unbounded_String;
end record;

type Time_Triggered_Communication_Edge_io is record
	cheddar_private_id : Unbounded_String;
	Id : Unbounded_String;
	Node_1 : Unbounded_String;
	Node_2 : Unbounded_String;
	Timing_Property : Time_Triggered_Communication_Timing_Property_Type;
end record;

type Resource_Edge_io is record
	cheddar_private_id : Unbounded_String;
	Id : Unbounded_String;
	Node_1 : Unbounded_String;
	Node_2 : Unbounded_String;
	Resource_Dependency_Resource : Unbounded_String;
end record;

type Precedence_Edge_io is record
	cheddar_private_id : Unbounded_String;
	Id : Unbounded_String;
	Node_1 : Unbounded_String;
	Node_2 : Unbounded_String;
end record;

type Communication_Edge_io is record
	cheddar_private_id : Unbounded_String;
	Id : Unbounded_String;
	Node_1 : Unbounded_String;
	Node_2 : Unbounded_String;
	Communication_Dependency_Object : Unbounded_String;
end record;

type Buffer_Edge_io is record
	cheddar_private_id : Unbounded_String;
	Id : Unbounded_String;
	Node_1 : Unbounded_String;
	Node_2 : Unbounded_String;
	Buffer_Dependency_Object : Unbounded_String;
end record;

type Generic_Statement_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	statement_type : Statements_Type;
	line_number : Integer;
	file_name : Unbounded_String;
	next_statement : Unbounded_String;
end record;

type Nop_Statement_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	statement_type : Statements_Type;
	line_number : Integer;
	file_name : Unbounded_String;
	next_statement : Unbounded_String;
end record;

type Exit_Statement_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	statement_type : Statements_Type;
	line_number : Integer;
	file_name : Unbounded_String;
	next_statement : Unbounded_String;
end record;

type Put_Statement_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	statement_type : Statements_Type;
	line_number : Integer;
	file_name : Unbounded_String;
	next_statement : Unbounded_String;
	put_from : Unbounded_String;
	put_to : Unbounded_String;
	expression_to_be_displayed : Unbounded_String;
end record;

type If_Statement_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	statement_type : Statements_Type;
	line_number : Integer;
	file_name : Unbounded_String;
	next_statement : Unbounded_String;
	bool_expression : Unbounded_String;
	else_statement : Unbounded_String;
	then_statement : Unbounded_String;
end record;

type Assign_Statement_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	statement_type : Statements_Type;
	line_number : Integer;
	file_name : Unbounded_String;
	next_statement : Unbounded_String;
	lvalue : Unbounded_String;
	rvalue : Unbounded_String;
end record;

type Clock_Statement_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	statement_type : Statements_Type;
	line_number : Integer;
	file_name : Unbounded_String;
	next_statement : Unbounded_String;
	lvalue : Unbounded_String;
	rvalue : Unbounded_String;
end record;

type Delete_Precedence_Statement_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	statement_type : Statements_Type;
	line_number : Integer;
	file_name : Unbounded_String;
	next_statement : Unbounded_String;
	Delete_Source : Unbounded_String;
	Delete_Sink : Unbounded_String;
end record;

type Add_Precedence_Statement_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	statement_type : Statements_Type;
	line_number : Integer;
	file_name : Unbounded_String;
	next_statement : Unbounded_String;
	Add_Source : Unbounded_String;
	Add_Sink : Unbounded_String;
end record;

type For_Statement_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	statement_type : Statements_Type;
	line_number : Integer;
	file_name : Unbounded_String;
	next_statement : Unbounded_String;
	for_type : Table_Types;
	included_statement : Unbounded_String;
	for_index : Unbounded_String;
end record;

type Return_Statement_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	statement_type : Statements_Type;
	line_number : Integer;
	file_name : Unbounded_String;
	next_statement : Unbounded_String;
	return_value : Unbounded_String;
end record;

type While_Statement_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	statement_type : Statements_Type;
	line_number : Integer;
	file_name : Unbounded_String;
	next_statement : Unbounded_String;
	included_statement : Unbounded_String;
	condition : Unbounded_String;
end record;

type Random_Initialize_Statement_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	statement_type : Statements_Type;
	line_number : Integer;
	file_name : Unbounded_String;
	next_statement : Unbounded_String;
	lvalue : Unbounded_String;
	law : Laws_Type;
	parameter1 : Unbounded_String;
	parameter2 : Unbounded_String;
end record;

type Set_Statement_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	statement_type : Statements_Type;
	line_number : Integer;
	file_name : Unbounded_String;
	next_statement : Unbounded_String;
	set_id : Unbounded_String;
	set_value : Unbounded_String;
end record;

type Subprogram_Statement_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	statement_type : Statements_Type;
	line_number : Integer;
	file_name : Unbounded_String;
	next_statement : Unbounded_String;
	included_statement : Unbounded_String;
	is_a_function : Boolean;
	subprogram_name : Unbounded_String;
end record;

type Subprogram_Call_Statement_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	statement_type : Statements_Type;
	line_number : Integer;
	file_name : Unbounded_String;
	next_statement : Unbounded_String;
	is_a_function : Boolean;
	called_subprogram : Unbounded_String;
	return_value : Unbounded_String;
end record;

type CFG_io is record
	cheddar_private_id : Unbounded_String;
	object_type : Objects_Type;
	name : Unbounded_String;
end record;


procedure Initialize(obj : out Generic_Section_io);
procedure Initialize(obj : out Computation_Section_io);
procedure Initialize(obj : out Synchronization_Section_io);
procedure Initialize(obj : out CFG_Node_io);
procedure Initialize(obj : out State_io);
procedure Initialize(obj : out Synchronization_io);
procedure Initialize(obj : out Transition_io);
procedure Initialize(obj : out Event_Analyzer_io);
procedure Initialize(obj : out ARINC_653_Object_io);
procedure Initialize(obj : out Error_ID_Type_io);
procedure Initialize(obj : out Error_ID_Action_Type_io);
procedure Initialize(obj : out Error_ID_Level_Type_io);
procedure Initialize(obj : out System_State_Entry_Type_io);
procedure Initialize(obj : out SysHM_Ext_Type_io);
procedure Initialize(obj : out System_HM_TableType_io);
procedure Initialize(obj : out Mod_HM_Ext_Type_io);
procedure Initialize(obj : out Module_HM_Type_io);
procedure Initialize(obj : out PortExt_Type_io);
procedure Initialize(obj : out PortType_io);
procedure Initialize(obj : out SamplingPortType_io);
procedure Initialize(obj : out ProcExt_Type_io);
procedure Initialize(obj : out ProcessType_io);
procedure Initialize(obj : out QueuingPortType_io);
procedure Initialize(obj : out PartitionExt_Type_io);
procedure Initialize(obj : out PartitionType_io);
procedure Initialize(obj : out Memory_Requirements_io);
procedure Initialize(obj : out Memory_Ext_Type_io);
procedure Initialize(obj : out Partition_Memory_Element_io);
procedure Initialize(obj : out Partition_Sched_Ext_Type_io);
procedure Initialize(obj : out Window_Schedule_Element_io);
procedure Initialize(obj : out Window_Sched_Ext_Type_io);
procedure Initialize(obj : out Partition_Schedule_Element_io);
procedure Initialize(obj : out Module_Schedule_Type_io);
procedure Initialize(obj : out Part_HM_Ext_Type_io);
procedure Initialize(obj : out Partition_HM_Type_io);
procedure Initialize(obj : out Pseudo_Partition_io);
procedure Initialize(obj : out Standard_Partition_io);
procedure Initialize(obj : out PortMap_Ext_Type_io);
procedure Initialize(obj : out PortMappingType_io);
procedure Initialize(obj : out Channel_io);
procedure Initialize(obj : out ModExt_Type_io);
procedure Initialize(obj : out ARINC_653_Module_io);
procedure Initialize(obj : out Scheduling_Error_io);
procedure Initialize(obj : out Data_Access_io);
procedure Initialize(obj : out Generic_Scheduler_io);
procedure Initialize(obj : out Aperiodic_Task_Server_Protocol_io);
procedure Initialize(obj : out Polling_Server_Protocol_io);
procedure Initialize(obj : out Deferred_Server_Protocol_io);
procedure Initialize(obj : out Sporadic_Server_Protocol_io);
procedure Initialize(obj : out Hierarchical_Protocol_io);
procedure Initialize(obj : out Compiled_User_Defined_Protocol_io);
procedure Initialize(obj : out Automata_User_Defined_Protocol_io);
procedure Initialize(obj : out Pipeline_User_Defined_Protocol_io);
procedure Initialize(obj : out User_Defined_Protocol_io);
procedure Initialize(obj : out Earliest_Deadline_First_Protocol_io);
procedure Initialize(obj : out Least_Laxity_First_Protocol_io);
procedure Initialize(obj : out Least_Runtime_Laxity_First_Protocol_io);
procedure Initialize(obj : out Rate_Monotonic_Protocol_io);
procedure Initialize(obj : out Deadline_Monotonic_Protocol_io);
procedure Initialize(obj : out Round_Robin_Protocol_io);
procedure Initialize(obj : out Time_Sharing_Based_On_Wait_Time_Protocol_io);
procedure Initialize(obj : out Posix_1003_Highest_Priority_First_Protocol_io);
procedure Initialize(obj : out D_Over_Protocol_io);
procedure Initialize(obj : out Maximum_Urgency_First_Based_On_Laxity_Protocol_io);
procedure Initialize(obj : out Maximum_Urgency_First_Based_On_Deadline_Protocol_io);
procedure Initialize(obj : out Time_Sharing_Based_On_Cpu_Usage_Protocol_io);
procedure Initialize(obj : out No_Scheduling_Protocol_io);
procedure Initialize(obj : out Hierarchical_Cyclic_Protocol_io);
procedure Initialize(obj : out Hierarchical_Round_Robin_Protocol_io);
procedure Initialize(obj : out Hierarchical_Fixed_Priority_Protocol_io);
procedure Initialize(obj : out Hierarchical_Offline_Protocol_io);
procedure Initialize(obj : out Fixed_Priority_Protocol_io);
procedure Initialize(obj : out Dynamic_Priority_Protocol_io);
procedure Initialize(obj : out Generic_Object_io);
procedure Initialize(obj : out Named_Object_io);
procedure Initialize(obj : out Generic_Node_io);
procedure Initialize(obj : out Generic_Edge_io);
procedure Initialize(obj : out Graph_io);
procedure Initialize(obj : out Execution_Unit_io);
procedure Initialize(obj : out Generic_Expression_io);
procedure Initialize(obj : out Constant_Expression_io);
procedure Initialize(obj : out Variable_Expression_io);
procedure Initialize(obj : out Array_Variable_Expression_io);
procedure Initialize(obj : out Binary_Expression_io);
procedure Initialize(obj : out Unary_Expression_io);
procedure Initialize(obj : out Cache_Block_io);
procedure Initialize(obj : out Cache_Access_Profile_io);
procedure Initialize(obj : out Generic_Cache_io);
procedure Initialize(obj : out Data_Cache_io);
procedure Initialize(obj : out Instruction_Cache_io);
procedure Initialize(obj : out Data_Instruction_Cache_io);
procedure Initialize(obj : out Cache_System_io);
procedure Initialize(obj : out Generic_Resource_io);
procedure Initialize(obj : out Np_Resource_io);
procedure Initialize(obj : out Pip_Resource_io);
procedure Initialize(obj : out Pcp_Resource_io);
procedure Initialize(obj : out PPcp_Resource_io);
procedure Initialize(obj : out IPcp_Resource_io);
procedure Initialize(obj : out Generic_Task_Group_io);
procedure Initialize(obj : out Transaction_Task_Group_io);
procedure Initialize(obj : out Multiframe_Task_Group_io);
procedure Initialize(obj : out CFG_Edge_io);
procedure Initialize(obj : out Generic_Task_io);
procedure Initialize(obj : out Periodic_Task_io);
procedure Initialize(obj : out Aperiodic_Task_io);
procedure Initialize(obj : out Poisson_Task_io);
procedure Initialize(obj : out Timed_Task_io);
procedure Initialize(obj : out Sporadic_Task_io);
procedure Initialize(obj : out Parametric_Task_io);
procedure Initialize(obj : out Scheduling_Task_io);
procedure Initialize(obj : out Frame_Task_io);
procedure Initialize(obj : out Sporadic_Inner_Periodic_Task_io);
procedure Initialize(obj : out Periodic_Inner_Periodic_Task_io);
procedure Initialize(obj : out Battery_io);
procedure Initialize(obj : out Generic_Processor_io);
procedure Initialize(obj : out Mono_Core_Processor_io);
procedure Initialize(obj : out Multi_Cores_Processor_io);
procedure Initialize(obj : out Core_Unit_io);
procedure Initialize(obj : out Basic_Block_io);
procedure Initialize(obj : out Generic_Message_io);
procedure Initialize(obj : out Periodic_Message_io);
procedure Initialize(obj : out Aperiodic_Message_io);
procedure Initialize(obj : out DFG_Variable_io);
procedure Initialize(obj : out DFG_Statement_io);
procedure Initialize(obj : out Task_Release_Record_io);
procedure Initialize(obj : out Buffer_io);
procedure Initialize(obj : out Generic_Network_io);
procedure Initialize(obj : out NOC_Network_io);
procedure Initialize(obj : out Spacewire_Network_io);
procedure Initialize(obj : out Bus_Network_io);
procedure Initialize(obj : out Generic_Memory_io);
procedure Initialize(obj : out DRAM_Memory_io);
procedure Initialize(obj : out Kalray_Memory_io);
procedure Initialize(obj : out Address_Space_io);
procedure Initialize(obj : out Run_Server_io);
procedure Initialize(obj : out Run_Server_Primal_io);
procedure Initialize(obj : out Run_Server_Dual_io);
procedure Initialize(obj : out Task_Node_io);
procedure Initialize(obj : out Time_Triggered_Communication_Edge_io);
procedure Initialize(obj : out Resource_Edge_io);
procedure Initialize(obj : out Precedence_Edge_io);
procedure Initialize(obj : out Communication_Edge_io);
procedure Initialize(obj : out Buffer_Edge_io);
procedure Initialize(obj : out Generic_Statement_io);
procedure Initialize(obj : out Nop_Statement_io);
procedure Initialize(obj : out Exit_Statement_io);
procedure Initialize(obj : out Put_Statement_io);
procedure Initialize(obj : out If_Statement_io);
procedure Initialize(obj : out Assign_Statement_io);
procedure Initialize(obj : out Clock_Statement_io);
procedure Initialize(obj : out Delete_Precedence_Statement_io);
procedure Initialize(obj : out Add_Precedence_Statement_io);
procedure Initialize(obj : out For_Statement_io);
procedure Initialize(obj : out Return_Statement_io);
procedure Initialize(obj : out While_Statement_io);
procedure Initialize(obj : out Random_Initialize_Statement_io);
procedure Initialize(obj : out Set_Statement_io);
procedure Initialize(obj : out Subprogram_Statement_io);
procedure Initialize(obj : out Subprogram_Call_Statement_io);
procedure Initialize(obj : out CFG_io);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Generic_Section_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Computation_Section_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Computation_Section_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Synchronization_Section_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out CFG_Node_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out State_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Synchronization_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Transition_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Transition_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Event_Analyzer_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out ARINC_653_Object_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Error_ID_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Error_ID_Action_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Error_ID_Level_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out System_State_Entry_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out SysHM_Ext_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out System_HM_TableType_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Mod_HM_Ext_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Module_HM_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out PortExt_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out PortType_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out SamplingPortType_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out ProcExt_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out ProcessType_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out QueuingPortType_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out PartitionExt_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out PartitionType_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Memory_Requirements_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Memory_Ext_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Partition_Memory_Element_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Partition_Sched_Ext_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Window_Schedule_Element_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Window_Sched_Ext_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Partition_Schedule_Element_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Module_Schedule_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Part_HM_Ext_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Partition_HM_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Pseudo_Partition_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Standard_Partition_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out PortMap_Ext_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out PortMappingType_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Channel_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out ModExt_Type_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out ARINC_653_Module_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Scheduling_Error_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Data_Access_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Generic_Scheduler_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Aperiodic_Task_Server_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Polling_Server_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Deferred_Server_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Sporadic_Server_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Hierarchical_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Compiled_User_Defined_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Automata_User_Defined_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Pipeline_User_Defined_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out User_Defined_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Earliest_Deadline_First_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Least_Laxity_First_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Least_Runtime_Laxity_First_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Rate_Monotonic_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Deadline_Monotonic_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Round_Robin_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Time_Sharing_Based_On_Wait_Time_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Posix_1003_Highest_Priority_First_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out D_Over_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Maximum_Urgency_First_Based_On_Laxity_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Maximum_Urgency_First_Based_On_Deadline_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Time_Sharing_Based_On_Cpu_Usage_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out No_Scheduling_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Hierarchical_Cyclic_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Hierarchical_Round_Robin_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Hierarchical_Fixed_Priority_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Hierarchical_Offline_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Fixed_Priority_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Dynamic_Priority_Protocol_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Generic_Object_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Named_Object_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Generic_Node_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Generic_Edge_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Graph_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Execution_Unit_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Generic_Expression_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Constant_Expression_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Variable_Expression_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Array_Variable_Expression_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Array_Variable_Expression_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Binary_Expression_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Binary_Expression_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Unary_Expression_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Unary_Expression_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Cache_Block_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Cache_Access_Profile_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Generic_Cache_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Data_Cache_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Instruction_Cache_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Data_Instruction_Cache_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Cache_System_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Generic_Resource_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Np_Resource_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Pip_Resource_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Pcp_Resource_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out PPcp_Resource_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out IPcp_Resource_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Generic_Task_Group_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Transaction_Task_Group_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Multiframe_Task_Group_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out CFG_Edge_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Generic_Task_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Periodic_Task_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Aperiodic_Task_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Poisson_Task_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Timed_Task_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Sporadic_Task_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Parametric_Task_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Scheduling_Task_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Frame_Task_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Sporadic_Inner_Periodic_Task_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Periodic_Inner_Periodic_Task_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Battery_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Generic_Processor_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Mono_Core_Processor_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Mono_Core_Processor_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Multi_Cores_Processor_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Core_Unit_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Basic_Block_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Generic_Message_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Periodic_Message_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Aperiodic_Message_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out DFG_Variable_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out DFG_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out DFG_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Task_Release_Record_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Buffer_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Generic_Network_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out NOC_Network_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Spacewire_Network_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Bus_Network_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Generic_Memory_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out DRAM_Memory_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Kalray_Memory_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Address_Space_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Run_Server_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Run_Server_Primal_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Run_Server_Dual_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Run_Server_Dual_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Task_Node_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Task_Node_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Time_Triggered_Communication_Edge_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Resource_Edge_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Resource_Edge_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Precedence_Edge_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Communication_Edge_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Communication_Edge_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Buffer_Edge_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Buffer_Edge_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Generic_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Generic_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Nop_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Nop_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Exit_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Exit_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Put_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Put_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out If_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out If_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Assign_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Assign_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Clock_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Clock_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Delete_Precedence_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Delete_Precedence_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Add_Precedence_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Add_Precedence_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out For_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out For_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Return_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Return_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out While_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out While_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Random_Initialize_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Random_Initialize_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Set_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Set_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Subprogram_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Subprogram_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure Start_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Subprogram_Call_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "";
	Atts : Sax.Attributes.Attributes'Class);

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out Subprogram_Call_Statement_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");

procedure End_Element(
	Handler : in out Xml_generic_parser;
	obj : in out CFG_io;
	Namespace_Uri : Unicode.CES.Byte_Sequence := "";
	Local_Name : Unicode.CES.Byte_Sequence := "";
	Qname : Unicode.CES.Byte_Sequence := "");


end xml_architecture_io;
